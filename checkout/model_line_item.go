/*
Adyen Checkout API

Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!

API version: 70
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"
)

// checks if the LineItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LineItem{}

// LineItem struct for LineItem
type LineItem struct {
	// Item amount excluding the tax, in minor units.
	AmountExcludingTax *int64 `json:"amountExcludingTax,omitempty"`
	// Item amount including the tax, in minor units.
	AmountIncludingTax *int64 `json:"amountIncludingTax,omitempty"`
	// Brand of the item.
	Brand *string `json:"brand,omitempty"`
	// Color of the item.
	Color *string `json:"color,omitempty"`
	// Description of the line item.
	Description *string `json:"description,omitempty"`
	// ID of the line item.
	Id *string `json:"id,omitempty"`
	// Link to the picture of the purchased item.
	ImageUrl *string `json:"imageUrl,omitempty"`
	// Item category, used by the RatePay payment method.
	ItemCategory *string `json:"itemCategory,omitempty"`
	// Manufacturer of the item.
	Manufacturer *string `json:"manufacturer,omitempty"`
	// Link to the purchased item.
	ProductUrl *string `json:"productUrl,omitempty"`
	// Number of items.
	Quantity *int64 `json:"quantity,omitempty"`
	// Email associated with the given product in the basket (usually in electronic gift cards).
	ReceiverEmail *string `json:"receiverEmail,omitempty"`
	// Size of the item.
	Size *string `json:"size,omitempty"`
	// Stock keeping unit.
	Sku *string `json:"sku,omitempty"`
	// Tax amount, in minor units.
	TaxAmount *int64 `json:"taxAmount,omitempty"`
	// Tax percentage, in minor units.
	TaxPercentage *int64 `json:"taxPercentage,omitempty"`
	// Universal Product Code.
	Upc *string `json:"upc,omitempty"`
}

// NewLineItem instantiates a new LineItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLineItem() *LineItem {
	this := LineItem{}
	return &this
}

// NewLineItemWithDefaults instantiates a new LineItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLineItemWithDefaults() *LineItem {
	this := LineItem{}
	return &this
}

// GetAmountExcludingTax returns the AmountExcludingTax field value if set, zero value otherwise.
func (o *LineItem) GetAmountExcludingTax() int64 {
	if o == nil || IsNil(o.AmountExcludingTax) {
		var ret int64
		return ret
	}
	return *o.AmountExcludingTax
}

// GetAmountExcludingTaxOk returns a tuple with the AmountExcludingTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetAmountExcludingTaxOk() (*int64, bool) {
	if o == nil || IsNil(o.AmountExcludingTax) {
		return nil, false
	}
	return o.AmountExcludingTax, true
}

// HasAmountExcludingTax returns a boolean if a field has been set.
func (o *LineItem) HasAmountExcludingTax() bool {
	if o != nil && !IsNil(o.AmountExcludingTax) {
		return true
	}

	return false
}

// SetAmountExcludingTax gets a reference to the given int64 and assigns it to the AmountExcludingTax field.
func (o *LineItem) SetAmountExcludingTax(v int64) {
	o.AmountExcludingTax = &v
}

// GetAmountIncludingTax returns the AmountIncludingTax field value if set, zero value otherwise.
func (o *LineItem) GetAmountIncludingTax() int64 {
	if o == nil || IsNil(o.AmountIncludingTax) {
		var ret int64
		return ret
	}
	return *o.AmountIncludingTax
}

// GetAmountIncludingTaxOk returns a tuple with the AmountIncludingTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetAmountIncludingTaxOk() (*int64, bool) {
	if o == nil || IsNil(o.AmountIncludingTax) {
		return nil, false
	}
	return o.AmountIncludingTax, true
}

// HasAmountIncludingTax returns a boolean if a field has been set.
func (o *LineItem) HasAmountIncludingTax() bool {
	if o != nil && !IsNil(o.AmountIncludingTax) {
		return true
	}

	return false
}

// SetAmountIncludingTax gets a reference to the given int64 and assigns it to the AmountIncludingTax field.
func (o *LineItem) SetAmountIncludingTax(v int64) {
	o.AmountIncludingTax = &v
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *LineItem) GetBrand() string {
	if o == nil || IsNil(o.Brand) {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetBrandOk() (*string, bool) {
	if o == nil || IsNil(o.Brand) {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *LineItem) HasBrand() bool {
	if o != nil && !IsNil(o.Brand) {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *LineItem) SetBrand(v string) {
	o.Brand = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *LineItem) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *LineItem) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *LineItem) SetColor(v string) {
	o.Color = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LineItem) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LineItem) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LineItem) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LineItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LineItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LineItem) SetId(v string) {
	o.Id = &v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise.
func (o *LineItem) GetImageUrl() string {
	if o == nil || IsNil(o.ImageUrl) {
		var ret string
		return ret
	}
	return *o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ImageUrl) {
		return nil, false
	}
	return o.ImageUrl, true
}

// HasImageUrl returns a boolean if a field has been set.
func (o *LineItem) HasImageUrl() bool {
	if o != nil && !IsNil(o.ImageUrl) {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given string and assigns it to the ImageUrl field.
func (o *LineItem) SetImageUrl(v string) {
	o.ImageUrl = &v
}

// GetItemCategory returns the ItemCategory field value if set, zero value otherwise.
func (o *LineItem) GetItemCategory() string {
	if o == nil || IsNil(o.ItemCategory) {
		var ret string
		return ret
	}
	return *o.ItemCategory
}

// GetItemCategoryOk returns a tuple with the ItemCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetItemCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.ItemCategory) {
		return nil, false
	}
	return o.ItemCategory, true
}

// HasItemCategory returns a boolean if a field has been set.
func (o *LineItem) HasItemCategory() bool {
	if o != nil && !IsNil(o.ItemCategory) {
		return true
	}

	return false
}

// SetItemCategory gets a reference to the given string and assigns it to the ItemCategory field.
func (o *LineItem) SetItemCategory(v string) {
	o.ItemCategory = &v
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *LineItem) GetManufacturer() string {
	if o == nil || IsNil(o.Manufacturer) {
		var ret string
		return ret
	}
	return *o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetManufacturerOk() (*string, bool) {
	if o == nil || IsNil(o.Manufacturer) {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *LineItem) HasManufacturer() bool {
	if o != nil && !IsNil(o.Manufacturer) {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given string and assigns it to the Manufacturer field.
func (o *LineItem) SetManufacturer(v string) {
	o.Manufacturer = &v
}

// GetProductUrl returns the ProductUrl field value if set, zero value otherwise.
func (o *LineItem) GetProductUrl() string {
	if o == nil || IsNil(o.ProductUrl) {
		var ret string
		return ret
	}
	return *o.ProductUrl
}

// GetProductUrlOk returns a tuple with the ProductUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetProductUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ProductUrl) {
		return nil, false
	}
	return o.ProductUrl, true
}

// HasProductUrl returns a boolean if a field has been set.
func (o *LineItem) HasProductUrl() bool {
	if o != nil && !IsNil(o.ProductUrl) {
		return true
	}

	return false
}

// SetProductUrl gets a reference to the given string and assigns it to the ProductUrl field.
func (o *LineItem) SetProductUrl(v string) {
	o.ProductUrl = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *LineItem) GetQuantity() int64 {
	if o == nil || IsNil(o.Quantity) {
		var ret int64
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetQuantityOk() (*int64, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *LineItem) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int64 and assigns it to the Quantity field.
func (o *LineItem) SetQuantity(v int64) {
	o.Quantity = &v
}

// GetReceiverEmail returns the ReceiverEmail field value if set, zero value otherwise.
func (o *LineItem) GetReceiverEmail() string {
	if o == nil || IsNil(o.ReceiverEmail) {
		var ret string
		return ret
	}
	return *o.ReceiverEmail
}

// GetReceiverEmailOk returns a tuple with the ReceiverEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetReceiverEmailOk() (*string, bool) {
	if o == nil || IsNil(o.ReceiverEmail) {
		return nil, false
	}
	return o.ReceiverEmail, true
}

// HasReceiverEmail returns a boolean if a field has been set.
func (o *LineItem) HasReceiverEmail() bool {
	if o != nil && !IsNil(o.ReceiverEmail) {
		return true
	}

	return false
}

// SetReceiverEmail gets a reference to the given string and assigns it to the ReceiverEmail field.
func (o *LineItem) SetReceiverEmail(v string) {
	o.ReceiverEmail = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *LineItem) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *LineItem) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *LineItem) SetSize(v string) {
	o.Size = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *LineItem) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *LineItem) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *LineItem) SetSku(v string) {
	o.Sku = &v
}

// GetTaxAmount returns the TaxAmount field value if set, zero value otherwise.
func (o *LineItem) GetTaxAmount() int64 {
	if o == nil || IsNil(o.TaxAmount) {
		var ret int64
		return ret
	}
	return *o.TaxAmount
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetTaxAmountOk() (*int64, bool) {
	if o == nil || IsNil(o.TaxAmount) {
		return nil, false
	}
	return o.TaxAmount, true
}

// HasTaxAmount returns a boolean if a field has been set.
func (o *LineItem) HasTaxAmount() bool {
	if o != nil && !IsNil(o.TaxAmount) {
		return true
	}

	return false
}

// SetTaxAmount gets a reference to the given int64 and assigns it to the TaxAmount field.
func (o *LineItem) SetTaxAmount(v int64) {
	o.TaxAmount = &v
}

// GetTaxPercentage returns the TaxPercentage field value if set, zero value otherwise.
func (o *LineItem) GetTaxPercentage() int64 {
	if o == nil || IsNil(o.TaxPercentage) {
		var ret int64
		return ret
	}
	return *o.TaxPercentage
}

// GetTaxPercentageOk returns a tuple with the TaxPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetTaxPercentageOk() (*int64, bool) {
	if o == nil || IsNil(o.TaxPercentage) {
		return nil, false
	}
	return o.TaxPercentage, true
}

// HasTaxPercentage returns a boolean if a field has been set.
func (o *LineItem) HasTaxPercentage() bool {
	if o != nil && !IsNil(o.TaxPercentage) {
		return true
	}

	return false
}

// SetTaxPercentage gets a reference to the given int64 and assigns it to the TaxPercentage field.
func (o *LineItem) SetTaxPercentage(v int64) {
	o.TaxPercentage = &v
}

// GetUpc returns the Upc field value if set, zero value otherwise.
func (o *LineItem) GetUpc() string {
	if o == nil || IsNil(o.Upc) {
		var ret string
		return ret
	}
	return *o.Upc
}

// GetUpcOk returns a tuple with the Upc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItem) GetUpcOk() (*string, bool) {
	if o == nil || IsNil(o.Upc) {
		return nil, false
	}
	return o.Upc, true
}

// HasUpc returns a boolean if a field has been set.
func (o *LineItem) HasUpc() bool {
	if o != nil && !IsNil(o.Upc) {
		return true
	}

	return false
}

// SetUpc gets a reference to the given string and assigns it to the Upc field.
func (o *LineItem) SetUpc(v string) {
	o.Upc = &v
}

func (o LineItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LineItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AmountExcludingTax) {
		toSerialize["amountExcludingTax"] = o.AmountExcludingTax
	}
	if !IsNil(o.AmountIncludingTax) {
		toSerialize["amountIncludingTax"] = o.AmountIncludingTax
	}
	if !IsNil(o.Brand) {
		toSerialize["brand"] = o.Brand
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ImageUrl) {
		toSerialize["imageUrl"] = o.ImageUrl
	}
	if !IsNil(o.ItemCategory) {
		toSerialize["itemCategory"] = o.ItemCategory
	}
	if !IsNil(o.Manufacturer) {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	if !IsNil(o.ProductUrl) {
		toSerialize["productUrl"] = o.ProductUrl
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.ReceiverEmail) {
		toSerialize["receiverEmail"] = o.ReceiverEmail
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.TaxAmount) {
		toSerialize["taxAmount"] = o.TaxAmount
	}
	if !IsNil(o.TaxPercentage) {
		toSerialize["taxPercentage"] = o.TaxPercentage
	}
	if !IsNil(o.Upc) {
		toSerialize["upc"] = o.Upc
	}
	return toSerialize, nil
}

type NullableLineItem struct {
	value *LineItem
	isSet bool
}

func (v NullableLineItem) Get() *LineItem {
	return v.value
}

func (v *NullableLineItem) Set(val *LineItem) {
	v.value = val
	v.isSet = true
}

func (v NullableLineItem) IsSet() bool {
	return v.isSet
}

func (v *NullableLineItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineItem(val *LineItem) *NullableLineItem {
	return &NullableLineItem{value: val, isSet: true}
}

func (v NullableLineItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
