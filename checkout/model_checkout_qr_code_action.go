/*
Adyen Checkout API

Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!

API version: 70
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"
)

// checks if the CheckoutQrCodeAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckoutQrCodeAction{}

// CheckoutQrCodeAction struct for CheckoutQrCodeAction
type CheckoutQrCodeAction struct {
	// Expiry time of the QR code.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// A value that must be submitted to the `/payments/details` endpoint to verify this payment.
	PaymentData *string `json:"paymentData,omitempty"`
	// Specifies the payment method.
	PaymentMethodType *string `json:"paymentMethodType,omitempty"`
	// The contents of the QR code as a UTF8 string.
	QrCodeData *string `json:"qrCodeData,omitempty"`
	// **qrCode**
	Type string `json:"type"`
	// Specifies the URL to redirect to.
	Url *string `json:"url,omitempty"`
}

// NewCheckoutQrCodeAction instantiates a new CheckoutQrCodeAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckoutQrCodeAction(type_ string) *CheckoutQrCodeAction {
	this := CheckoutQrCodeAction{}
	this.Type = type_
	return &this
}

// NewCheckoutQrCodeActionWithDefaults instantiates a new CheckoutQrCodeAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckoutQrCodeActionWithDefaults() *CheckoutQrCodeAction {
	this := CheckoutQrCodeAction{}
	return &this
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *CheckoutQrCodeAction) GetExpiresAt() string {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutQrCodeAction) GetExpiresAtOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *CheckoutQrCodeAction) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *CheckoutQrCodeAction) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

// GetPaymentData returns the PaymentData field value if set, zero value otherwise.
func (o *CheckoutQrCodeAction) GetPaymentData() string {
	if o == nil || IsNil(o.PaymentData) {
		var ret string
		return ret
	}
	return *o.PaymentData
}

// GetPaymentDataOk returns a tuple with the PaymentData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutQrCodeAction) GetPaymentDataOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentData) {
		return nil, false
	}
	return o.PaymentData, true
}

// HasPaymentData returns a boolean if a field has been set.
func (o *CheckoutQrCodeAction) HasPaymentData() bool {
	if o != nil && !IsNil(o.PaymentData) {
		return true
	}

	return false
}

// SetPaymentData gets a reference to the given string and assigns it to the PaymentData field.
func (o *CheckoutQrCodeAction) SetPaymentData(v string) {
	o.PaymentData = &v
}

// GetPaymentMethodType returns the PaymentMethodType field value if set, zero value otherwise.
func (o *CheckoutQrCodeAction) GetPaymentMethodType() string {
	if o == nil || IsNil(o.PaymentMethodType) {
		var ret string
		return ret
	}
	return *o.PaymentMethodType
}

// GetPaymentMethodTypeOk returns a tuple with the PaymentMethodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutQrCodeAction) GetPaymentMethodTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentMethodType) {
		return nil, false
	}
	return o.PaymentMethodType, true
}

// HasPaymentMethodType returns a boolean if a field has been set.
func (o *CheckoutQrCodeAction) HasPaymentMethodType() bool {
	if o != nil && !IsNil(o.PaymentMethodType) {
		return true
	}

	return false
}

// SetPaymentMethodType gets a reference to the given string and assigns it to the PaymentMethodType field.
func (o *CheckoutQrCodeAction) SetPaymentMethodType(v string) {
	o.PaymentMethodType = &v
}

// GetQrCodeData returns the QrCodeData field value if set, zero value otherwise.
func (o *CheckoutQrCodeAction) GetQrCodeData() string {
	if o == nil || IsNil(o.QrCodeData) {
		var ret string
		return ret
	}
	return *o.QrCodeData
}

// GetQrCodeDataOk returns a tuple with the QrCodeData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutQrCodeAction) GetQrCodeDataOk() (*string, bool) {
	if o == nil || IsNil(o.QrCodeData) {
		return nil, false
	}
	return o.QrCodeData, true
}

// HasQrCodeData returns a boolean if a field has been set.
func (o *CheckoutQrCodeAction) HasQrCodeData() bool {
	if o != nil && !IsNil(o.QrCodeData) {
		return true
	}

	return false
}

// SetQrCodeData gets a reference to the given string and assigns it to the QrCodeData field.
func (o *CheckoutQrCodeAction) SetQrCodeData(v string) {
	o.QrCodeData = &v
}

// GetType returns the Type field value
func (o *CheckoutQrCodeAction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CheckoutQrCodeAction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CheckoutQrCodeAction) SetType(v string) {
	o.Type = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *CheckoutQrCodeAction) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutQrCodeAction) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *CheckoutQrCodeAction) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *CheckoutQrCodeAction) SetUrl(v string) {
	o.Url = &v
}

func (o CheckoutQrCodeAction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckoutQrCodeAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	if !IsNil(o.PaymentData) {
		toSerialize["paymentData"] = o.PaymentData
	}
	if !IsNil(o.PaymentMethodType) {
		toSerialize["paymentMethodType"] = o.PaymentMethodType
	}
	if !IsNil(o.QrCodeData) {
		toSerialize["qrCodeData"] = o.QrCodeData
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableCheckoutQrCodeAction struct {
	value *CheckoutQrCodeAction
	isSet bool
}

func (v NullableCheckoutQrCodeAction) Get() *CheckoutQrCodeAction {
	return v.value
}

func (v *NullableCheckoutQrCodeAction) Set(val *CheckoutQrCodeAction) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckoutQrCodeAction) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckoutQrCodeAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckoutQrCodeAction(val *CheckoutQrCodeAction) *NullableCheckoutQrCodeAction {
	return &NullableCheckoutQrCodeAction{value: val, isSet: true}
}

func (v NullableCheckoutQrCodeAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckoutQrCodeAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func (o *CheckoutQrCodeAction) isValidType() bool {
	var allowedEnumValues = []string{"qrCode"}
	for _, allowed := range allowedEnumValues {
		if o.GetType() == allowed {
			return true
		}
	}
	return false
}
