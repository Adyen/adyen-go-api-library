/*
Adyen Checkout API

Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!

API version: 70
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"
)

// checks if the PaymentAmountUpdateResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentAmountUpdateResource{}

// PaymentAmountUpdateResource struct for PaymentAmountUpdateResource
type PaymentAmountUpdateResource struct {
	Amount Amount `json:"amount"`
	// The reason for the amount update. Possible values:  * **delayedCharge**  * **noShow**  * **installment**
	IndustryUsage *string `json:"industryUsage,omitempty"`
	// The merchant account that is used to process the payment.
	MerchantAccount string `json:"merchantAccount"`
	// The [`pspReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the payment to update.
	PaymentPspReference string `json:"paymentPspReference"`
	// Adyen's 16-character reference associated with the amount update request.
	PspReference string `json:"pspReference"`
	// Your reference for the amount update request. Maximum length: 80 characters.
	Reference string `json:"reference"`
	// An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For details, refer to [Providing split information](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information).
	Splits []Split `json:"splits,omitempty"`
	// The status of your request. This will always have the value **received**.
	Status string `json:"status"`
}

// NewPaymentAmountUpdateResource instantiates a new PaymentAmountUpdateResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentAmountUpdateResource(amount Amount, merchantAccount string, paymentPspReference string, pspReference string, reference string, status string) *PaymentAmountUpdateResource {
	this := PaymentAmountUpdateResource{}
	this.Amount = amount
	this.MerchantAccount = merchantAccount
	this.PaymentPspReference = paymentPspReference
	this.PspReference = pspReference
	this.Reference = reference
	this.Status = status
	return &this
}

// NewPaymentAmountUpdateResourceWithDefaults instantiates a new PaymentAmountUpdateResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentAmountUpdateResourceWithDefaults() *PaymentAmountUpdateResource {
	this := PaymentAmountUpdateResource{}
	return &this
}

// GetAmount returns the Amount field value
func (o *PaymentAmountUpdateResource) GetAmount() Amount {
	if o == nil {
		var ret Amount
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PaymentAmountUpdateResource) GetAmountOk() (*Amount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PaymentAmountUpdateResource) SetAmount(v Amount) {
	o.Amount = v
}

// GetIndustryUsage returns the IndustryUsage field value if set, zero value otherwise.
func (o *PaymentAmountUpdateResource) GetIndustryUsage() string {
	if o == nil || IsNil(o.IndustryUsage) {
		var ret string
		return ret
	}
	return *o.IndustryUsage
}

// GetIndustryUsageOk returns a tuple with the IndustryUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentAmountUpdateResource) GetIndustryUsageOk() (*string, bool) {
	if o == nil || IsNil(o.IndustryUsage) {
		return nil, false
	}
	return o.IndustryUsage, true
}

// HasIndustryUsage returns a boolean if a field has been set.
func (o *PaymentAmountUpdateResource) HasIndustryUsage() bool {
	if o != nil && !IsNil(o.IndustryUsage) {
		return true
	}

	return false
}

// SetIndustryUsage gets a reference to the given string and assigns it to the IndustryUsage field.
func (o *PaymentAmountUpdateResource) SetIndustryUsage(v string) {
	o.IndustryUsage = &v
}

// GetMerchantAccount returns the MerchantAccount field value
func (o *PaymentAmountUpdateResource) GetMerchantAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantAccount
}

// GetMerchantAccountOk returns a tuple with the MerchantAccount field value
// and a boolean to check if the value has been set.
func (o *PaymentAmountUpdateResource) GetMerchantAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantAccount, true
}

// SetMerchantAccount sets field value
func (o *PaymentAmountUpdateResource) SetMerchantAccount(v string) {
	o.MerchantAccount = v
}

// GetPaymentPspReference returns the PaymentPspReference field value
func (o *PaymentAmountUpdateResource) GetPaymentPspReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentPspReference
}

// GetPaymentPspReferenceOk returns a tuple with the PaymentPspReference field value
// and a boolean to check if the value has been set.
func (o *PaymentAmountUpdateResource) GetPaymentPspReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentPspReference, true
}

// SetPaymentPspReference sets field value
func (o *PaymentAmountUpdateResource) SetPaymentPspReference(v string) {
	o.PaymentPspReference = v
}

// GetPspReference returns the PspReference field value
func (o *PaymentAmountUpdateResource) GetPspReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PspReference
}

// GetPspReferenceOk returns a tuple with the PspReference field value
// and a boolean to check if the value has been set.
func (o *PaymentAmountUpdateResource) GetPspReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PspReference, true
}

// SetPspReference sets field value
func (o *PaymentAmountUpdateResource) SetPspReference(v string) {
	o.PspReference = v
}

// GetReference returns the Reference field value
func (o *PaymentAmountUpdateResource) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *PaymentAmountUpdateResource) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *PaymentAmountUpdateResource) SetReference(v string) {
	o.Reference = v
}

// GetSplits returns the Splits field value if set, zero value otherwise.
func (o *PaymentAmountUpdateResource) GetSplits() []Split {
	if o == nil || IsNil(o.Splits) {
		var ret []Split
		return ret
	}
	return o.Splits
}

// GetSplitsOk returns a tuple with the Splits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentAmountUpdateResource) GetSplitsOk() ([]Split, bool) {
	if o == nil || IsNil(o.Splits) {
		return nil, false
	}
	return o.Splits, true
}

// HasSplits returns a boolean if a field has been set.
func (o *PaymentAmountUpdateResource) HasSplits() bool {
	if o != nil && !IsNil(o.Splits) {
		return true
	}

	return false
}

// SetSplits gets a reference to the given []Split and assigns it to the Splits field.
func (o *PaymentAmountUpdateResource) SetSplits(v []Split) {
	o.Splits = v
}

// GetStatus returns the Status field value
func (o *PaymentAmountUpdateResource) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PaymentAmountUpdateResource) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PaymentAmountUpdateResource) SetStatus(v string) {
	o.Status = v
}

func (o PaymentAmountUpdateResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentAmountUpdateResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.IndustryUsage) {
		toSerialize["industryUsage"] = o.IndustryUsage
	}
	toSerialize["merchantAccount"] = o.MerchantAccount
	toSerialize["paymentPspReference"] = o.PaymentPspReference
	toSerialize["pspReference"] = o.PspReference
	toSerialize["reference"] = o.Reference
	if !IsNil(o.Splits) {
		toSerialize["splits"] = o.Splits
	}
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

type NullablePaymentAmountUpdateResource struct {
	value *PaymentAmountUpdateResource
	isSet bool
}

func (v NullablePaymentAmountUpdateResource) Get() *PaymentAmountUpdateResource {
	return v.value
}

func (v *NullablePaymentAmountUpdateResource) Set(val *PaymentAmountUpdateResource) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentAmountUpdateResource) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentAmountUpdateResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentAmountUpdateResource(val *PaymentAmountUpdateResource) *NullablePaymentAmountUpdateResource {
	return &NullablePaymentAmountUpdateResource{value: val, isSet: true}
}

func (v NullablePaymentAmountUpdateResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentAmountUpdateResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func (o *PaymentAmountUpdateResource) isValidIndustryUsage() bool {
	var allowedEnumValues = []string{"delayedCharge", "installment", "noShow"}
	for _, allowed := range allowedEnumValues {
		if o.GetIndustryUsage() == allowed {
			return true
		}
	}
	return false
}
func (o *PaymentAmountUpdateResource) isValidStatus() bool {
	var allowedEnumValues = []string{"received"}
	for _, allowed := range allowedEnumValues {
		if o.GetStatus() == allowed {
			return true
		}
	}
	return false
}
