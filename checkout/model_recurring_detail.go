/*
Adyen Checkout API

Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!

API version: 70
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"
)

// checks if the RecurringDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecurringDetail{}

// RecurringDetail struct for RecurringDetail
type RecurringDetail struct {
	// Brand for the selected gift card. For example: plastix, hmclub.
	Brand *string `json:"brand,omitempty"`
	// List of possible brands. For example: visa, mc.
	Brands []string `json:"brands,omitempty"`
	// The configuration of the payment method.
	Configuration *map[string]string `json:"configuration,omitempty"`
	// The funding source of the payment method.
	FundingSource *string             `json:"fundingSource,omitempty"`
	Group         *PaymentMethodGroup `json:"group,omitempty"`
	// All input details to be provided to complete the payment with this payment method.
	// Deprecated
	InputDetails []InputDetail `json:"inputDetails,omitempty"`
	// A list of issuers for this payment method.
	Issuers []PaymentMethodIssuer `json:"issuers,omitempty"`
	// The displayable name of this payment method.
	Name *string `json:"name,omitempty"`
	// The reference that uniquely identifies the recurring detail.
	RecurringDetailReference *string        `json:"recurringDetailReference,omitempty"`
	StoredDetails            *StoredDetails `json:"storedDetails,omitempty"`
	// The unique payment method code.
	Type *string `json:"type,omitempty"`
}

// NewRecurringDetail instantiates a new RecurringDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurringDetail() *RecurringDetail {
	this := RecurringDetail{}
	return &this
}

// NewRecurringDetailWithDefaults instantiates a new RecurringDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurringDetailWithDefaults() *RecurringDetail {
	this := RecurringDetail{}
	return &this
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *RecurringDetail) GetBrand() string {
	if o == nil || IsNil(o.Brand) {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringDetail) GetBrandOk() (*string, bool) {
	if o == nil || IsNil(o.Brand) {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *RecurringDetail) HasBrand() bool {
	if o != nil && !IsNil(o.Brand) {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *RecurringDetail) SetBrand(v string) {
	o.Brand = &v
}

// GetBrands returns the Brands field value if set, zero value otherwise.
func (o *RecurringDetail) GetBrands() []string {
	if o == nil || IsNil(o.Brands) {
		var ret []string
		return ret
	}
	return o.Brands
}

// GetBrandsOk returns a tuple with the Brands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringDetail) GetBrandsOk() ([]string, bool) {
	if o == nil || IsNil(o.Brands) {
		return nil, false
	}
	return o.Brands, true
}

// HasBrands returns a boolean if a field has been set.
func (o *RecurringDetail) HasBrands() bool {
	if o != nil && !IsNil(o.Brands) {
		return true
	}

	return false
}

// SetBrands gets a reference to the given []string and assigns it to the Brands field.
func (o *RecurringDetail) SetBrands(v []string) {
	o.Brands = v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *RecurringDetail) GetConfiguration() map[string]string {
	if o == nil || IsNil(o.Configuration) {
		var ret map[string]string
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringDetail) GetConfigurationOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *RecurringDetail) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]string and assigns it to the Configuration field.
func (o *RecurringDetail) SetConfiguration(v map[string]string) {
	o.Configuration = &v
}

// GetFundingSource returns the FundingSource field value if set, zero value otherwise.
func (o *RecurringDetail) GetFundingSource() string {
	if o == nil || IsNil(o.FundingSource) {
		var ret string
		return ret
	}
	return *o.FundingSource
}

// GetFundingSourceOk returns a tuple with the FundingSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringDetail) GetFundingSourceOk() (*string, bool) {
	if o == nil || IsNil(o.FundingSource) {
		return nil, false
	}
	return o.FundingSource, true
}

// HasFundingSource returns a boolean if a field has been set.
func (o *RecurringDetail) HasFundingSource() bool {
	if o != nil && !IsNil(o.FundingSource) {
		return true
	}

	return false
}

// SetFundingSource gets a reference to the given string and assigns it to the FundingSource field.
func (o *RecurringDetail) SetFundingSource(v string) {
	o.FundingSource = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *RecurringDetail) GetGroup() PaymentMethodGroup {
	if o == nil || IsNil(o.Group) {
		var ret PaymentMethodGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringDetail) GetGroupOk() (*PaymentMethodGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *RecurringDetail) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given PaymentMethodGroup and assigns it to the Group field.
func (o *RecurringDetail) SetGroup(v PaymentMethodGroup) {
	o.Group = &v
}

// GetInputDetails returns the InputDetails field value if set, zero value otherwise.
// Deprecated
func (o *RecurringDetail) GetInputDetails() []InputDetail {
	if o == nil || IsNil(o.InputDetails) {
		var ret []InputDetail
		return ret
	}
	return o.InputDetails
}

// GetInputDetailsOk returns a tuple with the InputDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RecurringDetail) GetInputDetailsOk() ([]InputDetail, bool) {
	if o == nil || IsNil(o.InputDetails) {
		return nil, false
	}
	return o.InputDetails, true
}

// HasInputDetails returns a boolean if a field has been set.
func (o *RecurringDetail) HasInputDetails() bool {
	if o != nil && !IsNil(o.InputDetails) {
		return true
	}

	return false
}

// SetInputDetails gets a reference to the given []InputDetail and assigns it to the InputDetails field.
// Deprecated
func (o *RecurringDetail) SetInputDetails(v []InputDetail) {
	o.InputDetails = v
}

// GetIssuers returns the Issuers field value if set, zero value otherwise.
func (o *RecurringDetail) GetIssuers() []PaymentMethodIssuer {
	if o == nil || IsNil(o.Issuers) {
		var ret []PaymentMethodIssuer
		return ret
	}
	return o.Issuers
}

// GetIssuersOk returns a tuple with the Issuers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringDetail) GetIssuersOk() ([]PaymentMethodIssuer, bool) {
	if o == nil || IsNil(o.Issuers) {
		return nil, false
	}
	return o.Issuers, true
}

// HasIssuers returns a boolean if a field has been set.
func (o *RecurringDetail) HasIssuers() bool {
	if o != nil && !IsNil(o.Issuers) {
		return true
	}

	return false
}

// SetIssuers gets a reference to the given []PaymentMethodIssuer and assigns it to the Issuers field.
func (o *RecurringDetail) SetIssuers(v []PaymentMethodIssuer) {
	o.Issuers = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecurringDetail) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringDetail) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecurringDetail) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecurringDetail) SetName(v string) {
	o.Name = &v
}

// GetRecurringDetailReference returns the RecurringDetailReference field value if set, zero value otherwise.
func (o *RecurringDetail) GetRecurringDetailReference() string {
	if o == nil || IsNil(o.RecurringDetailReference) {
		var ret string
		return ret
	}
	return *o.RecurringDetailReference
}

// GetRecurringDetailReferenceOk returns a tuple with the RecurringDetailReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringDetail) GetRecurringDetailReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.RecurringDetailReference) {
		return nil, false
	}
	return o.RecurringDetailReference, true
}

// HasRecurringDetailReference returns a boolean if a field has been set.
func (o *RecurringDetail) HasRecurringDetailReference() bool {
	if o != nil && !IsNil(o.RecurringDetailReference) {
		return true
	}

	return false
}

// SetRecurringDetailReference gets a reference to the given string and assigns it to the RecurringDetailReference field.
func (o *RecurringDetail) SetRecurringDetailReference(v string) {
	o.RecurringDetailReference = &v
}

// GetStoredDetails returns the StoredDetails field value if set, zero value otherwise.
func (o *RecurringDetail) GetStoredDetails() StoredDetails {
	if o == nil || IsNil(o.StoredDetails) {
		var ret StoredDetails
		return ret
	}
	return *o.StoredDetails
}

// GetStoredDetailsOk returns a tuple with the StoredDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringDetail) GetStoredDetailsOk() (*StoredDetails, bool) {
	if o == nil || IsNil(o.StoredDetails) {
		return nil, false
	}
	return o.StoredDetails, true
}

// HasStoredDetails returns a boolean if a field has been set.
func (o *RecurringDetail) HasStoredDetails() bool {
	if o != nil && !IsNil(o.StoredDetails) {
		return true
	}

	return false
}

// SetStoredDetails gets a reference to the given StoredDetails and assigns it to the StoredDetails field.
func (o *RecurringDetail) SetStoredDetails(v StoredDetails) {
	o.StoredDetails = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RecurringDetail) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringDetail) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RecurringDetail) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RecurringDetail) SetType(v string) {
	o.Type = &v
}

func (o RecurringDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecurringDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Brand) {
		toSerialize["brand"] = o.Brand
	}
	if !IsNil(o.Brands) {
		toSerialize["brands"] = o.Brands
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !IsNil(o.FundingSource) {
		toSerialize["fundingSource"] = o.FundingSource
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.InputDetails) {
		toSerialize["inputDetails"] = o.InputDetails
	}
	if !IsNil(o.Issuers) {
		toSerialize["issuers"] = o.Issuers
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RecurringDetailReference) {
		toSerialize["recurringDetailReference"] = o.RecurringDetailReference
	}
	if !IsNil(o.StoredDetails) {
		toSerialize["storedDetails"] = o.StoredDetails
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRecurringDetail struct {
	value *RecurringDetail
	isSet bool
}

func (v NullableRecurringDetail) Get() *RecurringDetail {
	return v.value
}

func (v *NullableRecurringDetail) Set(val *RecurringDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurringDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurringDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurringDetail(val *RecurringDetail) *NullableRecurringDetail {
	return &NullableRecurringDetail{value: val, isSet: true}
}

func (v NullableRecurringDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurringDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func (o *RecurringDetail) isValidFundingSource() bool {
	var allowedEnumValues = []string{"debit"}
	for _, allowed := range allowedEnumValues {
		if o.GetFundingSource() == allowed {
			return true
		}
	}
	return false
}
