/*
Adyen Checkout API

Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!

API version: 70
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"
)

// checks if the AdditionalDataRatepay type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdditionalDataRatepay{}

// AdditionalDataRatepay struct for AdditionalDataRatepay
type AdditionalDataRatepay struct {
	// Amount the customer has to pay each month.
	RatepayInstallmentAmount *string `json:"ratepay.installmentAmount,omitempty"`
	// Interest rate of this installment.
	RatepayInterestRate *string `json:"ratepay.interestRate,omitempty"`
	// Amount of the last installment.
	RatepayLastInstallmentAmount *string `json:"ratepay.lastInstallmentAmount,omitempty"`
	// Calendar day of the first payment.
	RatepayPaymentFirstday *string `json:"ratepay.paymentFirstday,omitempty"`
	// Date the merchant delivered the goods to the customer.
	RatepaydataDeliveryDate *string `json:"ratepaydata.deliveryDate,omitempty"`
	// Date by which the customer must settle the payment.
	RatepaydataDueDate *string `json:"ratepaydata.dueDate,omitempty"`
	// Invoice date, defined by the merchant. If not included, the invoice date is set to the delivery date.
	RatepaydataInvoiceDate *string `json:"ratepaydata.invoiceDate,omitempty"`
	// Identification name or number for the invoice, defined by the merchant.
	RatepaydataInvoiceId *string `json:"ratepaydata.invoiceId,omitempty"`
}

// NewAdditionalDataRatepay instantiates a new AdditionalDataRatepay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdditionalDataRatepay() *AdditionalDataRatepay {
	this := AdditionalDataRatepay{}
	return &this
}

// NewAdditionalDataRatepayWithDefaults instantiates a new AdditionalDataRatepay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdditionalDataRatepayWithDefaults() *AdditionalDataRatepay {
	this := AdditionalDataRatepay{}
	return &this
}

// GetRatepayInstallmentAmount returns the RatepayInstallmentAmount field value if set, zero value otherwise.
func (o *AdditionalDataRatepay) GetRatepayInstallmentAmount() string {
	if o == nil || IsNil(o.RatepayInstallmentAmount) {
		var ret string
		return ret
	}
	return *o.RatepayInstallmentAmount
}

// GetRatepayInstallmentAmountOk returns a tuple with the RatepayInstallmentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataRatepay) GetRatepayInstallmentAmountOk() (*string, bool) {
	if o == nil || IsNil(o.RatepayInstallmentAmount) {
		return nil, false
	}
	return o.RatepayInstallmentAmount, true
}

// HasRatepayInstallmentAmount returns a boolean if a field has been set.
func (o *AdditionalDataRatepay) HasRatepayInstallmentAmount() bool {
	if o != nil && !IsNil(o.RatepayInstallmentAmount) {
		return true
	}

	return false
}

// SetRatepayInstallmentAmount gets a reference to the given string and assigns it to the RatepayInstallmentAmount field.
func (o *AdditionalDataRatepay) SetRatepayInstallmentAmount(v string) {
	o.RatepayInstallmentAmount = &v
}

// GetRatepayInterestRate returns the RatepayInterestRate field value if set, zero value otherwise.
func (o *AdditionalDataRatepay) GetRatepayInterestRate() string {
	if o == nil || IsNil(o.RatepayInterestRate) {
		var ret string
		return ret
	}
	return *o.RatepayInterestRate
}

// GetRatepayInterestRateOk returns a tuple with the RatepayInterestRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataRatepay) GetRatepayInterestRateOk() (*string, bool) {
	if o == nil || IsNil(o.RatepayInterestRate) {
		return nil, false
	}
	return o.RatepayInterestRate, true
}

// HasRatepayInterestRate returns a boolean if a field has been set.
func (o *AdditionalDataRatepay) HasRatepayInterestRate() bool {
	if o != nil && !IsNil(o.RatepayInterestRate) {
		return true
	}

	return false
}

// SetRatepayInterestRate gets a reference to the given string and assigns it to the RatepayInterestRate field.
func (o *AdditionalDataRatepay) SetRatepayInterestRate(v string) {
	o.RatepayInterestRate = &v
}

// GetRatepayLastInstallmentAmount returns the RatepayLastInstallmentAmount field value if set, zero value otherwise.
func (o *AdditionalDataRatepay) GetRatepayLastInstallmentAmount() string {
	if o == nil || IsNil(o.RatepayLastInstallmentAmount) {
		var ret string
		return ret
	}
	return *o.RatepayLastInstallmentAmount
}

// GetRatepayLastInstallmentAmountOk returns a tuple with the RatepayLastInstallmentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataRatepay) GetRatepayLastInstallmentAmountOk() (*string, bool) {
	if o == nil || IsNil(o.RatepayLastInstallmentAmount) {
		return nil, false
	}
	return o.RatepayLastInstallmentAmount, true
}

// HasRatepayLastInstallmentAmount returns a boolean if a field has been set.
func (o *AdditionalDataRatepay) HasRatepayLastInstallmentAmount() bool {
	if o != nil && !IsNil(o.RatepayLastInstallmentAmount) {
		return true
	}

	return false
}

// SetRatepayLastInstallmentAmount gets a reference to the given string and assigns it to the RatepayLastInstallmentAmount field.
func (o *AdditionalDataRatepay) SetRatepayLastInstallmentAmount(v string) {
	o.RatepayLastInstallmentAmount = &v
}

// GetRatepayPaymentFirstday returns the RatepayPaymentFirstday field value if set, zero value otherwise.
func (o *AdditionalDataRatepay) GetRatepayPaymentFirstday() string {
	if o == nil || IsNil(o.RatepayPaymentFirstday) {
		var ret string
		return ret
	}
	return *o.RatepayPaymentFirstday
}

// GetRatepayPaymentFirstdayOk returns a tuple with the RatepayPaymentFirstday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataRatepay) GetRatepayPaymentFirstdayOk() (*string, bool) {
	if o == nil || IsNil(o.RatepayPaymentFirstday) {
		return nil, false
	}
	return o.RatepayPaymentFirstday, true
}

// HasRatepayPaymentFirstday returns a boolean if a field has been set.
func (o *AdditionalDataRatepay) HasRatepayPaymentFirstday() bool {
	if o != nil && !IsNil(o.RatepayPaymentFirstday) {
		return true
	}

	return false
}

// SetRatepayPaymentFirstday gets a reference to the given string and assigns it to the RatepayPaymentFirstday field.
func (o *AdditionalDataRatepay) SetRatepayPaymentFirstday(v string) {
	o.RatepayPaymentFirstday = &v
}

// GetRatepaydataDeliveryDate returns the RatepaydataDeliveryDate field value if set, zero value otherwise.
func (o *AdditionalDataRatepay) GetRatepaydataDeliveryDate() string {
	if o == nil || IsNil(o.RatepaydataDeliveryDate) {
		var ret string
		return ret
	}
	return *o.RatepaydataDeliveryDate
}

// GetRatepaydataDeliveryDateOk returns a tuple with the RatepaydataDeliveryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataRatepay) GetRatepaydataDeliveryDateOk() (*string, bool) {
	if o == nil || IsNil(o.RatepaydataDeliveryDate) {
		return nil, false
	}
	return o.RatepaydataDeliveryDate, true
}

// HasRatepaydataDeliveryDate returns a boolean if a field has been set.
func (o *AdditionalDataRatepay) HasRatepaydataDeliveryDate() bool {
	if o != nil && !IsNil(o.RatepaydataDeliveryDate) {
		return true
	}

	return false
}

// SetRatepaydataDeliveryDate gets a reference to the given string and assigns it to the RatepaydataDeliveryDate field.
func (o *AdditionalDataRatepay) SetRatepaydataDeliveryDate(v string) {
	o.RatepaydataDeliveryDate = &v
}

// GetRatepaydataDueDate returns the RatepaydataDueDate field value if set, zero value otherwise.
func (o *AdditionalDataRatepay) GetRatepaydataDueDate() string {
	if o == nil || IsNil(o.RatepaydataDueDate) {
		var ret string
		return ret
	}
	return *o.RatepaydataDueDate
}

// GetRatepaydataDueDateOk returns a tuple with the RatepaydataDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataRatepay) GetRatepaydataDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.RatepaydataDueDate) {
		return nil, false
	}
	return o.RatepaydataDueDate, true
}

// HasRatepaydataDueDate returns a boolean if a field has been set.
func (o *AdditionalDataRatepay) HasRatepaydataDueDate() bool {
	if o != nil && !IsNil(o.RatepaydataDueDate) {
		return true
	}

	return false
}

// SetRatepaydataDueDate gets a reference to the given string and assigns it to the RatepaydataDueDate field.
func (o *AdditionalDataRatepay) SetRatepaydataDueDate(v string) {
	o.RatepaydataDueDate = &v
}

// GetRatepaydataInvoiceDate returns the RatepaydataInvoiceDate field value if set, zero value otherwise.
func (o *AdditionalDataRatepay) GetRatepaydataInvoiceDate() string {
	if o == nil || IsNil(o.RatepaydataInvoiceDate) {
		var ret string
		return ret
	}
	return *o.RatepaydataInvoiceDate
}

// GetRatepaydataInvoiceDateOk returns a tuple with the RatepaydataInvoiceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataRatepay) GetRatepaydataInvoiceDateOk() (*string, bool) {
	if o == nil || IsNil(o.RatepaydataInvoiceDate) {
		return nil, false
	}
	return o.RatepaydataInvoiceDate, true
}

// HasRatepaydataInvoiceDate returns a boolean if a field has been set.
func (o *AdditionalDataRatepay) HasRatepaydataInvoiceDate() bool {
	if o != nil && !IsNil(o.RatepaydataInvoiceDate) {
		return true
	}

	return false
}

// SetRatepaydataInvoiceDate gets a reference to the given string and assigns it to the RatepaydataInvoiceDate field.
func (o *AdditionalDataRatepay) SetRatepaydataInvoiceDate(v string) {
	o.RatepaydataInvoiceDate = &v
}

// GetRatepaydataInvoiceId returns the RatepaydataInvoiceId field value if set, zero value otherwise.
func (o *AdditionalDataRatepay) GetRatepaydataInvoiceId() string {
	if o == nil || IsNil(o.RatepaydataInvoiceId) {
		var ret string
		return ret
	}
	return *o.RatepaydataInvoiceId
}

// GetRatepaydataInvoiceIdOk returns a tuple with the RatepaydataInvoiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataRatepay) GetRatepaydataInvoiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.RatepaydataInvoiceId) {
		return nil, false
	}
	return o.RatepaydataInvoiceId, true
}

// HasRatepaydataInvoiceId returns a boolean if a field has been set.
func (o *AdditionalDataRatepay) HasRatepaydataInvoiceId() bool {
	if o != nil && !IsNil(o.RatepaydataInvoiceId) {
		return true
	}

	return false
}

// SetRatepaydataInvoiceId gets a reference to the given string and assigns it to the RatepaydataInvoiceId field.
func (o *AdditionalDataRatepay) SetRatepaydataInvoiceId(v string) {
	o.RatepaydataInvoiceId = &v
}

func (o AdditionalDataRatepay) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdditionalDataRatepay) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RatepayInstallmentAmount) {
		toSerialize["ratepay.installmentAmount"] = o.RatepayInstallmentAmount
	}
	if !IsNil(o.RatepayInterestRate) {
		toSerialize["ratepay.interestRate"] = o.RatepayInterestRate
	}
	if !IsNil(o.RatepayLastInstallmentAmount) {
		toSerialize["ratepay.lastInstallmentAmount"] = o.RatepayLastInstallmentAmount
	}
	if !IsNil(o.RatepayPaymentFirstday) {
		toSerialize["ratepay.paymentFirstday"] = o.RatepayPaymentFirstday
	}
	if !IsNil(o.RatepaydataDeliveryDate) {
		toSerialize["ratepaydata.deliveryDate"] = o.RatepaydataDeliveryDate
	}
	if !IsNil(o.RatepaydataDueDate) {
		toSerialize["ratepaydata.dueDate"] = o.RatepaydataDueDate
	}
	if !IsNil(o.RatepaydataInvoiceDate) {
		toSerialize["ratepaydata.invoiceDate"] = o.RatepaydataInvoiceDate
	}
	if !IsNil(o.RatepaydataInvoiceId) {
		toSerialize["ratepaydata.invoiceId"] = o.RatepaydataInvoiceId
	}
	return toSerialize, nil
}

type NullableAdditionalDataRatepay struct {
	value *AdditionalDataRatepay
	isSet bool
}

func (v NullableAdditionalDataRatepay) Get() *AdditionalDataRatepay {
	return v.value
}

func (v *NullableAdditionalDataRatepay) Set(val *AdditionalDataRatepay) {
	v.value = val
	v.isSet = true
}

func (v NullableAdditionalDataRatepay) IsSet() bool {
	return v.isSet
}

func (v *NullableAdditionalDataRatepay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdditionalDataRatepay(val *AdditionalDataRatepay) *NullableAdditionalDataRatepay {
	return &NullableAdditionalDataRatepay{value: val, isSet: true}
}

func (v NullableAdditionalDataRatepay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdditionalDataRatepay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
