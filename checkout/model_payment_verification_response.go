/*
Adyen Checkout API

Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!

API version: 70
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"
)

// checks if the PaymentVerificationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentVerificationResponse{}

// PaymentVerificationResponse struct for PaymentVerificationResponse
type PaymentVerificationResponse struct {
	// Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** > **Developers** > **Additional data**.
	AdditionalData *map[string]string `json:"additionalData,omitempty"`
	FraudResult    *FraudResult       `json:"fraudResult,omitempty"`
	// A unique value that you provided in the initial `/paymentSession` request as a `reference` field.
	MerchantReference string                 `json:"merchantReference"`
	Order             *CheckoutOrderResponse `json:"order,omitempty"`
	// Adyen's 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.
	PspReference *string `json:"pspReference,omitempty"`
	// If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).
	RefusalReason *string `json:"refusalReason,omitempty"`
	// Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).
	RefusalReasonCode *string `json:"refusalReasonCode,omitempty"`
	// The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions. * **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state. * **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.
	ResultCode   *string        `json:"resultCode,omitempty"`
	ServiceError *ServiceError2 `json:"serviceError,omitempty"`
	// The shopperLocale value provided in the payment request.
	ShopperLocale string `json:"shopperLocale"`
}

// NewPaymentVerificationResponse instantiates a new PaymentVerificationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentVerificationResponse(merchantReference string, shopperLocale string) *PaymentVerificationResponse {
	this := PaymentVerificationResponse{}
	this.MerchantReference = merchantReference
	this.ShopperLocale = shopperLocale
	return &this
}

// NewPaymentVerificationResponseWithDefaults instantiates a new PaymentVerificationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentVerificationResponseWithDefaults() *PaymentVerificationResponse {
	this := PaymentVerificationResponse{}
	return &this
}

// GetAdditionalData returns the AdditionalData field value if set, zero value otherwise.
func (o *PaymentVerificationResponse) GetAdditionalData() map[string]string {
	if o == nil || IsNil(o.AdditionalData) {
		var ret map[string]string
		return ret
	}
	return *o.AdditionalData
}

// GetAdditionalDataOk returns a tuple with the AdditionalData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentVerificationResponse) GetAdditionalDataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.AdditionalData) {
		return nil, false
	}
	return o.AdditionalData, true
}

// HasAdditionalData returns a boolean if a field has been set.
func (o *PaymentVerificationResponse) HasAdditionalData() bool {
	if o != nil && !IsNil(o.AdditionalData) {
		return true
	}

	return false
}

// SetAdditionalData gets a reference to the given map[string]string and assigns it to the AdditionalData field.
func (o *PaymentVerificationResponse) SetAdditionalData(v map[string]string) {
	o.AdditionalData = &v
}

// GetFraudResult returns the FraudResult field value if set, zero value otherwise.
func (o *PaymentVerificationResponse) GetFraudResult() FraudResult {
	if o == nil || IsNil(o.FraudResult) {
		var ret FraudResult
		return ret
	}
	return *o.FraudResult
}

// GetFraudResultOk returns a tuple with the FraudResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentVerificationResponse) GetFraudResultOk() (*FraudResult, bool) {
	if o == nil || IsNil(o.FraudResult) {
		return nil, false
	}
	return o.FraudResult, true
}

// HasFraudResult returns a boolean if a field has been set.
func (o *PaymentVerificationResponse) HasFraudResult() bool {
	if o != nil && !IsNil(o.FraudResult) {
		return true
	}

	return false
}

// SetFraudResult gets a reference to the given FraudResult and assigns it to the FraudResult field.
func (o *PaymentVerificationResponse) SetFraudResult(v FraudResult) {
	o.FraudResult = &v
}

// GetMerchantReference returns the MerchantReference field value
func (o *PaymentVerificationResponse) GetMerchantReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantReference
}

// GetMerchantReferenceOk returns a tuple with the MerchantReference field value
// and a boolean to check if the value has been set.
func (o *PaymentVerificationResponse) GetMerchantReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantReference, true
}

// SetMerchantReference sets field value
func (o *PaymentVerificationResponse) SetMerchantReference(v string) {
	o.MerchantReference = v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *PaymentVerificationResponse) GetOrder() CheckoutOrderResponse {
	if o == nil || IsNil(o.Order) {
		var ret CheckoutOrderResponse
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentVerificationResponse) GetOrderOk() (*CheckoutOrderResponse, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *PaymentVerificationResponse) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given CheckoutOrderResponse and assigns it to the Order field.
func (o *PaymentVerificationResponse) SetOrder(v CheckoutOrderResponse) {
	o.Order = &v
}

// GetPspReference returns the PspReference field value if set, zero value otherwise.
func (o *PaymentVerificationResponse) GetPspReference() string {
	if o == nil || IsNil(o.PspReference) {
		var ret string
		return ret
	}
	return *o.PspReference
}

// GetPspReferenceOk returns a tuple with the PspReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentVerificationResponse) GetPspReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.PspReference) {
		return nil, false
	}
	return o.PspReference, true
}

// HasPspReference returns a boolean if a field has been set.
func (o *PaymentVerificationResponse) HasPspReference() bool {
	if o != nil && !IsNil(o.PspReference) {
		return true
	}

	return false
}

// SetPspReference gets a reference to the given string and assigns it to the PspReference field.
func (o *PaymentVerificationResponse) SetPspReference(v string) {
	o.PspReference = &v
}

// GetRefusalReason returns the RefusalReason field value if set, zero value otherwise.
func (o *PaymentVerificationResponse) GetRefusalReason() string {
	if o == nil || IsNil(o.RefusalReason) {
		var ret string
		return ret
	}
	return *o.RefusalReason
}

// GetRefusalReasonOk returns a tuple with the RefusalReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentVerificationResponse) GetRefusalReasonOk() (*string, bool) {
	if o == nil || IsNil(o.RefusalReason) {
		return nil, false
	}
	return o.RefusalReason, true
}

// HasRefusalReason returns a boolean if a field has been set.
func (o *PaymentVerificationResponse) HasRefusalReason() bool {
	if o != nil && !IsNil(o.RefusalReason) {
		return true
	}

	return false
}

// SetRefusalReason gets a reference to the given string and assigns it to the RefusalReason field.
func (o *PaymentVerificationResponse) SetRefusalReason(v string) {
	o.RefusalReason = &v
}

// GetRefusalReasonCode returns the RefusalReasonCode field value if set, zero value otherwise.
func (o *PaymentVerificationResponse) GetRefusalReasonCode() string {
	if o == nil || IsNil(o.RefusalReasonCode) {
		var ret string
		return ret
	}
	return *o.RefusalReasonCode
}

// GetRefusalReasonCodeOk returns a tuple with the RefusalReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentVerificationResponse) GetRefusalReasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RefusalReasonCode) {
		return nil, false
	}
	return o.RefusalReasonCode, true
}

// HasRefusalReasonCode returns a boolean if a field has been set.
func (o *PaymentVerificationResponse) HasRefusalReasonCode() bool {
	if o != nil && !IsNil(o.RefusalReasonCode) {
		return true
	}

	return false
}

// SetRefusalReasonCode gets a reference to the given string and assigns it to the RefusalReasonCode field.
func (o *PaymentVerificationResponse) SetRefusalReasonCode(v string) {
	o.RefusalReasonCode = &v
}

// GetResultCode returns the ResultCode field value if set, zero value otherwise.
func (o *PaymentVerificationResponse) GetResultCode() string {
	if o == nil || IsNil(o.ResultCode) {
		var ret string
		return ret
	}
	return *o.ResultCode
}

// GetResultCodeOk returns a tuple with the ResultCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentVerificationResponse) GetResultCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ResultCode) {
		return nil, false
	}
	return o.ResultCode, true
}

// HasResultCode returns a boolean if a field has been set.
func (o *PaymentVerificationResponse) HasResultCode() bool {
	if o != nil && !IsNil(o.ResultCode) {
		return true
	}

	return false
}

// SetResultCode gets a reference to the given string and assigns it to the ResultCode field.
func (o *PaymentVerificationResponse) SetResultCode(v string) {
	o.ResultCode = &v
}

// GetServiceError returns the ServiceError field value if set, zero value otherwise.
func (o *PaymentVerificationResponse) GetServiceError() ServiceError2 {
	if o == nil || IsNil(o.ServiceError) {
		var ret ServiceError2
		return ret
	}
	return *o.ServiceError
}

// GetServiceErrorOk returns a tuple with the ServiceError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentVerificationResponse) GetServiceErrorOk() (*ServiceError2, bool) {
	if o == nil || IsNil(o.ServiceError) {
		return nil, false
	}
	return o.ServiceError, true
}

// HasServiceError returns a boolean if a field has been set.
func (o *PaymentVerificationResponse) HasServiceError() bool {
	if o != nil && !IsNil(o.ServiceError) {
		return true
	}

	return false
}

// SetServiceError gets a reference to the given ServiceError2 and assigns it to the ServiceError field.
func (o *PaymentVerificationResponse) SetServiceError(v ServiceError2) {
	o.ServiceError = &v
}

// GetShopperLocale returns the ShopperLocale field value
func (o *PaymentVerificationResponse) GetShopperLocale() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShopperLocale
}

// GetShopperLocaleOk returns a tuple with the ShopperLocale field value
// and a boolean to check if the value has been set.
func (o *PaymentVerificationResponse) GetShopperLocaleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShopperLocale, true
}

// SetShopperLocale sets field value
func (o *PaymentVerificationResponse) SetShopperLocale(v string) {
	o.ShopperLocale = v
}

func (o PaymentVerificationResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentVerificationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalData) {
		toSerialize["additionalData"] = o.AdditionalData
	}
	if !IsNil(o.FraudResult) {
		toSerialize["fraudResult"] = o.FraudResult
	}
	toSerialize["merchantReference"] = o.MerchantReference
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.PspReference) {
		toSerialize["pspReference"] = o.PspReference
	}
	if !IsNil(o.RefusalReason) {
		toSerialize["refusalReason"] = o.RefusalReason
	}
	if !IsNil(o.RefusalReasonCode) {
		toSerialize["refusalReasonCode"] = o.RefusalReasonCode
	}
	if !IsNil(o.ResultCode) {
		toSerialize["resultCode"] = o.ResultCode
	}
	if !IsNil(o.ServiceError) {
		toSerialize["serviceError"] = o.ServiceError
	}
	toSerialize["shopperLocale"] = o.ShopperLocale
	return toSerialize, nil
}

type NullablePaymentVerificationResponse struct {
	value *PaymentVerificationResponse
	isSet bool
}

func (v NullablePaymentVerificationResponse) Get() *PaymentVerificationResponse {
	return v.value
}

func (v *NullablePaymentVerificationResponse) Set(val *PaymentVerificationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentVerificationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentVerificationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentVerificationResponse(val *PaymentVerificationResponse) *NullablePaymentVerificationResponse {
	return &NullablePaymentVerificationResponse{value: val, isSet: true}
}

func (v NullablePaymentVerificationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentVerificationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func (o *PaymentVerificationResponse) isValidResultCode() bool {
	var allowedEnumValues = []string{"AuthenticationFinished", "AuthenticationNotRequired", "Authorised", "Cancelled", "ChallengeShopper", "Error", "IdentifyShopper", "Pending", "PresentToShopper", "Received", "RedirectShopper", "Refused", "Success"}
	for _, allowed := range allowedEnumValues {
		if o.GetResultCode() == allowed {
			return true
		}
	}
	return false
}
