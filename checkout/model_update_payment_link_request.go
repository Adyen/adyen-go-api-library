/*
Adyen Checkout API

Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!

API version: 70
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"
)

// checks if the UpdatePaymentLinkRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePaymentLinkRequest{}

// UpdatePaymentLinkRequest struct for UpdatePaymentLinkRequest
type UpdatePaymentLinkRequest struct {
	// Status of the payment link. Possible values: * **expired**
	Status string `json:"status"`
}

// NewUpdatePaymentLinkRequest instantiates a new UpdatePaymentLinkRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePaymentLinkRequest(status string) *UpdatePaymentLinkRequest {
	this := UpdatePaymentLinkRequest{}
	this.Status = status
	return &this
}

// NewUpdatePaymentLinkRequestWithDefaults instantiates a new UpdatePaymentLinkRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePaymentLinkRequestWithDefaults() *UpdatePaymentLinkRequest {
	this := UpdatePaymentLinkRequest{}
	return &this
}

// GetStatus returns the Status field value
func (o *UpdatePaymentLinkRequest) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *UpdatePaymentLinkRequest) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *UpdatePaymentLinkRequest) SetStatus(v string) {
	o.Status = v
}

func (o UpdatePaymentLinkRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePaymentLinkRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

type NullableUpdatePaymentLinkRequest struct {
	value *UpdatePaymentLinkRequest
	isSet bool
}

func (v NullableUpdatePaymentLinkRequest) Get() *UpdatePaymentLinkRequest {
	return v.value
}

func (v *NullableUpdatePaymentLinkRequest) Set(val *UpdatePaymentLinkRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePaymentLinkRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePaymentLinkRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePaymentLinkRequest(val *UpdatePaymentLinkRequest) *NullableUpdatePaymentLinkRequest {
	return &NullableUpdatePaymentLinkRequest{value: val, isSet: true}
}

func (v NullableUpdatePaymentLinkRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePaymentLinkRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func (o *UpdatePaymentLinkRequest) isValidStatus() bool {
	var allowedEnumValues = []string{"expired"}
	for _, allowed := range allowedEnumValues {
		if o.GetStatus() == allowed {
			return true
		}
	}
	return false
}
