/*
Adyen Checkout API

Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!

API version: 70
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"
	"fmt"
)

// PaymentDonationRequestPaymentMethod - The type and required details of a payment method to use.
type PaymentDonationRequestPaymentMethod struct {
	AchDetails                        *AchDetails
	AfterpayDetails                   *AfterpayDetails
	AmazonPayDetails                  *AmazonPayDetails
	AndroidPayDetails                 *AndroidPayDetails
	ApplePayDetails                   *ApplePayDetails
	BacsDirectDebitDetails            *BacsDirectDebitDetails
	BillDeskDetails                   *BillDeskDetails
	BlikDetails                       *BlikDetails
	CardDetails                       *CardDetails
	CellulantDetails                  *CellulantDetails
	DokuDetails                       *DokuDetails
	DotpayDetails                     *DotpayDetails
	DragonpayDetails                  *DragonpayDetails
	EcontextVoucherDetails            *EcontextVoucherDetails
	GenericIssuerPaymentMethodDetails *GenericIssuerPaymentMethodDetails
	GiropayDetails                    *GiropayDetails
	GooglePayDetails                  *GooglePayDetails
	IdealDetails                      *IdealDetails
	KlarnaDetails                     *KlarnaDetails
	MasterpassDetails                 *MasterpassDetails
	MbwayDetails                      *MbwayDetails
	MobilePayDetails                  *MobilePayDetails
	MolPayDetails                     *MolPayDetails
	OpenInvoiceDetails                *OpenInvoiceDetails
	PayPalDetails                     *PayPalDetails
	PayUUpiDetails                    *PayUUpiDetails
	PayWithGoogleDetails              *PayWithGoogleDetails
	PaymentDetails                    *PaymentDetails
	RatepayDetails                    *RatepayDetails
	SamsungPayDetails                 *SamsungPayDetails
	SepaDirectDebitDetails            *SepaDirectDebitDetails
	StoredPaymentMethodDetails        *StoredPaymentMethodDetails
	UpiCollectDetails                 *UpiCollectDetails
	UpiIntentDetails                  *UpiIntentDetails
	VippsDetails                      *VippsDetails
	VisaCheckoutDetails               *VisaCheckoutDetails
	WeChatPayDetails                  *WeChatPayDetails
	WeChatPayMiniProgramDetails       *WeChatPayMiniProgramDetails
	ZipDetails                        *ZipDetails
}

// AchDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns AchDetails wrapped in PaymentDonationRequestPaymentMethod
func AchDetailsAsPaymentDonationRequestPaymentMethod(v *AchDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		AchDetails: v,
	}
}

// AfterpayDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns AfterpayDetails wrapped in PaymentDonationRequestPaymentMethod
func AfterpayDetailsAsPaymentDonationRequestPaymentMethod(v *AfterpayDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		AfterpayDetails: v,
	}
}

// AmazonPayDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns AmazonPayDetails wrapped in PaymentDonationRequestPaymentMethod
func AmazonPayDetailsAsPaymentDonationRequestPaymentMethod(v *AmazonPayDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		AmazonPayDetails: v,
	}
}

// AndroidPayDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns AndroidPayDetails wrapped in PaymentDonationRequestPaymentMethod
func AndroidPayDetailsAsPaymentDonationRequestPaymentMethod(v *AndroidPayDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		AndroidPayDetails: v,
	}
}

// ApplePayDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns ApplePayDetails wrapped in PaymentDonationRequestPaymentMethod
func ApplePayDetailsAsPaymentDonationRequestPaymentMethod(v *ApplePayDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		ApplePayDetails: v,
	}
}

// BacsDirectDebitDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns BacsDirectDebitDetails wrapped in PaymentDonationRequestPaymentMethod
func BacsDirectDebitDetailsAsPaymentDonationRequestPaymentMethod(v *BacsDirectDebitDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		BacsDirectDebitDetails: v,
	}
}

// BillDeskDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns BillDeskDetails wrapped in PaymentDonationRequestPaymentMethod
func BillDeskDetailsAsPaymentDonationRequestPaymentMethod(v *BillDeskDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		BillDeskDetails: v,
	}
}

// BlikDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns BlikDetails wrapped in PaymentDonationRequestPaymentMethod
func BlikDetailsAsPaymentDonationRequestPaymentMethod(v *BlikDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		BlikDetails: v,
	}
}

// CardDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns CardDetails wrapped in PaymentDonationRequestPaymentMethod
func CardDetailsAsPaymentDonationRequestPaymentMethod(v *CardDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		CardDetails: v,
	}
}

// CellulantDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns CellulantDetails wrapped in PaymentDonationRequestPaymentMethod
func CellulantDetailsAsPaymentDonationRequestPaymentMethod(v *CellulantDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		CellulantDetails: v,
	}
}

// DokuDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns DokuDetails wrapped in PaymentDonationRequestPaymentMethod
func DokuDetailsAsPaymentDonationRequestPaymentMethod(v *DokuDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		DokuDetails: v,
	}
}

// DotpayDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns DotpayDetails wrapped in PaymentDonationRequestPaymentMethod
func DotpayDetailsAsPaymentDonationRequestPaymentMethod(v *DotpayDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		DotpayDetails: v,
	}
}

// DragonpayDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns DragonpayDetails wrapped in PaymentDonationRequestPaymentMethod
func DragonpayDetailsAsPaymentDonationRequestPaymentMethod(v *DragonpayDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		DragonpayDetails: v,
	}
}

// EcontextVoucherDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns EcontextVoucherDetails wrapped in PaymentDonationRequestPaymentMethod
func EcontextVoucherDetailsAsPaymentDonationRequestPaymentMethod(v *EcontextVoucherDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		EcontextVoucherDetails: v,
	}
}

// GenericIssuerPaymentMethodDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns GenericIssuerPaymentMethodDetails wrapped in PaymentDonationRequestPaymentMethod
func GenericIssuerPaymentMethodDetailsAsPaymentDonationRequestPaymentMethod(v *GenericIssuerPaymentMethodDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		GenericIssuerPaymentMethodDetails: v,
	}
}

// GiropayDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns GiropayDetails wrapped in PaymentDonationRequestPaymentMethod
func GiropayDetailsAsPaymentDonationRequestPaymentMethod(v *GiropayDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		GiropayDetails: v,
	}
}

// GooglePayDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns GooglePayDetails wrapped in PaymentDonationRequestPaymentMethod
func GooglePayDetailsAsPaymentDonationRequestPaymentMethod(v *GooglePayDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		GooglePayDetails: v,
	}
}

// IdealDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns IdealDetails wrapped in PaymentDonationRequestPaymentMethod
func IdealDetailsAsPaymentDonationRequestPaymentMethod(v *IdealDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		IdealDetails: v,
	}
}

// KlarnaDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns KlarnaDetails wrapped in PaymentDonationRequestPaymentMethod
func KlarnaDetailsAsPaymentDonationRequestPaymentMethod(v *KlarnaDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		KlarnaDetails: v,
	}
}

// MasterpassDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns MasterpassDetails wrapped in PaymentDonationRequestPaymentMethod
func MasterpassDetailsAsPaymentDonationRequestPaymentMethod(v *MasterpassDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		MasterpassDetails: v,
	}
}

// MbwayDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns MbwayDetails wrapped in PaymentDonationRequestPaymentMethod
func MbwayDetailsAsPaymentDonationRequestPaymentMethod(v *MbwayDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		MbwayDetails: v,
	}
}

// MobilePayDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns MobilePayDetails wrapped in PaymentDonationRequestPaymentMethod
func MobilePayDetailsAsPaymentDonationRequestPaymentMethod(v *MobilePayDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		MobilePayDetails: v,
	}
}

// MolPayDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns MolPayDetails wrapped in PaymentDonationRequestPaymentMethod
func MolPayDetailsAsPaymentDonationRequestPaymentMethod(v *MolPayDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		MolPayDetails: v,
	}
}

// OpenInvoiceDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns OpenInvoiceDetails wrapped in PaymentDonationRequestPaymentMethod
func OpenInvoiceDetailsAsPaymentDonationRequestPaymentMethod(v *OpenInvoiceDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		OpenInvoiceDetails: v,
	}
}

// PayPalDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns PayPalDetails wrapped in PaymentDonationRequestPaymentMethod
func PayPalDetailsAsPaymentDonationRequestPaymentMethod(v *PayPalDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		PayPalDetails: v,
	}
}

// PayUUpiDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns PayUUpiDetails wrapped in PaymentDonationRequestPaymentMethod
func PayUUpiDetailsAsPaymentDonationRequestPaymentMethod(v *PayUUpiDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		PayUUpiDetails: v,
	}
}

// PayWithGoogleDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns PayWithGoogleDetails wrapped in PaymentDonationRequestPaymentMethod
func PayWithGoogleDetailsAsPaymentDonationRequestPaymentMethod(v *PayWithGoogleDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		PayWithGoogleDetails: v,
	}
}

// PaymentDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns PaymentDetails wrapped in PaymentDonationRequestPaymentMethod
func PaymentDetailsAsPaymentDonationRequestPaymentMethod(v *PaymentDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		PaymentDetails: v,
	}
}

// RatepayDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns RatepayDetails wrapped in PaymentDonationRequestPaymentMethod
func RatepayDetailsAsPaymentDonationRequestPaymentMethod(v *RatepayDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		RatepayDetails: v,
	}
}

// SamsungPayDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns SamsungPayDetails wrapped in PaymentDonationRequestPaymentMethod
func SamsungPayDetailsAsPaymentDonationRequestPaymentMethod(v *SamsungPayDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		SamsungPayDetails: v,
	}
}

// SepaDirectDebitDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns SepaDirectDebitDetails wrapped in PaymentDonationRequestPaymentMethod
func SepaDirectDebitDetailsAsPaymentDonationRequestPaymentMethod(v *SepaDirectDebitDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		SepaDirectDebitDetails: v,
	}
}

// StoredPaymentMethodDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns StoredPaymentMethodDetails wrapped in PaymentDonationRequestPaymentMethod
func StoredPaymentMethodDetailsAsPaymentDonationRequestPaymentMethod(v *StoredPaymentMethodDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		StoredPaymentMethodDetails: v,
	}
}

// UpiCollectDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns UpiCollectDetails wrapped in PaymentDonationRequestPaymentMethod
func UpiCollectDetailsAsPaymentDonationRequestPaymentMethod(v *UpiCollectDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		UpiCollectDetails: v,
	}
}

// UpiIntentDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns UpiIntentDetails wrapped in PaymentDonationRequestPaymentMethod
func UpiIntentDetailsAsPaymentDonationRequestPaymentMethod(v *UpiIntentDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		UpiIntentDetails: v,
	}
}

// VippsDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns VippsDetails wrapped in PaymentDonationRequestPaymentMethod
func VippsDetailsAsPaymentDonationRequestPaymentMethod(v *VippsDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		VippsDetails: v,
	}
}

// VisaCheckoutDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns VisaCheckoutDetails wrapped in PaymentDonationRequestPaymentMethod
func VisaCheckoutDetailsAsPaymentDonationRequestPaymentMethod(v *VisaCheckoutDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		VisaCheckoutDetails: v,
	}
}

// WeChatPayDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns WeChatPayDetails wrapped in PaymentDonationRequestPaymentMethod
func WeChatPayDetailsAsPaymentDonationRequestPaymentMethod(v *WeChatPayDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		WeChatPayDetails: v,
	}
}

// WeChatPayMiniProgramDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns WeChatPayMiniProgramDetails wrapped in PaymentDonationRequestPaymentMethod
func WeChatPayMiniProgramDetailsAsPaymentDonationRequestPaymentMethod(v *WeChatPayMiniProgramDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		WeChatPayMiniProgramDetails: v,
	}
}

// ZipDetailsAsPaymentDonationRequestPaymentMethod is a convenience function that returns ZipDetails wrapped in PaymentDonationRequestPaymentMethod
func ZipDetailsAsPaymentDonationRequestPaymentMethod(v *ZipDetails) PaymentDonationRequestPaymentMethod {
	return PaymentDonationRequestPaymentMethod{
		ZipDetails: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PaymentDonationRequestPaymentMethod) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AchDetails
	err = json.Unmarshal(data, &dst.AchDetails)
	if err == nil {
		jsonAchDetails, _ := json.Marshal(dst.AchDetails)
		if string(jsonAchDetails) == "{}" { // empty struct
			dst.AchDetails = nil
		} else if dst.AchDetails.isValidType() {
			match++
		}
	} else {
		dst.AchDetails = nil
	}

	// try to unmarshal data into AfterpayDetails
	err = json.Unmarshal(data, &dst.AfterpayDetails)
	if err == nil {
		jsonAfterpayDetails, _ := json.Marshal(dst.AfterpayDetails)
		if string(jsonAfterpayDetails) == "{}" { // empty struct
			dst.AfterpayDetails = nil
		} else if dst.AfterpayDetails.isValidType() {
			match++
		}
	} else {
		dst.AfterpayDetails = nil
	}

	// try to unmarshal data into AmazonPayDetails
	err = json.Unmarshal(data, &dst.AmazonPayDetails)
	if err == nil {
		jsonAmazonPayDetails, _ := json.Marshal(dst.AmazonPayDetails)
		if string(jsonAmazonPayDetails) == "{}" { // empty struct
			dst.AmazonPayDetails = nil
		} else if dst.AmazonPayDetails.isValidType() {
			match++
		}
	} else {
		dst.AmazonPayDetails = nil
	}

	// try to unmarshal data into AndroidPayDetails
	err = json.Unmarshal(data, &dst.AndroidPayDetails)
	if err == nil {
		jsonAndroidPayDetails, _ := json.Marshal(dst.AndroidPayDetails)
		if string(jsonAndroidPayDetails) == "{}" { // empty struct
			dst.AndroidPayDetails = nil
		} else if dst.AndroidPayDetails.isValidType() {
			match++
		}
	} else {
		dst.AndroidPayDetails = nil
	}

	// try to unmarshal data into ApplePayDetails
	err = json.Unmarshal(data, &dst.ApplePayDetails)
	if err == nil {
		jsonApplePayDetails, _ := json.Marshal(dst.ApplePayDetails)
		if string(jsonApplePayDetails) == "{}" { // empty struct
			dst.ApplePayDetails = nil
		} else if dst.ApplePayDetails.isValidType() {
			match++
		}
	} else {
		dst.ApplePayDetails = nil
	}

	// try to unmarshal data into BacsDirectDebitDetails
	err = json.Unmarshal(data, &dst.BacsDirectDebitDetails)
	if err == nil {
		jsonBacsDirectDebitDetails, _ := json.Marshal(dst.BacsDirectDebitDetails)
		if string(jsonBacsDirectDebitDetails) == "{}" { // empty struct
			dst.BacsDirectDebitDetails = nil
		} else if dst.BacsDirectDebitDetails.isValidType() {
			match++
		}
	} else {
		dst.BacsDirectDebitDetails = nil
	}

	// try to unmarshal data into BillDeskDetails
	err = json.Unmarshal(data, &dst.BillDeskDetails)
	if err == nil {
		jsonBillDeskDetails, _ := json.Marshal(dst.BillDeskDetails)
		if string(jsonBillDeskDetails) == "{}" { // empty struct
			dst.BillDeskDetails = nil
		} else if dst.BillDeskDetails.isValidType() {
			match++
		}
	} else {
		dst.BillDeskDetails = nil
	}

	// try to unmarshal data into BlikDetails
	err = json.Unmarshal(data, &dst.BlikDetails)
	if err == nil {
		jsonBlikDetails, _ := json.Marshal(dst.BlikDetails)
		if string(jsonBlikDetails) == "{}" { // empty struct
			dst.BlikDetails = nil
		} else if dst.BlikDetails.isValidType() {
			match++
		}
	} else {
		dst.BlikDetails = nil
	}

	// try to unmarshal data into CardDetails
	err = json.Unmarshal(data, &dst.CardDetails)
	if err == nil {
		jsonCardDetails, _ := json.Marshal(dst.CardDetails)
		if string(jsonCardDetails) == "{}" { // empty struct
			dst.CardDetails = nil
		} else if dst.CardDetails.isValidType() {
			match++
		}
	} else {
		dst.CardDetails = nil
	}

	// try to unmarshal data into CellulantDetails
	err = json.Unmarshal(data, &dst.CellulantDetails)
	if err == nil {
		jsonCellulantDetails, _ := json.Marshal(dst.CellulantDetails)
		if string(jsonCellulantDetails) == "{}" { // empty struct
			dst.CellulantDetails = nil
		} else if dst.CellulantDetails.isValidType() {
			match++
		}
	} else {
		dst.CellulantDetails = nil
	}

	// try to unmarshal data into DokuDetails
	err = json.Unmarshal(data, &dst.DokuDetails)
	if err == nil {
		jsonDokuDetails, _ := json.Marshal(dst.DokuDetails)
		if string(jsonDokuDetails) == "{}" { // empty struct
			dst.DokuDetails = nil
		} else if dst.DokuDetails.isValidType() {
			match++
		}
	} else {
		dst.DokuDetails = nil
	}

	// try to unmarshal data into DotpayDetails
	err = json.Unmarshal(data, &dst.DotpayDetails)
	if err == nil {
		jsonDotpayDetails, _ := json.Marshal(dst.DotpayDetails)
		if string(jsonDotpayDetails) == "{}" { // empty struct
			dst.DotpayDetails = nil
		} else if dst.DotpayDetails.isValidType() {
			match++
		}
	} else {
		dst.DotpayDetails = nil
	}

	// try to unmarshal data into DragonpayDetails
	err = json.Unmarshal(data, &dst.DragonpayDetails)
	if err == nil {
		jsonDragonpayDetails, _ := json.Marshal(dst.DragonpayDetails)
		if string(jsonDragonpayDetails) == "{}" { // empty struct
			dst.DragonpayDetails = nil
		} else if dst.DragonpayDetails.isValidType() {
			match++
		}
	} else {
		dst.DragonpayDetails = nil
	}

	// try to unmarshal data into EcontextVoucherDetails
	err = json.Unmarshal(data, &dst.EcontextVoucherDetails)
	if err == nil {
		jsonEcontextVoucherDetails, _ := json.Marshal(dst.EcontextVoucherDetails)
		if string(jsonEcontextVoucherDetails) == "{}" { // empty struct
			dst.EcontextVoucherDetails = nil
		} else if dst.EcontextVoucherDetails.isValidType() {
			match++
		}
	} else {
		dst.EcontextVoucherDetails = nil
	}

	// try to unmarshal data into GenericIssuerPaymentMethodDetails
	err = json.Unmarshal(data, &dst.GenericIssuerPaymentMethodDetails)
	if err == nil {
		jsonGenericIssuerPaymentMethodDetails, _ := json.Marshal(dst.GenericIssuerPaymentMethodDetails)
		if string(jsonGenericIssuerPaymentMethodDetails) == "{}" { // empty struct
			dst.GenericIssuerPaymentMethodDetails = nil
		} else if dst.GenericIssuerPaymentMethodDetails.isValidType() {
			match++
		}
	} else {
		dst.GenericIssuerPaymentMethodDetails = nil
	}

	// try to unmarshal data into GiropayDetails
	err = json.Unmarshal(data, &dst.GiropayDetails)
	if err == nil {
		jsonGiropayDetails, _ := json.Marshal(dst.GiropayDetails)
		if string(jsonGiropayDetails) == "{}" { // empty struct
			dst.GiropayDetails = nil
		} else if dst.GiropayDetails.isValidType() {
			match++
		}
	} else {
		dst.GiropayDetails = nil
	}

	// try to unmarshal data into GooglePayDetails
	err = json.Unmarshal(data, &dst.GooglePayDetails)
	if err == nil {
		jsonGooglePayDetails, _ := json.Marshal(dst.GooglePayDetails)
		if string(jsonGooglePayDetails) == "{}" { // empty struct
			dst.GooglePayDetails = nil
		} else if dst.GooglePayDetails.isValidType() {
			match++
		}
	} else {
		dst.GooglePayDetails = nil
	}

	// try to unmarshal data into IdealDetails
	err = json.Unmarshal(data, &dst.IdealDetails)
	if err == nil {
		jsonIdealDetails, _ := json.Marshal(dst.IdealDetails)
		if string(jsonIdealDetails) == "{}" { // empty struct
			dst.IdealDetails = nil
		} else if dst.IdealDetails.isValidType() {
			match++
		}
	} else {
		dst.IdealDetails = nil
	}

	// try to unmarshal data into KlarnaDetails
	err = json.Unmarshal(data, &dst.KlarnaDetails)
	if err == nil {
		jsonKlarnaDetails, _ := json.Marshal(dst.KlarnaDetails)
		if string(jsonKlarnaDetails) == "{}" { // empty struct
			dst.KlarnaDetails = nil
		} else if dst.KlarnaDetails.isValidType() {
			match++
		}
	} else {
		dst.KlarnaDetails = nil
	}

	// try to unmarshal data into MasterpassDetails
	err = json.Unmarshal(data, &dst.MasterpassDetails)
	if err == nil {
		jsonMasterpassDetails, _ := json.Marshal(dst.MasterpassDetails)
		if string(jsonMasterpassDetails) == "{}" { // empty struct
			dst.MasterpassDetails = nil
		} else if dst.MasterpassDetails.isValidType() {
			match++
		}
	} else {
		dst.MasterpassDetails = nil
	}

	// try to unmarshal data into MbwayDetails
	err = json.Unmarshal(data, &dst.MbwayDetails)
	if err == nil {
		jsonMbwayDetails, _ := json.Marshal(dst.MbwayDetails)
		if string(jsonMbwayDetails) == "{}" { // empty struct
			dst.MbwayDetails = nil
		} else if dst.MbwayDetails.isValidType() {
			match++
		}
	} else {
		dst.MbwayDetails = nil
	}

	// try to unmarshal data into MobilePayDetails
	err = json.Unmarshal(data, &dst.MobilePayDetails)
	if err == nil {
		jsonMobilePayDetails, _ := json.Marshal(dst.MobilePayDetails)
		if string(jsonMobilePayDetails) == "{}" { // empty struct
			dst.MobilePayDetails = nil
		} else if dst.MobilePayDetails.isValidType() {
			match++
		}
	} else {
		dst.MobilePayDetails = nil
	}

	// try to unmarshal data into MolPayDetails
	err = json.Unmarshal(data, &dst.MolPayDetails)
	if err == nil {
		jsonMolPayDetails, _ := json.Marshal(dst.MolPayDetails)
		if string(jsonMolPayDetails) == "{}" { // empty struct
			dst.MolPayDetails = nil
		} else if dst.MolPayDetails.isValidType() {
			match++
		}
	} else {
		dst.MolPayDetails = nil
	}

	// try to unmarshal data into OpenInvoiceDetails
	err = json.Unmarshal(data, &dst.OpenInvoiceDetails)
	if err == nil {
		jsonOpenInvoiceDetails, _ := json.Marshal(dst.OpenInvoiceDetails)
		if string(jsonOpenInvoiceDetails) == "{}" { // empty struct
			dst.OpenInvoiceDetails = nil
		} else if dst.OpenInvoiceDetails.isValidType() {
			match++
		}
	} else {
		dst.OpenInvoiceDetails = nil
	}

	// try to unmarshal data into PayPalDetails
	err = json.Unmarshal(data, &dst.PayPalDetails)
	if err == nil {
		jsonPayPalDetails, _ := json.Marshal(dst.PayPalDetails)
		if string(jsonPayPalDetails) == "{}" { // empty struct
			dst.PayPalDetails = nil
		} else if dst.PayPalDetails.isValidType() {
			match++
		}
	} else {
		dst.PayPalDetails = nil
	}

	// try to unmarshal data into PayUUpiDetails
	err = json.Unmarshal(data, &dst.PayUUpiDetails)
	if err == nil {
		jsonPayUUpiDetails, _ := json.Marshal(dst.PayUUpiDetails)
		if string(jsonPayUUpiDetails) == "{}" { // empty struct
			dst.PayUUpiDetails = nil
		} else if dst.PayUUpiDetails.isValidType() {
			match++
		}
	} else {
		dst.PayUUpiDetails = nil
	}

	// try to unmarshal data into PayWithGoogleDetails
	err = json.Unmarshal(data, &dst.PayWithGoogleDetails)
	if err == nil {
		jsonPayWithGoogleDetails, _ := json.Marshal(dst.PayWithGoogleDetails)
		if string(jsonPayWithGoogleDetails) == "{}" { // empty struct
			dst.PayWithGoogleDetails = nil
		} else if dst.PayWithGoogleDetails.isValidType() {
			match++
		}
	} else {
		dst.PayWithGoogleDetails = nil
	}

	// try to unmarshal data into PaymentDetails
	err = json.Unmarshal(data, &dst.PaymentDetails)
	if err == nil {
		jsonPaymentDetails, _ := json.Marshal(dst.PaymentDetails)
		if string(jsonPaymentDetails) == "{}" { // empty struct
			dst.PaymentDetails = nil
		} else if dst.PaymentDetails.isValidType() {
			match++
		}
	} else {
		dst.PaymentDetails = nil
	}

	// try to unmarshal data into RatepayDetails
	err = json.Unmarshal(data, &dst.RatepayDetails)
	if err == nil {
		jsonRatepayDetails, _ := json.Marshal(dst.RatepayDetails)
		if string(jsonRatepayDetails) == "{}" { // empty struct
			dst.RatepayDetails = nil
		} else if dst.RatepayDetails.isValidType() {
			match++
		}
	} else {
		dst.RatepayDetails = nil
	}

	// try to unmarshal data into SamsungPayDetails
	err = json.Unmarshal(data, &dst.SamsungPayDetails)
	if err == nil {
		jsonSamsungPayDetails, _ := json.Marshal(dst.SamsungPayDetails)
		if string(jsonSamsungPayDetails) == "{}" { // empty struct
			dst.SamsungPayDetails = nil
		} else if dst.SamsungPayDetails.isValidType() {
			match++
		}
	} else {
		dst.SamsungPayDetails = nil
	}

	// try to unmarshal data into SepaDirectDebitDetails
	err = json.Unmarshal(data, &dst.SepaDirectDebitDetails)
	if err == nil {
		jsonSepaDirectDebitDetails, _ := json.Marshal(dst.SepaDirectDebitDetails)
		if string(jsonSepaDirectDebitDetails) == "{}" { // empty struct
			dst.SepaDirectDebitDetails = nil
		} else if dst.SepaDirectDebitDetails.isValidType() {
			match++
		}
	} else {
		dst.SepaDirectDebitDetails = nil
	}

	// try to unmarshal data into StoredPaymentMethodDetails
	err = json.Unmarshal(data, &dst.StoredPaymentMethodDetails)
	if err == nil {
		jsonStoredPaymentMethodDetails, _ := json.Marshal(dst.StoredPaymentMethodDetails)
		if string(jsonStoredPaymentMethodDetails) == "{}" { // empty struct
			dst.StoredPaymentMethodDetails = nil
		} else if dst.StoredPaymentMethodDetails.isValidType() {
			match++
		}
	} else {
		dst.StoredPaymentMethodDetails = nil
	}

	// try to unmarshal data into UpiCollectDetails
	err = json.Unmarshal(data, &dst.UpiCollectDetails)
	if err == nil {
		jsonUpiCollectDetails, _ := json.Marshal(dst.UpiCollectDetails)
		if string(jsonUpiCollectDetails) == "{}" { // empty struct
			dst.UpiCollectDetails = nil
		} else if dst.UpiCollectDetails.isValidType() {
			match++
		}
	} else {
		dst.UpiCollectDetails = nil
	}

	// try to unmarshal data into UpiIntentDetails
	err = json.Unmarshal(data, &dst.UpiIntentDetails)
	if err == nil {
		jsonUpiIntentDetails, _ := json.Marshal(dst.UpiIntentDetails)
		if string(jsonUpiIntentDetails) == "{}" { // empty struct
			dst.UpiIntentDetails = nil
		} else if dst.UpiIntentDetails.isValidType() {
			match++
		}
	} else {
		dst.UpiIntentDetails = nil
	}

	// try to unmarshal data into VippsDetails
	err = json.Unmarshal(data, &dst.VippsDetails)
	if err == nil {
		jsonVippsDetails, _ := json.Marshal(dst.VippsDetails)
		if string(jsonVippsDetails) == "{}" { // empty struct
			dst.VippsDetails = nil
		} else if dst.VippsDetails.isValidType() {
			match++
		}
	} else {
		dst.VippsDetails = nil
	}

	// try to unmarshal data into VisaCheckoutDetails
	err = json.Unmarshal(data, &dst.VisaCheckoutDetails)
	if err == nil {
		jsonVisaCheckoutDetails, _ := json.Marshal(dst.VisaCheckoutDetails)
		if string(jsonVisaCheckoutDetails) == "{}" { // empty struct
			dst.VisaCheckoutDetails = nil
		} else if dst.VisaCheckoutDetails.isValidType() {
			match++
		}
	} else {
		dst.VisaCheckoutDetails = nil
	}

	// try to unmarshal data into WeChatPayDetails
	err = json.Unmarshal(data, &dst.WeChatPayDetails)
	if err == nil {
		jsonWeChatPayDetails, _ := json.Marshal(dst.WeChatPayDetails)
		if string(jsonWeChatPayDetails) == "{}" { // empty struct
			dst.WeChatPayDetails = nil
		} else if dst.WeChatPayDetails.isValidType() {
			match++
		}
	} else {
		dst.WeChatPayDetails = nil
	}

	// try to unmarshal data into WeChatPayMiniProgramDetails
	err = json.Unmarshal(data, &dst.WeChatPayMiniProgramDetails)
	if err == nil {
		jsonWeChatPayMiniProgramDetails, _ := json.Marshal(dst.WeChatPayMiniProgramDetails)
		if string(jsonWeChatPayMiniProgramDetails) == "{}" { // empty struct
			dst.WeChatPayMiniProgramDetails = nil
		} else if dst.WeChatPayMiniProgramDetails.isValidType() {
			match++
		}
	} else {
		dst.WeChatPayMiniProgramDetails = nil
	}

	// try to unmarshal data into ZipDetails
	err = json.Unmarshal(data, &dst.ZipDetails)
	if err == nil {
		jsonZipDetails, _ := json.Marshal(dst.ZipDetails)
		if string(jsonZipDetails) == "{}" { // empty struct
			dst.ZipDetails = nil
		} else if dst.ZipDetails.isValidType() {
			match++
		}
	} else {
		dst.ZipDetails = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AchDetails = nil
		dst.AfterpayDetails = nil
		dst.AmazonPayDetails = nil
		dst.AndroidPayDetails = nil
		dst.ApplePayDetails = nil
		dst.BacsDirectDebitDetails = nil
		dst.BillDeskDetails = nil
		dst.BlikDetails = nil
		dst.CardDetails = nil
		dst.CellulantDetails = nil
		dst.DokuDetails = nil
		dst.DotpayDetails = nil
		dst.DragonpayDetails = nil
		dst.EcontextVoucherDetails = nil
		dst.GenericIssuerPaymentMethodDetails = nil
		dst.GiropayDetails = nil
		dst.GooglePayDetails = nil
		dst.IdealDetails = nil
		dst.KlarnaDetails = nil
		dst.MasterpassDetails = nil
		dst.MbwayDetails = nil
		dst.MobilePayDetails = nil
		dst.MolPayDetails = nil
		dst.OpenInvoiceDetails = nil
		dst.PayPalDetails = nil
		dst.PayUUpiDetails = nil
		dst.PayWithGoogleDetails = nil
		dst.PaymentDetails = nil
		dst.RatepayDetails = nil
		dst.SamsungPayDetails = nil
		dst.SepaDirectDebitDetails = nil
		dst.StoredPaymentMethodDetails = nil
		dst.UpiCollectDetails = nil
		dst.UpiIntentDetails = nil
		dst.VippsDetails = nil
		dst.VisaCheckoutDetails = nil
		dst.WeChatPayDetails = nil
		dst.WeChatPayMiniProgramDetails = nil
		dst.ZipDetails = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PaymentDonationRequestPaymentMethod)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PaymentDonationRequestPaymentMethod)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PaymentDonationRequestPaymentMethod) MarshalJSON() ([]byte, error) {
	if src.AchDetails != nil {
		return json.Marshal(&src.AchDetails)
	}

	if src.AfterpayDetails != nil {
		return json.Marshal(&src.AfterpayDetails)
	}

	if src.AmazonPayDetails != nil {
		return json.Marshal(&src.AmazonPayDetails)
	}

	if src.AndroidPayDetails != nil {
		return json.Marshal(&src.AndroidPayDetails)
	}

	if src.ApplePayDetails != nil {
		return json.Marshal(&src.ApplePayDetails)
	}

	if src.BacsDirectDebitDetails != nil {
		return json.Marshal(&src.BacsDirectDebitDetails)
	}

	if src.BillDeskDetails != nil {
		return json.Marshal(&src.BillDeskDetails)
	}

	if src.BlikDetails != nil {
		return json.Marshal(&src.BlikDetails)
	}

	if src.CardDetails != nil {
		return json.Marshal(&src.CardDetails)
	}

	if src.CellulantDetails != nil {
		return json.Marshal(&src.CellulantDetails)
	}

	if src.DokuDetails != nil {
		return json.Marshal(&src.DokuDetails)
	}

	if src.DotpayDetails != nil {
		return json.Marshal(&src.DotpayDetails)
	}

	if src.DragonpayDetails != nil {
		return json.Marshal(&src.DragonpayDetails)
	}

	if src.EcontextVoucherDetails != nil {
		return json.Marshal(&src.EcontextVoucherDetails)
	}

	if src.GenericIssuerPaymentMethodDetails != nil {
		return json.Marshal(&src.GenericIssuerPaymentMethodDetails)
	}

	if src.GiropayDetails != nil {
		return json.Marshal(&src.GiropayDetails)
	}

	if src.GooglePayDetails != nil {
		return json.Marshal(&src.GooglePayDetails)
	}

	if src.IdealDetails != nil {
		return json.Marshal(&src.IdealDetails)
	}

	if src.KlarnaDetails != nil {
		return json.Marshal(&src.KlarnaDetails)
	}

	if src.MasterpassDetails != nil {
		return json.Marshal(&src.MasterpassDetails)
	}

	if src.MbwayDetails != nil {
		return json.Marshal(&src.MbwayDetails)
	}

	if src.MobilePayDetails != nil {
		return json.Marshal(&src.MobilePayDetails)
	}

	if src.MolPayDetails != nil {
		return json.Marshal(&src.MolPayDetails)
	}

	if src.OpenInvoiceDetails != nil {
		return json.Marshal(&src.OpenInvoiceDetails)
	}

	if src.PayPalDetails != nil {
		return json.Marshal(&src.PayPalDetails)
	}

	if src.PayUUpiDetails != nil {
		return json.Marshal(&src.PayUUpiDetails)
	}

	if src.PayWithGoogleDetails != nil {
		return json.Marshal(&src.PayWithGoogleDetails)
	}

	if src.PaymentDetails != nil {
		return json.Marshal(&src.PaymentDetails)
	}

	if src.RatepayDetails != nil {
		return json.Marshal(&src.RatepayDetails)
	}

	if src.SamsungPayDetails != nil {
		return json.Marshal(&src.SamsungPayDetails)
	}

	if src.SepaDirectDebitDetails != nil {
		return json.Marshal(&src.SepaDirectDebitDetails)
	}

	if src.StoredPaymentMethodDetails != nil {
		return json.Marshal(&src.StoredPaymentMethodDetails)
	}

	if src.UpiCollectDetails != nil {
		return json.Marshal(&src.UpiCollectDetails)
	}

	if src.UpiIntentDetails != nil {
		return json.Marshal(&src.UpiIntentDetails)
	}

	if src.VippsDetails != nil {
		return json.Marshal(&src.VippsDetails)
	}

	if src.VisaCheckoutDetails != nil {
		return json.Marshal(&src.VisaCheckoutDetails)
	}

	if src.WeChatPayDetails != nil {
		return json.Marshal(&src.WeChatPayDetails)
	}

	if src.WeChatPayMiniProgramDetails != nil {
		return json.Marshal(&src.WeChatPayMiniProgramDetails)
	}

	if src.ZipDetails != nil {
		return json.Marshal(&src.ZipDetails)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PaymentDonationRequestPaymentMethod) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AchDetails != nil {
		return obj.AchDetails
	}

	if obj.AfterpayDetails != nil {
		return obj.AfterpayDetails
	}

	if obj.AmazonPayDetails != nil {
		return obj.AmazonPayDetails
	}

	if obj.AndroidPayDetails != nil {
		return obj.AndroidPayDetails
	}

	if obj.ApplePayDetails != nil {
		return obj.ApplePayDetails
	}

	if obj.BacsDirectDebitDetails != nil {
		return obj.BacsDirectDebitDetails
	}

	if obj.BillDeskDetails != nil {
		return obj.BillDeskDetails
	}

	if obj.BlikDetails != nil {
		return obj.BlikDetails
	}

	if obj.CardDetails != nil {
		return obj.CardDetails
	}

	if obj.CellulantDetails != nil {
		return obj.CellulantDetails
	}

	if obj.DokuDetails != nil {
		return obj.DokuDetails
	}

	if obj.DotpayDetails != nil {
		return obj.DotpayDetails
	}

	if obj.DragonpayDetails != nil {
		return obj.DragonpayDetails
	}

	if obj.EcontextVoucherDetails != nil {
		return obj.EcontextVoucherDetails
	}

	if obj.GenericIssuerPaymentMethodDetails != nil {
		return obj.GenericIssuerPaymentMethodDetails
	}

	if obj.GiropayDetails != nil {
		return obj.GiropayDetails
	}

	if obj.GooglePayDetails != nil {
		return obj.GooglePayDetails
	}

	if obj.IdealDetails != nil {
		return obj.IdealDetails
	}

	if obj.KlarnaDetails != nil {
		return obj.KlarnaDetails
	}

	if obj.MasterpassDetails != nil {
		return obj.MasterpassDetails
	}

	if obj.MbwayDetails != nil {
		return obj.MbwayDetails
	}

	if obj.MobilePayDetails != nil {
		return obj.MobilePayDetails
	}

	if obj.MolPayDetails != nil {
		return obj.MolPayDetails
	}

	if obj.OpenInvoiceDetails != nil {
		return obj.OpenInvoiceDetails
	}

	if obj.PayPalDetails != nil {
		return obj.PayPalDetails
	}

	if obj.PayUUpiDetails != nil {
		return obj.PayUUpiDetails
	}

	if obj.PayWithGoogleDetails != nil {
		return obj.PayWithGoogleDetails
	}

	if obj.PaymentDetails != nil {
		return obj.PaymentDetails
	}

	if obj.RatepayDetails != nil {
		return obj.RatepayDetails
	}

	if obj.SamsungPayDetails != nil {
		return obj.SamsungPayDetails
	}

	if obj.SepaDirectDebitDetails != nil {
		return obj.SepaDirectDebitDetails
	}

	if obj.StoredPaymentMethodDetails != nil {
		return obj.StoredPaymentMethodDetails
	}

	if obj.UpiCollectDetails != nil {
		return obj.UpiCollectDetails
	}

	if obj.UpiIntentDetails != nil {
		return obj.UpiIntentDetails
	}

	if obj.VippsDetails != nil {
		return obj.VippsDetails
	}

	if obj.VisaCheckoutDetails != nil {
		return obj.VisaCheckoutDetails
	}

	if obj.WeChatPayDetails != nil {
		return obj.WeChatPayDetails
	}

	if obj.WeChatPayMiniProgramDetails != nil {
		return obj.WeChatPayMiniProgramDetails
	}

	if obj.ZipDetails != nil {
		return obj.ZipDetails
	}

	// all schemas are nil
	return nil
}

type NullablePaymentDonationRequestPaymentMethod struct {
	value *PaymentDonationRequestPaymentMethod
	isSet bool
}

func (v NullablePaymentDonationRequestPaymentMethod) Get() *PaymentDonationRequestPaymentMethod {
	return v.value
}

func (v *NullablePaymentDonationRequestPaymentMethod) Set(val *PaymentDonationRequestPaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentDonationRequestPaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentDonationRequestPaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentDonationRequestPaymentMethod(val *PaymentDonationRequestPaymentMethod) *NullablePaymentDonationRequestPaymentMethod {
	return &NullablePaymentDonationRequestPaymentMethod{value: val, isSet: true}
}

func (v NullablePaymentDonationRequestPaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentDonationRequestPaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
