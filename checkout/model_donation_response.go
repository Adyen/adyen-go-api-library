/*
Adyen Checkout API

Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!

API version: 70
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"
)

// checks if the DonationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DonationResponse{}

// DonationResponse struct for DonationResponse
type DonationResponse struct {
	Amount *Amount `json:"amount,omitempty"`
	// The Adyen account name of your charity. We will provide you with this account name once your chosen charity has been [onboarded](https://docs.adyen.com/online-payments/donations#onboarding).
	DonationAccount *string `json:"donationAccount,omitempty"`
	// Your unique resource identifier.
	Id *string `json:"id,omitempty"`
	// The merchant account identifier, with which you want to process the transaction.
	MerchantAccount *string          `json:"merchantAccount,omitempty"`
	Payment         *PaymentResponse `json:"payment,omitempty"`
	// The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.
	Reference *string `json:"reference,omitempty"`
	// The status of the donation transaction.  Possible values: * **completed** * **pending** * **refused**
	Status *string `json:"status,omitempty"`
}

// NewDonationResponse instantiates a new DonationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDonationResponse() *DonationResponse {
	this := DonationResponse{}
	return &this
}

// NewDonationResponseWithDefaults instantiates a new DonationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDonationResponseWithDefaults() *DonationResponse {
	this := DonationResponse{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *DonationResponse) GetAmount() Amount {
	if o == nil || IsNil(o.Amount) {
		var ret Amount
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DonationResponse) GetAmountOk() (*Amount, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *DonationResponse) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given Amount and assigns it to the Amount field.
func (o *DonationResponse) SetAmount(v Amount) {
	o.Amount = &v
}

// GetDonationAccount returns the DonationAccount field value if set, zero value otherwise.
func (o *DonationResponse) GetDonationAccount() string {
	if o == nil || IsNil(o.DonationAccount) {
		var ret string
		return ret
	}
	return *o.DonationAccount
}

// GetDonationAccountOk returns a tuple with the DonationAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DonationResponse) GetDonationAccountOk() (*string, bool) {
	if o == nil || IsNil(o.DonationAccount) {
		return nil, false
	}
	return o.DonationAccount, true
}

// HasDonationAccount returns a boolean if a field has been set.
func (o *DonationResponse) HasDonationAccount() bool {
	if o != nil && !IsNil(o.DonationAccount) {
		return true
	}

	return false
}

// SetDonationAccount gets a reference to the given string and assigns it to the DonationAccount field.
func (o *DonationResponse) SetDonationAccount(v string) {
	o.DonationAccount = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DonationResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DonationResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DonationResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DonationResponse) SetId(v string) {
	o.Id = &v
}

// GetMerchantAccount returns the MerchantAccount field value if set, zero value otherwise.
func (o *DonationResponse) GetMerchantAccount() string {
	if o == nil || IsNil(o.MerchantAccount) {
		var ret string
		return ret
	}
	return *o.MerchantAccount
}

// GetMerchantAccountOk returns a tuple with the MerchantAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DonationResponse) GetMerchantAccountOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantAccount) {
		return nil, false
	}
	return o.MerchantAccount, true
}

// HasMerchantAccount returns a boolean if a field has been set.
func (o *DonationResponse) HasMerchantAccount() bool {
	if o != nil && !IsNil(o.MerchantAccount) {
		return true
	}

	return false
}

// SetMerchantAccount gets a reference to the given string and assigns it to the MerchantAccount field.
func (o *DonationResponse) SetMerchantAccount(v string) {
	o.MerchantAccount = &v
}

// GetPayment returns the Payment field value if set, zero value otherwise.
func (o *DonationResponse) GetPayment() PaymentResponse {
	if o == nil || IsNil(o.Payment) {
		var ret PaymentResponse
		return ret
	}
	return *o.Payment
}

// GetPaymentOk returns a tuple with the Payment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DonationResponse) GetPaymentOk() (*PaymentResponse, bool) {
	if o == nil || IsNil(o.Payment) {
		return nil, false
	}
	return o.Payment, true
}

// HasPayment returns a boolean if a field has been set.
func (o *DonationResponse) HasPayment() bool {
	if o != nil && !IsNil(o.Payment) {
		return true
	}

	return false
}

// SetPayment gets a reference to the given PaymentResponse and assigns it to the Payment field.
func (o *DonationResponse) SetPayment(v PaymentResponse) {
	o.Payment = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *DonationResponse) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DonationResponse) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *DonationResponse) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *DonationResponse) SetReference(v string) {
	o.Reference = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DonationResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DonationResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DonationResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DonationResponse) SetStatus(v string) {
	o.Status = &v
}

func (o DonationResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DonationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.DonationAccount) {
		toSerialize["donationAccount"] = o.DonationAccount
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MerchantAccount) {
		toSerialize["merchantAccount"] = o.MerchantAccount
	}
	if !IsNil(o.Payment) {
		toSerialize["payment"] = o.Payment
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableDonationResponse struct {
	value *DonationResponse
	isSet bool
}

func (v NullableDonationResponse) Get() *DonationResponse {
	return v.value
}

func (v *NullableDonationResponse) Set(val *DonationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDonationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDonationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDonationResponse(val *DonationResponse) *NullableDonationResponse {
	return &NullableDonationResponse{value: val, isSet: true}
}

func (v NullableDonationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDonationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func (o *DonationResponse) isValidStatus() bool {
	var allowedEnumValues = []string{"completed", "pending", "refused"}
	for _, allowed := range allowedEnumValues {
		if o.GetStatus() == allowed {
			return true
		}
	}
	return false
}
