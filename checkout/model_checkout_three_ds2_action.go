/*
Adyen Checkout API

Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!

API version: 70
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"
)

// checks if the CheckoutThreeDS2Action type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckoutThreeDS2Action{}

// CheckoutThreeDS2Action struct for CheckoutThreeDS2Action
type CheckoutThreeDS2Action struct {
	// A token needed to authorise a payment.
	AuthorisationToken *string `json:"authorisationToken,omitempty"`
	// A value that must be submitted to the `/payments/details` endpoint to verify this payment.
	PaymentData *string `json:"paymentData,omitempty"`
	// Specifies the payment method.
	PaymentMethodType *string `json:"paymentMethodType,omitempty"`
	// A subtype of the token.
	Subtype *string `json:"subtype,omitempty"`
	// A token to pass to the 3DS2 Component to get the fingerprint.
	Token *string `json:"token,omitempty"`
	// **threeDS2**
	Type string `json:"type"`
	// Specifies the URL to redirect to.
	Url *string `json:"url,omitempty"`
}

// NewCheckoutThreeDS2Action instantiates a new CheckoutThreeDS2Action object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckoutThreeDS2Action(type_ string) *CheckoutThreeDS2Action {
	this := CheckoutThreeDS2Action{}
	this.Type = type_
	return &this
}

// NewCheckoutThreeDS2ActionWithDefaults instantiates a new CheckoutThreeDS2Action object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckoutThreeDS2ActionWithDefaults() *CheckoutThreeDS2Action {
	this := CheckoutThreeDS2Action{}
	return &this
}

// GetAuthorisationToken returns the AuthorisationToken field value if set, zero value otherwise.
func (o *CheckoutThreeDS2Action) GetAuthorisationToken() string {
	if o == nil || IsNil(o.AuthorisationToken) {
		var ret string
		return ret
	}
	return *o.AuthorisationToken
}

// GetAuthorisationTokenOk returns a tuple with the AuthorisationToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutThreeDS2Action) GetAuthorisationTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorisationToken) {
		return nil, false
	}
	return o.AuthorisationToken, true
}

// HasAuthorisationToken returns a boolean if a field has been set.
func (o *CheckoutThreeDS2Action) HasAuthorisationToken() bool {
	if o != nil && !IsNil(o.AuthorisationToken) {
		return true
	}

	return false
}

// SetAuthorisationToken gets a reference to the given string and assigns it to the AuthorisationToken field.
func (o *CheckoutThreeDS2Action) SetAuthorisationToken(v string) {
	o.AuthorisationToken = &v
}

// GetPaymentData returns the PaymentData field value if set, zero value otherwise.
func (o *CheckoutThreeDS2Action) GetPaymentData() string {
	if o == nil || IsNil(o.PaymentData) {
		var ret string
		return ret
	}
	return *o.PaymentData
}

// GetPaymentDataOk returns a tuple with the PaymentData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutThreeDS2Action) GetPaymentDataOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentData) {
		return nil, false
	}
	return o.PaymentData, true
}

// HasPaymentData returns a boolean if a field has been set.
func (o *CheckoutThreeDS2Action) HasPaymentData() bool {
	if o != nil && !IsNil(o.PaymentData) {
		return true
	}

	return false
}

// SetPaymentData gets a reference to the given string and assigns it to the PaymentData field.
func (o *CheckoutThreeDS2Action) SetPaymentData(v string) {
	o.PaymentData = &v
}

// GetPaymentMethodType returns the PaymentMethodType field value if set, zero value otherwise.
func (o *CheckoutThreeDS2Action) GetPaymentMethodType() string {
	if o == nil || IsNil(o.PaymentMethodType) {
		var ret string
		return ret
	}
	return *o.PaymentMethodType
}

// GetPaymentMethodTypeOk returns a tuple with the PaymentMethodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutThreeDS2Action) GetPaymentMethodTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentMethodType) {
		return nil, false
	}
	return o.PaymentMethodType, true
}

// HasPaymentMethodType returns a boolean if a field has been set.
func (o *CheckoutThreeDS2Action) HasPaymentMethodType() bool {
	if o != nil && !IsNil(o.PaymentMethodType) {
		return true
	}

	return false
}

// SetPaymentMethodType gets a reference to the given string and assigns it to the PaymentMethodType field.
func (o *CheckoutThreeDS2Action) SetPaymentMethodType(v string) {
	o.PaymentMethodType = &v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *CheckoutThreeDS2Action) GetSubtype() string {
	if o == nil || IsNil(o.Subtype) {
		var ret string
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutThreeDS2Action) GetSubtypeOk() (*string, bool) {
	if o == nil || IsNil(o.Subtype) {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *CheckoutThreeDS2Action) HasSubtype() bool {
	if o != nil && !IsNil(o.Subtype) {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given string and assigns it to the Subtype field.
func (o *CheckoutThreeDS2Action) SetSubtype(v string) {
	o.Subtype = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *CheckoutThreeDS2Action) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutThreeDS2Action) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *CheckoutThreeDS2Action) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *CheckoutThreeDS2Action) SetToken(v string) {
	o.Token = &v
}

// GetType returns the Type field value
func (o *CheckoutThreeDS2Action) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CheckoutThreeDS2Action) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CheckoutThreeDS2Action) SetType(v string) {
	o.Type = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *CheckoutThreeDS2Action) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutThreeDS2Action) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *CheckoutThreeDS2Action) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *CheckoutThreeDS2Action) SetUrl(v string) {
	o.Url = &v
}

func (o CheckoutThreeDS2Action) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckoutThreeDS2Action) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthorisationToken) {
		toSerialize["authorisationToken"] = o.AuthorisationToken
	}
	if !IsNil(o.PaymentData) {
		toSerialize["paymentData"] = o.PaymentData
	}
	if !IsNil(o.PaymentMethodType) {
		toSerialize["paymentMethodType"] = o.PaymentMethodType
	}
	if !IsNil(o.Subtype) {
		toSerialize["subtype"] = o.Subtype
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableCheckoutThreeDS2Action struct {
	value *CheckoutThreeDS2Action
	isSet bool
}

func (v NullableCheckoutThreeDS2Action) Get() *CheckoutThreeDS2Action {
	return v.value
}

func (v *NullableCheckoutThreeDS2Action) Set(val *CheckoutThreeDS2Action) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckoutThreeDS2Action) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckoutThreeDS2Action) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckoutThreeDS2Action(val *CheckoutThreeDS2Action) *NullableCheckoutThreeDS2Action {
	return &NullableCheckoutThreeDS2Action{value: val, isSet: true}
}

func (v NullableCheckoutThreeDS2Action) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckoutThreeDS2Action) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
