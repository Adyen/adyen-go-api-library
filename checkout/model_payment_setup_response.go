/*
Adyen Checkout API

Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!

API version: 70
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"
)

// checks if the PaymentSetupResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentSetupResponse{}

// PaymentSetupResponse struct for PaymentSetupResponse
type PaymentSetupResponse struct {
	// The encoded payment session that you need to pass to the SDK.
	PaymentSession *string `json:"paymentSession,omitempty"`
	// The detailed list of stored payment details required to generate payment forms. Will be empty if oneClick is set to false in the request.
	// Deprecated
	RecurringDetails []RecurringDetail `json:"recurringDetails,omitempty"`
}

// NewPaymentSetupResponse instantiates a new PaymentSetupResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentSetupResponse() *PaymentSetupResponse {
	this := PaymentSetupResponse{}
	return &this
}

// NewPaymentSetupResponseWithDefaults instantiates a new PaymentSetupResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentSetupResponseWithDefaults() *PaymentSetupResponse {
	this := PaymentSetupResponse{}
	return &this
}

// GetPaymentSession returns the PaymentSession field value if set, zero value otherwise.
func (o *PaymentSetupResponse) GetPaymentSession() string {
	if o == nil || IsNil(o.PaymentSession) {
		var ret string
		return ret
	}
	return *o.PaymentSession
}

// GetPaymentSessionOk returns a tuple with the PaymentSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupResponse) GetPaymentSessionOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentSession) {
		return nil, false
	}
	return o.PaymentSession, true
}

// HasPaymentSession returns a boolean if a field has been set.
func (o *PaymentSetupResponse) HasPaymentSession() bool {
	if o != nil && !IsNil(o.PaymentSession) {
		return true
	}

	return false
}

// SetPaymentSession gets a reference to the given string and assigns it to the PaymentSession field.
func (o *PaymentSetupResponse) SetPaymentSession(v string) {
	o.PaymentSession = &v
}

// GetRecurringDetails returns the RecurringDetails field value if set, zero value otherwise.
// Deprecated
func (o *PaymentSetupResponse) GetRecurringDetails() []RecurringDetail {
	if o == nil || IsNil(o.RecurringDetails) {
		var ret []RecurringDetail
		return ret
	}
	return o.RecurringDetails
}

// GetRecurringDetailsOk returns a tuple with the RecurringDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PaymentSetupResponse) GetRecurringDetailsOk() ([]RecurringDetail, bool) {
	if o == nil || IsNil(o.RecurringDetails) {
		return nil, false
	}
	return o.RecurringDetails, true
}

// HasRecurringDetails returns a boolean if a field has been set.
func (o *PaymentSetupResponse) HasRecurringDetails() bool {
	if o != nil && !IsNil(o.RecurringDetails) {
		return true
	}

	return false
}

// SetRecurringDetails gets a reference to the given []RecurringDetail and assigns it to the RecurringDetails field.
// Deprecated
func (o *PaymentSetupResponse) SetRecurringDetails(v []RecurringDetail) {
	o.RecurringDetails = v
}

func (o PaymentSetupResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentSetupResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PaymentSession) {
		toSerialize["paymentSession"] = o.PaymentSession
	}
	if !IsNil(o.RecurringDetails) {
		toSerialize["recurringDetails"] = o.RecurringDetails
	}
	return toSerialize, nil
}

type NullablePaymentSetupResponse struct {
	value *PaymentSetupResponse
	isSet bool
}

func (v NullablePaymentSetupResponse) Get() *PaymentSetupResponse {
	return v.value
}

func (v *NullablePaymentSetupResponse) Set(val *PaymentSetupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentSetupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentSetupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentSetupResponse(val *PaymentSetupResponse) *NullablePaymentSetupResponse {
	return &NullablePaymentSetupResponse{value: val, isSet: true}
}

func (v NullablePaymentSetupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentSetupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
