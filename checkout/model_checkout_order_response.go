/*
Adyen Checkout API

Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!

API version: 70
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"
)

// checks if the CheckoutOrderResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckoutOrderResponse{}

// CheckoutOrderResponse struct for CheckoutOrderResponse
type CheckoutOrderResponse struct {
	Amount *Amount `json:"amount,omitempty"`
	// The expiry date for the order.
	ExpiresAt *string `json:"expiresAt,omitempty"`
	// The encrypted order data.
	OrderData *string `json:"orderData,omitempty"`
	// The `pspReference` that belongs to the order.
	PspReference string `json:"pspReference"`
	// The merchant reference for the order.
	Reference       *string `json:"reference,omitempty"`
	RemainingAmount *Amount `json:"remainingAmount,omitempty"`
}

// NewCheckoutOrderResponse instantiates a new CheckoutOrderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckoutOrderResponse(pspReference string) *CheckoutOrderResponse {
	this := CheckoutOrderResponse{}
	this.PspReference = pspReference
	return &this
}

// NewCheckoutOrderResponseWithDefaults instantiates a new CheckoutOrderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckoutOrderResponseWithDefaults() *CheckoutOrderResponse {
	this := CheckoutOrderResponse{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *CheckoutOrderResponse) GetAmount() Amount {
	if o == nil || IsNil(o.Amount) {
		var ret Amount
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutOrderResponse) GetAmountOk() (*Amount, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *CheckoutOrderResponse) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given Amount and assigns it to the Amount field.
func (o *CheckoutOrderResponse) SetAmount(v Amount) {
	o.Amount = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *CheckoutOrderResponse) GetExpiresAt() string {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutOrderResponse) GetExpiresAtOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *CheckoutOrderResponse) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *CheckoutOrderResponse) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

// GetOrderData returns the OrderData field value if set, zero value otherwise.
func (o *CheckoutOrderResponse) GetOrderData() string {
	if o == nil || IsNil(o.OrderData) {
		var ret string
		return ret
	}
	return *o.OrderData
}

// GetOrderDataOk returns a tuple with the OrderData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutOrderResponse) GetOrderDataOk() (*string, bool) {
	if o == nil || IsNil(o.OrderData) {
		return nil, false
	}
	return o.OrderData, true
}

// HasOrderData returns a boolean if a field has been set.
func (o *CheckoutOrderResponse) HasOrderData() bool {
	if o != nil && !IsNil(o.OrderData) {
		return true
	}

	return false
}

// SetOrderData gets a reference to the given string and assigns it to the OrderData field.
func (o *CheckoutOrderResponse) SetOrderData(v string) {
	o.OrderData = &v
}

// GetPspReference returns the PspReference field value
func (o *CheckoutOrderResponse) GetPspReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PspReference
}

// GetPspReferenceOk returns a tuple with the PspReference field value
// and a boolean to check if the value has been set.
func (o *CheckoutOrderResponse) GetPspReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PspReference, true
}

// SetPspReference sets field value
func (o *CheckoutOrderResponse) SetPspReference(v string) {
	o.PspReference = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *CheckoutOrderResponse) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutOrderResponse) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *CheckoutOrderResponse) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *CheckoutOrderResponse) SetReference(v string) {
	o.Reference = &v
}

// GetRemainingAmount returns the RemainingAmount field value if set, zero value otherwise.
func (o *CheckoutOrderResponse) GetRemainingAmount() Amount {
	if o == nil || IsNil(o.RemainingAmount) {
		var ret Amount
		return ret
	}
	return *o.RemainingAmount
}

// GetRemainingAmountOk returns a tuple with the RemainingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutOrderResponse) GetRemainingAmountOk() (*Amount, bool) {
	if o == nil || IsNil(o.RemainingAmount) {
		return nil, false
	}
	return o.RemainingAmount, true
}

// HasRemainingAmount returns a boolean if a field has been set.
func (o *CheckoutOrderResponse) HasRemainingAmount() bool {
	if o != nil && !IsNil(o.RemainingAmount) {
		return true
	}

	return false
}

// SetRemainingAmount gets a reference to the given Amount and assigns it to the RemainingAmount field.
func (o *CheckoutOrderResponse) SetRemainingAmount(v Amount) {
	o.RemainingAmount = &v
}

func (o CheckoutOrderResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckoutOrderResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	if !IsNil(o.OrderData) {
		toSerialize["orderData"] = o.OrderData
	}
	toSerialize["pspReference"] = o.PspReference
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.RemainingAmount) {
		toSerialize["remainingAmount"] = o.RemainingAmount
	}
	return toSerialize, nil
}

type NullableCheckoutOrderResponse struct {
	value *CheckoutOrderResponse
	isSet bool
}

func (v NullableCheckoutOrderResponse) Get() *CheckoutOrderResponse {
	return v.value
}

func (v *NullableCheckoutOrderResponse) Set(val *CheckoutOrderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckoutOrderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckoutOrderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckoutOrderResponse(val *CheckoutOrderResponse) *NullableCheckoutOrderResponse {
	return &NullableCheckoutOrderResponse{value: val, isSet: true}
}

func (v NullableCheckoutOrderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckoutOrderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
