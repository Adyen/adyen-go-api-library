/*
 * Adyen API
 *
 * Contact: support@adyen.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package resultcode

import (
	"bytes"
	"encoding/json"
)

// Enum struct for Enum
type Enum string

func (s Enum) String() string {
	return toString[s]
}

const (
	AuthenticationFinished    Enum = "AuthenticationFinished"
	AuthenticationNotRequired      = "AuthenticationNotRequired"
	Authorised                     = "Authorised"
	Cancelled                      = "Cancelled"
	ChallengeShopper               = "ChallengeShopper"
	Error                          = "Error"
	IdentifyShopper                = "IdentifyShopper"
	Pending                        = "Pending"
	PresentToShopper               = "PresentToShopper"
	Received                       = "Received"
	RedirectShopper                = "RedirectShopper"
	Refused                        = "Refused"
)

var toString = map[Enum]string{
	AuthenticationFinished:    "AuthenticationFinished",
	AuthenticationNotRequired: "AuthenticationNotRequired",
	Authorised:                "Authorised",
	Cancelled:                 "Cancelled",
	ChallengeShopper:          "ChallengeShopper",
	Error:                     "Error",
	IdentifyShopper:           "IdentifyShopper",
	Pending:                   "Pending",
	PresentToShopper:          "PresentToShopper",
	Received:                  "Received",
	RedirectShopper:           "RedirectShopper",
	Refused:                   "Refused",
}

var toID = map[string]Enum{
	"AuthenticationFinished":    AuthenticationFinished,
	"AuthenticationNotRequired": AuthenticationNotRequired,
	"Authorised":                Authorised,
	"Cancelled":                 Cancelled,
	"ChallengeShopper":          ChallengeShopper,
	"Error":                     Error,
	"IdentifyShopper":           IdentifyShopper,
	"Pending":                   Pending,
	"PresentToShopper":          PresentToShopper,
	"Received":                  Received,
	"RedirectShopper":           RedirectShopper,
	"Refused":                   Refused,
}

// MarshalJSON marshals the enum as a quoted json string
func (s Enum) MarshalJSON() ([]byte, error) {
	buffer := bytes.NewBufferString(`"`)
	buffer.WriteString(toString[s])
	buffer.WriteString(`"`)
	return buffer.Bytes(), nil
}

// UnmarshalJSON unmashals a quoted json string to the enum value
func (s *Enum) UnmarshalJSON(b []byte) error {
	var j string
	err := json.Unmarshal(b, &j)
	if err != nil {
		return err
	}
	// Note that if the string cannot be found then it will be set to the zero value, 'Created' in this case.
	*s = toID[j]
	return nil
}
