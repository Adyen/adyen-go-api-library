/*
Transfers API

API version: 4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transfers

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v21/src/common"
)

// checks if the ThreeDSecure type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &ThreeDSecure{}

// ThreeDSecure struct for ThreeDSecure
type ThreeDSecure struct {
	// The transaction identifier for the Access Control Server
	AcsTransactionId *string `json:"acsTransactionId,omitempty"`
}

// NewThreeDSecure instantiates a new ThreeDSecure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreeDSecure() *ThreeDSecure {
	this := ThreeDSecure{}
	return &this
}

// NewThreeDSecureWithDefaults instantiates a new ThreeDSecure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreeDSecureWithDefaults() *ThreeDSecure {
	this := ThreeDSecure{}
	return &this
}

// GetAcsTransactionId returns the AcsTransactionId field value if set, zero value otherwise.
func (o *ThreeDSecure) GetAcsTransactionId() string {
	if o == nil || common.IsNil(o.AcsTransactionId) {
		var ret string
		return ret
	}
	return *o.AcsTransactionId
}

// GetAcsTransactionIdOk returns a tuple with the AcsTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecure) GetAcsTransactionIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.AcsTransactionId) {
		return nil, false
	}
	return o.AcsTransactionId, true
}

// HasAcsTransactionId returns a boolean if a field has been set.
func (o *ThreeDSecure) HasAcsTransactionId() bool {
	if o != nil && !common.IsNil(o.AcsTransactionId) {
		return true
	}

	return false
}

// SetAcsTransactionId gets a reference to the given string and assigns it to the AcsTransactionId field.
func (o *ThreeDSecure) SetAcsTransactionId(v string) {
	o.AcsTransactionId = &v
}

func (o ThreeDSecure) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreeDSecure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.AcsTransactionId) {
		toSerialize["acsTransactionId"] = o.AcsTransactionId
	}
	return toSerialize, nil
}

type NullableThreeDSecure struct {
	value *ThreeDSecure
	isSet bool
}

func (v NullableThreeDSecure) Get() *ThreeDSecure {
	return v.value
}

func (v *NullableThreeDSecure) Set(val *ThreeDSecure) {
	v.value = val
	v.isSet = true
}

func (v NullableThreeDSecure) IsSet() bool {
	return v.isSet
}

func (v *NullableThreeDSecure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreeDSecure(val *ThreeDSecure) *NullableThreeDSecure {
	return &NullableThreeDSecure{value: val, isSet: true}
}

func (v NullableThreeDSecure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreeDSecure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
