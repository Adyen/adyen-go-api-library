/*
Transfers API

API version: 4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transfers

import (
	"encoding/json"
	"fmt"
)

// TransferCategoryData - The relevant data according to the transfer category.
type TransferCategoryData struct {
	BankCategoryData     *BankCategoryData
	InternalCategoryData *InternalCategoryData
	IssuedCard           *IssuedCard
	PlatformPayment      *PlatformPayment
}

// BankCategoryDataAsTransferCategoryData is a convenience function that returns BankCategoryData wrapped in TransferCategoryData
func BankCategoryDataAsTransferCategoryData(v *BankCategoryData) TransferCategoryData {
	return TransferCategoryData{
		BankCategoryData: v,
	}
}

// InternalCategoryDataAsTransferCategoryData is a convenience function that returns InternalCategoryData wrapped in TransferCategoryData
func InternalCategoryDataAsTransferCategoryData(v *InternalCategoryData) TransferCategoryData {
	return TransferCategoryData{
		InternalCategoryData: v,
	}
}

// IssuedCardAsTransferCategoryData is a convenience function that returns IssuedCard wrapped in TransferCategoryData
func IssuedCardAsTransferCategoryData(v *IssuedCard) TransferCategoryData {
	return TransferCategoryData{
		IssuedCard: v,
	}
}

// PlatformPaymentAsTransferCategoryData is a convenience function that returns PlatformPayment wrapped in TransferCategoryData
func PlatformPaymentAsTransferCategoryData(v *PlatformPayment) TransferCategoryData {
	return TransferCategoryData{
		PlatformPayment: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TransferCategoryData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BankCategoryData
	err = json.Unmarshal(data, &dst.BankCategoryData)
	if err == nil {
		jsonBankCategoryData, _ := json.Marshal(dst.BankCategoryData)
		if string(jsonBankCategoryData) == "{}" || !dst.BankCategoryData.isValidType() { // empty struct
			dst.BankCategoryData = nil
		} else {
			match++
		}
	} else {
		dst.BankCategoryData = nil
	}

	// try to unmarshal data into InternalCategoryData
	err = json.Unmarshal(data, &dst.InternalCategoryData)
	if err == nil {
		jsonInternalCategoryData, _ := json.Marshal(dst.InternalCategoryData)
		if string(jsonInternalCategoryData) == "{}" || !dst.InternalCategoryData.isValidType() { // empty struct
			dst.InternalCategoryData = nil
		} else {
			match++
		}
	} else {
		dst.InternalCategoryData = nil
	}

	// try to unmarshal data into IssuedCard
	err = json.Unmarshal(data, &dst.IssuedCard)
	if err == nil {
		jsonIssuedCard, _ := json.Marshal(dst.IssuedCard)
		if string(jsonIssuedCard) == "{}" || !dst.IssuedCard.isValidType() { // empty struct
			dst.IssuedCard = nil
		} else {
			match++
		}
	} else {
		dst.IssuedCard = nil
	}

	// try to unmarshal data into PlatformPayment
	err = json.Unmarshal(data, &dst.PlatformPayment)
	if err == nil {
		jsonPlatformPayment, _ := json.Marshal(dst.PlatformPayment)
		if string(jsonPlatformPayment) == "{}" || !dst.PlatformPayment.isValidType() { // empty struct
			dst.PlatformPayment = nil
		} else {
			match++
		}
	} else {
		dst.PlatformPayment = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BankCategoryData = nil
		dst.InternalCategoryData = nil
		dst.IssuedCard = nil
		dst.PlatformPayment = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TransferCategoryData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TransferCategoryData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransferCategoryData) MarshalJSON() ([]byte, error) {
	if src.BankCategoryData != nil {
		return json.Marshal(&src.BankCategoryData)
	}

	if src.InternalCategoryData != nil {
		return json.Marshal(&src.InternalCategoryData)
	}

	if src.IssuedCard != nil {
		return json.Marshal(&src.IssuedCard)
	}

	if src.PlatformPayment != nil {
		return json.Marshal(&src.PlatformPayment)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TransferCategoryData) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BankCategoryData != nil {
		return obj.BankCategoryData
	}

	if obj.InternalCategoryData != nil {
		return obj.InternalCategoryData
	}

	if obj.IssuedCard != nil {
		return obj.IssuedCard
	}

	if obj.PlatformPayment != nil {
		return obj.PlatformPayment
	}

	// all schemas are nil
	return nil
}

type NullableTransferCategoryData struct {
	value *TransferCategoryData
	isSet bool
}

func (v NullableTransferCategoryData) Get() *TransferCategoryData {
	return v.value
}

func (v *NullableTransferCategoryData) Set(val *TransferCategoryData) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferCategoryData) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferCategoryData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferCategoryData(val *TransferCategoryData) *NullableTransferCategoryData {
	return &NullableTransferCategoryData{value: val, isSet: true}
}

func (v NullableTransferCategoryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferCategoryData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
