/*
Transfers API

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transfers

import (
	"encoding/json"
	"time"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// checks if the Transaction type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &Transaction{}

// Transaction struct for Transaction
type Transaction struct {
	// Unique identifier of the account holder.
	AccountHolderId string `json:"accountHolderId"`
	Amount          Amount `json:"amount"`
	// Unique identifier of the balance account.
	BalanceAccountId string `json:"balanceAccountId"`
	// Unique identifier of the balance platform.
	BalancePlatform string `json:"balancePlatform"`
	// The date the transaction was booked to the balance account.
	BookingDate time.Time `json:"bookingDate"`
	// The category of the transaction indicating the type of activity.   Possible values:  * **platformPayment**: The transaction is a payment or payment modification made with an Adyen merchant account.  * **internal**: The transaction resulted from an internal adjustment such as a deposit correction or invoice deduction.  * **bank**: The transaction is a bank-related activity, such as sending a payout or receiving funds.  * **issuedCard**: The transaction is a card-related activity, such as using an Adyen-issued card to pay online.
	Category     *string        `json:"category,omitempty"`
	Counterparty CounterpartyV3 `json:"counterparty"`
	// The date the transaction was created.
	CreatedAt time.Time `json:"createdAt"`
	// The `description` from the `/transfers` request.
	Description *string `json:"description,omitempty"`
	// Unique identifier of the transaction.
	Id               string  `json:"id"`
	InstructedAmount *Amount `json:"instructedAmount,omitempty"`
	// Unique identifier of the payment instrument that was used for the transaction.
	PaymentInstrumentId *string `json:"paymentInstrumentId,omitempty"`
	// The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference.
	Reference string `json:"reference"`
	// The reference sent to or received from the counterparty.  * For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_referenceForBeneficiary) request.   * For incoming funds, this is the reference from the sender.
	ReferenceForBeneficiary *string `json:"referenceForBeneficiary,omitempty"`
	// The status of the transaction.   Possible values:  * **pending**: The transaction is still pending.  * **booked**: The transaction has been booked to the balance account.
	Status string `json:"status"`
	// Unique identifier of the related transfer.
	TransferId *string `json:"transferId,omitempty"`
	// The type of the transaction.   Possible values: **payment**, **capture**, **captureReversal**, **refund** **refundReversal**, **chargeback**, **chargebackReversal**, **secondChargeback**, **atmWithdrawal**, **atmWithdrawalReversal**, **internalTransfer**, **manualCorrection**, **invoiceDeduction**, **depositCorrection**, **bankTransfer**, **miscCost**, **paymentCost**, **fee**
	Type *string `json:"type,omitempty"`
	// The date the transfer amount becomes available in the balance account.
	ValueDate time.Time `json:"valueDate"`
}

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction(accountHolderId string, amount Amount, balanceAccountId string, balancePlatform string, bookingDate time.Time, counterparty CounterpartyV3, createdAt time.Time, id string, reference string, status string, valueDate time.Time) *Transaction {
	this := Transaction{}
	this.AccountHolderId = accountHolderId
	this.Amount = amount
	this.BalanceAccountId = balanceAccountId
	this.BalancePlatform = balancePlatform
	this.BookingDate = bookingDate
	this.Counterparty = counterparty
	this.CreatedAt = createdAt
	this.Id = id
	this.Reference = reference
	this.Status = status
	this.ValueDate = valueDate
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetAccountHolderId returns the AccountHolderId field value
func (o *Transaction) GetAccountHolderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountHolderId
}

// GetAccountHolderIdOk returns a tuple with the AccountHolderId field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetAccountHolderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountHolderId, true
}

// SetAccountHolderId sets field value
func (o *Transaction) SetAccountHolderId(v string) {
	o.AccountHolderId = v
}

// GetAmount returns the Amount field value
func (o *Transaction) GetAmount() Amount {
	if o == nil {
		var ret Amount
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetAmountOk() (*Amount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Transaction) SetAmount(v Amount) {
	o.Amount = v
}

// GetBalanceAccountId returns the BalanceAccountId field value
func (o *Transaction) GetBalanceAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BalanceAccountId
}

// GetBalanceAccountIdOk returns a tuple with the BalanceAccountId field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetBalanceAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BalanceAccountId, true
}

// SetBalanceAccountId sets field value
func (o *Transaction) SetBalanceAccountId(v string) {
	o.BalanceAccountId = v
}

// GetBalancePlatform returns the BalancePlatform field value
func (o *Transaction) GetBalancePlatform() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BalancePlatform
}

// GetBalancePlatformOk returns a tuple with the BalancePlatform field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetBalancePlatformOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BalancePlatform, true
}

// SetBalancePlatform sets field value
func (o *Transaction) SetBalancePlatform(v string) {
	o.BalancePlatform = v
}

// GetBookingDate returns the BookingDate field value
func (o *Transaction) GetBookingDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.BookingDate
}

// GetBookingDateOk returns a tuple with the BookingDate field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetBookingDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BookingDate, true
}

// SetBookingDate sets field value
func (o *Transaction) SetBookingDate(v time.Time) {
	o.BookingDate = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Transaction) GetCategory() string {
	if o == nil || common.IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCategoryOk() (*string, bool) {
	if o == nil || common.IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Transaction) HasCategory() bool {
	if o != nil && !common.IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *Transaction) SetCategory(v string) {
	o.Category = &v
}

// GetCounterparty returns the Counterparty field value
func (o *Transaction) GetCounterparty() CounterpartyV3 {
	if o == nil {
		var ret CounterpartyV3
		return ret
	}

	return o.Counterparty
}

// GetCounterpartyOk returns a tuple with the Counterparty field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetCounterpartyOk() (*CounterpartyV3, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Counterparty, true
}

// SetCounterparty sets field value
func (o *Transaction) SetCounterparty(v CounterpartyV3) {
	o.Counterparty = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Transaction) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Transaction) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Transaction) GetDescription() string {
	if o == nil || common.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetDescriptionOk() (*string, bool) {
	if o == nil || common.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Transaction) HasDescription() bool {
	if o != nil && !common.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Transaction) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value
func (o *Transaction) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Transaction) SetId(v string) {
	o.Id = v
}

// GetInstructedAmount returns the InstructedAmount field value if set, zero value otherwise.
func (o *Transaction) GetInstructedAmount() Amount {
	if o == nil || common.IsNil(o.InstructedAmount) {
		var ret Amount
		return ret
	}
	return *o.InstructedAmount
}

// GetInstructedAmountOk returns a tuple with the InstructedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetInstructedAmountOk() (*Amount, bool) {
	if o == nil || common.IsNil(o.InstructedAmount) {
		return nil, false
	}
	return o.InstructedAmount, true
}

// HasInstructedAmount returns a boolean if a field has been set.
func (o *Transaction) HasInstructedAmount() bool {
	if o != nil && !common.IsNil(o.InstructedAmount) {
		return true
	}

	return false
}

// SetInstructedAmount gets a reference to the given Amount and assigns it to the InstructedAmount field.
func (o *Transaction) SetInstructedAmount(v Amount) {
	o.InstructedAmount = &v
}

// GetPaymentInstrumentId returns the PaymentInstrumentId field value if set, zero value otherwise.
func (o *Transaction) GetPaymentInstrumentId() string {
	if o == nil || common.IsNil(o.PaymentInstrumentId) {
		var ret string
		return ret
	}
	return *o.PaymentInstrumentId
}

// GetPaymentInstrumentIdOk returns a tuple with the PaymentInstrumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetPaymentInstrumentIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.PaymentInstrumentId) {
		return nil, false
	}
	return o.PaymentInstrumentId, true
}

// HasPaymentInstrumentId returns a boolean if a field has been set.
func (o *Transaction) HasPaymentInstrumentId() bool {
	if o != nil && !common.IsNil(o.PaymentInstrumentId) {
		return true
	}

	return false
}

// SetPaymentInstrumentId gets a reference to the given string and assigns it to the PaymentInstrumentId field.
func (o *Transaction) SetPaymentInstrumentId(v string) {
	o.PaymentInstrumentId = &v
}

// GetReference returns the Reference field value
func (o *Transaction) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *Transaction) SetReference(v string) {
	o.Reference = v
}

// GetReferenceForBeneficiary returns the ReferenceForBeneficiary field value if set, zero value otherwise.
func (o *Transaction) GetReferenceForBeneficiary() string {
	if o == nil || common.IsNil(o.ReferenceForBeneficiary) {
		var ret string
		return ret
	}
	return *o.ReferenceForBeneficiary
}

// GetReferenceForBeneficiaryOk returns a tuple with the ReferenceForBeneficiary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetReferenceForBeneficiaryOk() (*string, bool) {
	if o == nil || common.IsNil(o.ReferenceForBeneficiary) {
		return nil, false
	}
	return o.ReferenceForBeneficiary, true
}

// HasReferenceForBeneficiary returns a boolean if a field has been set.
func (o *Transaction) HasReferenceForBeneficiary() bool {
	if o != nil && !common.IsNil(o.ReferenceForBeneficiary) {
		return true
	}

	return false
}

// SetReferenceForBeneficiary gets a reference to the given string and assigns it to the ReferenceForBeneficiary field.
func (o *Transaction) SetReferenceForBeneficiary(v string) {
	o.ReferenceForBeneficiary = &v
}

// GetStatus returns the Status field value
func (o *Transaction) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Transaction) SetStatus(v string) {
	o.Status = v
}

// GetTransferId returns the TransferId field value if set, zero value otherwise.
func (o *Transaction) GetTransferId() string {
	if o == nil || common.IsNil(o.TransferId) {
		var ret string
		return ret
	}
	return *o.TransferId
}

// GetTransferIdOk returns a tuple with the TransferId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransferIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.TransferId) {
		return nil, false
	}
	return o.TransferId, true
}

// HasTransferId returns a boolean if a field has been set.
func (o *Transaction) HasTransferId() bool {
	if o != nil && !common.IsNil(o.TransferId) {
		return true
	}

	return false
}

// SetTransferId gets a reference to the given string and assigns it to the TransferId field.
func (o *Transaction) SetTransferId(v string) {
	o.TransferId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Transaction) GetType() string {
	if o == nil || common.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTypeOk() (*string, bool) {
	if o == nil || common.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Transaction) HasType() bool {
	if o != nil && !common.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Transaction) SetType(v string) {
	o.Type = &v
}

// GetValueDate returns the ValueDate field value
func (o *Transaction) GetValueDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ValueDate
}

// GetValueDateOk returns a tuple with the ValueDate field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetValueDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueDate, true
}

// SetValueDate sets field value
func (o *Transaction) SetValueDate(v time.Time) {
	o.ValueDate = v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountHolderId"] = o.AccountHolderId
	toSerialize["amount"] = o.Amount
	toSerialize["balanceAccountId"] = o.BalanceAccountId
	toSerialize["balancePlatform"] = o.BalancePlatform
	toSerialize["bookingDate"] = o.BookingDate
	if !common.IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	toSerialize["counterparty"] = o.Counterparty
	toSerialize["createdAt"] = o.CreatedAt
	if !common.IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["id"] = o.Id
	if !common.IsNil(o.InstructedAmount) {
		toSerialize["instructedAmount"] = o.InstructedAmount
	}
	if !common.IsNil(o.PaymentInstrumentId) {
		toSerialize["paymentInstrumentId"] = o.PaymentInstrumentId
	}
	toSerialize["reference"] = o.Reference
	if !common.IsNil(o.ReferenceForBeneficiary) {
		toSerialize["referenceForBeneficiary"] = o.ReferenceForBeneficiary
	}
	toSerialize["status"] = o.Status
	if !common.IsNil(o.TransferId) {
		toSerialize["transferId"] = o.TransferId
	}
	if !common.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["valueDate"] = o.ValueDate
	return toSerialize, nil
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func (o *Transaction) isValidCategory() bool {
	var allowedEnumValues = []string{"bank", "grants", "internal", "issuedCard", "platformPayment"}
	for _, allowed := range allowedEnumValues {
		if o.GetCategory() == allowed {
			return true
		}
	}
	return false
}
func (o *Transaction) isValidStatus() bool {
	var allowedEnumValues = []string{"booked", "pending"}
	for _, allowed := range allowedEnumValues {
		if o.GetStatus() == allowed {
			return true
		}
	}
	return false
}
func (o *Transaction) isValidType() bool {
	var allowedEnumValues = []string{"atmWithdrawal", "atmWithdrawalReversal", "balanceAdjustment", "balanceRollover", "bankTransfer", "capture", "captureReversal", "chargeback", "chargebackReversal", "depositCorrection", "fee", "grant", "installment", "installmentReversal", "internalTransfer", "invoiceDeduction", "leftover", "manualCorrection", "miscCost", "payment", "paymentCost", "refund", "refundReversal", "repayment", "reserveAdjustment", "secondChargeback"}
	for _, allowed := range allowedEnumValues {
		if o.GetType() == allowed {
			return true
		}
	}
	return false
}
