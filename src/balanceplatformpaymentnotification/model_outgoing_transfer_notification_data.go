/*
Payment webhooks (deprecated)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package balanceplatformpaymentnotification

import (
	"encoding/json"
	"time"

	"github.com/adyen/adyen-go-api-library/v6/src/common"
)

// checks if the OutgoingTransferNotificationData type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &OutgoingTransferNotificationData{}

// OutgoingTransferNotificationData struct for OutgoingTransferNotificationData
type OutgoingTransferNotificationData struct {
	AccountHolder  *ResourceReference `json:"accountHolder,omitempty"`
	Amount         *Amount            `json:"amount,omitempty"`
	BalanceAccount *ResourceReference `json:"balanceAccount,omitempty"`
	// The unique identifier of the balance platform.
	BalancePlatform *string      `json:"balancePlatform,omitempty"`
	Counterparty    Counterparty `json:"counterparty"`
	// The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
	CreationDate *time.Time `json:"creationDate,omitempty"`
	// Your description for the transfer. If you send a description longer than 140 characters, the text is truncated.
	Description *string `json:"description,omitempty"`
	// The ID of the resource.
	Id             *string                       `json:"id,omitempty"`
	MerchantData   *MerchantData                 `json:"merchantData,omitempty"`
	Modification   *NotificationModificationData `json:"modification,omitempty"`
	OriginalAmount *Amount                       `json:"originalAmount,omitempty"`
	// The ID of the original payment authorisation, refund, or funds transfer request. Use this to trace the original request from the `balancePlatform.payment.created` webhook.
	PaymentId         *string            `json:"paymentId,omitempty"`
	PaymentInstrument *ResourceReference `json:"paymentInstrument,omitempty"`
	PlatformPayment   *PlatformPayment   `json:"platformPayment,omitempty"`
	// Contains information about how the payment was processed. Possible values: **atmWithdraw**, **balanceInquiry**, **ecommerce**, **moto**, **pos**, **purchaseWithCashback**, **recurring**, **token**, **unknown**.
	ProcessingType *string `json:"processingType,omitempty"`
	// Indicates the purpose of the outgoing transfer. Adyen sets this to:  * **payoutManual** when the transfer was triggered by a one-off payout using the [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) endpoint.   * **payoutSweep** when the transfer was triggered by a scheduled payout using [`sweepConfigurations`](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_sweepConfigurations).
	PurposeCode *string `json:"purposeCode,omitempty"`
	// The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference.
	Reference *string `json:"reference,omitempty"`
	// The reference sent to or received from the counterparty.  * For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) request.   * For incoming funds, this is the reference from the sender.
	ReferenceForBeneficiary  *string                   `json:"referenceForBeneficiary,omitempty"`
	RelayedAuthorisationData *RelayedAuthorisationData `json:"relayedAuthorisationData,omitempty"`
	// The event status. The possible values depend on the `type`.  * **Authorised**, **Refused**, or **Error** for type `balancePlatform.payment.created`   * **Expired** or **Cancelled** or **AuthAdjustmentAuthorised** or **AuthAdjustmentRefused** for type `balancePlatform.payment.updated`  * **PendingIncomingTransfer** for type `balancePlatform.incomingTransfer.created`   * **Refunded** or **IncomingTransfer** for type `balancePlatform.incomingTransfer.updated`   * **Captured** or **OutgoingTransfer** for type `balancePlatform.outgoingTransfer.created`  * **TransferConfirmed**, **TransferSentOut**, or **TransferFailed** for type `balancePlatform.outgoingTransfer.updated`
	Status                 *string                 `json:"status,omitempty"`
	TransactionRulesResult *TransactionRulesResult `json:"transactionRulesResult,omitempty"`
	// Indicates the expected settlement date of this transaction, in ISO 8601 extended format. For example, **2021-08-17T15:34:37+02:00**.
	ValueDate *time.Time `json:"valueDate,omitempty"`
}

// NewOutgoingTransferNotificationData instantiates a new OutgoingTransferNotificationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutgoingTransferNotificationData(counterparty Counterparty) *OutgoingTransferNotificationData {
	this := OutgoingTransferNotificationData{}
	this.Counterparty = counterparty
	return &this
}

// NewOutgoingTransferNotificationDataWithDefaults instantiates a new OutgoingTransferNotificationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutgoingTransferNotificationDataWithDefaults() *OutgoingTransferNotificationData {
	this := OutgoingTransferNotificationData{}
	return &this
}

// GetAccountHolder returns the AccountHolder field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetAccountHolder() ResourceReference {
	if o == nil || common.IsNil(o.AccountHolder) {
		var ret ResourceReference
		return ret
	}
	return *o.AccountHolder
}

// GetAccountHolderOk returns a tuple with the AccountHolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetAccountHolderOk() (*ResourceReference, bool) {
	if o == nil || common.IsNil(o.AccountHolder) {
		return nil, false
	}
	return o.AccountHolder, true
}

// HasAccountHolder returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasAccountHolder() bool {
	if o != nil && !common.IsNil(o.AccountHolder) {
		return true
	}

	return false
}

// SetAccountHolder gets a reference to the given ResourceReference and assigns it to the AccountHolder field.
func (o *OutgoingTransferNotificationData) SetAccountHolder(v ResourceReference) {
	o.AccountHolder = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetAmount() Amount {
	if o == nil || common.IsNil(o.Amount) {
		var ret Amount
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetAmountOk() (*Amount, bool) {
	if o == nil || common.IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasAmount() bool {
	if o != nil && !common.IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given Amount and assigns it to the Amount field.
func (o *OutgoingTransferNotificationData) SetAmount(v Amount) {
	o.Amount = &v
}

// GetBalanceAccount returns the BalanceAccount field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetBalanceAccount() ResourceReference {
	if o == nil || common.IsNil(o.BalanceAccount) {
		var ret ResourceReference
		return ret
	}
	return *o.BalanceAccount
}

// GetBalanceAccountOk returns a tuple with the BalanceAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetBalanceAccountOk() (*ResourceReference, bool) {
	if o == nil || common.IsNil(o.BalanceAccount) {
		return nil, false
	}
	return o.BalanceAccount, true
}

// HasBalanceAccount returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasBalanceAccount() bool {
	if o != nil && !common.IsNil(o.BalanceAccount) {
		return true
	}

	return false
}

// SetBalanceAccount gets a reference to the given ResourceReference and assigns it to the BalanceAccount field.
func (o *OutgoingTransferNotificationData) SetBalanceAccount(v ResourceReference) {
	o.BalanceAccount = &v
}

// GetBalancePlatform returns the BalancePlatform field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetBalancePlatform() string {
	if o == nil || common.IsNil(o.BalancePlatform) {
		var ret string
		return ret
	}
	return *o.BalancePlatform
}

// GetBalancePlatformOk returns a tuple with the BalancePlatform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetBalancePlatformOk() (*string, bool) {
	if o == nil || common.IsNil(o.BalancePlatform) {
		return nil, false
	}
	return o.BalancePlatform, true
}

// HasBalancePlatform returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasBalancePlatform() bool {
	if o != nil && !common.IsNil(o.BalancePlatform) {
		return true
	}

	return false
}

// SetBalancePlatform gets a reference to the given string and assigns it to the BalancePlatform field.
func (o *OutgoingTransferNotificationData) SetBalancePlatform(v string) {
	o.BalancePlatform = &v
}

// GetCounterparty returns the Counterparty field value
func (o *OutgoingTransferNotificationData) GetCounterparty() Counterparty {
	if o == nil {
		var ret Counterparty
		return ret
	}

	return o.Counterparty
}

// GetCounterpartyOk returns a tuple with the Counterparty field value
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetCounterpartyOk() (*Counterparty, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Counterparty, true
}

// SetCounterparty sets field value
func (o *OutgoingTransferNotificationData) SetCounterparty(v Counterparty) {
	o.Counterparty = v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetCreationDate() time.Time {
	if o == nil || common.IsNil(o.CreationDate) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || common.IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasCreationDate() bool {
	if o != nil && !common.IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *OutgoingTransferNotificationData) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetDescription() string {
	if o == nil || common.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetDescriptionOk() (*string, bool) {
	if o == nil || common.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasDescription() bool {
	if o != nil && !common.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OutgoingTransferNotificationData) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetId() string {
	if o == nil || common.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasId() bool {
	if o != nil && !common.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OutgoingTransferNotificationData) SetId(v string) {
	o.Id = &v
}

// GetMerchantData returns the MerchantData field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetMerchantData() MerchantData {
	if o == nil || common.IsNil(o.MerchantData) {
		var ret MerchantData
		return ret
	}
	return *o.MerchantData
}

// GetMerchantDataOk returns a tuple with the MerchantData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetMerchantDataOk() (*MerchantData, bool) {
	if o == nil || common.IsNil(o.MerchantData) {
		return nil, false
	}
	return o.MerchantData, true
}

// HasMerchantData returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasMerchantData() bool {
	if o != nil && !common.IsNil(o.MerchantData) {
		return true
	}

	return false
}

// SetMerchantData gets a reference to the given MerchantData and assigns it to the MerchantData field.
func (o *OutgoingTransferNotificationData) SetMerchantData(v MerchantData) {
	o.MerchantData = &v
}

// GetModification returns the Modification field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetModification() NotificationModificationData {
	if o == nil || common.IsNil(o.Modification) {
		var ret NotificationModificationData
		return ret
	}
	return *o.Modification
}

// GetModificationOk returns a tuple with the Modification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetModificationOk() (*NotificationModificationData, bool) {
	if o == nil || common.IsNil(o.Modification) {
		return nil, false
	}
	return o.Modification, true
}

// HasModification returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasModification() bool {
	if o != nil && !common.IsNil(o.Modification) {
		return true
	}

	return false
}

// SetModification gets a reference to the given NotificationModificationData and assigns it to the Modification field.
func (o *OutgoingTransferNotificationData) SetModification(v NotificationModificationData) {
	o.Modification = &v
}

// GetOriginalAmount returns the OriginalAmount field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetOriginalAmount() Amount {
	if o == nil || common.IsNil(o.OriginalAmount) {
		var ret Amount
		return ret
	}
	return *o.OriginalAmount
}

// GetOriginalAmountOk returns a tuple with the OriginalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetOriginalAmountOk() (*Amount, bool) {
	if o == nil || common.IsNil(o.OriginalAmount) {
		return nil, false
	}
	return o.OriginalAmount, true
}

// HasOriginalAmount returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasOriginalAmount() bool {
	if o != nil && !common.IsNil(o.OriginalAmount) {
		return true
	}

	return false
}

// SetOriginalAmount gets a reference to the given Amount and assigns it to the OriginalAmount field.
func (o *OutgoingTransferNotificationData) SetOriginalAmount(v Amount) {
	o.OriginalAmount = &v
}

// GetPaymentId returns the PaymentId field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetPaymentId() string {
	if o == nil || common.IsNil(o.PaymentId) {
		var ret string
		return ret
	}
	return *o.PaymentId
}

// GetPaymentIdOk returns a tuple with the PaymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetPaymentIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.PaymentId) {
		return nil, false
	}
	return o.PaymentId, true
}

// HasPaymentId returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasPaymentId() bool {
	if o != nil && !common.IsNil(o.PaymentId) {
		return true
	}

	return false
}

// SetPaymentId gets a reference to the given string and assigns it to the PaymentId field.
func (o *OutgoingTransferNotificationData) SetPaymentId(v string) {
	o.PaymentId = &v
}

// GetPaymentInstrument returns the PaymentInstrument field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetPaymentInstrument() ResourceReference {
	if o == nil || common.IsNil(o.PaymentInstrument) {
		var ret ResourceReference
		return ret
	}
	return *o.PaymentInstrument
}

// GetPaymentInstrumentOk returns a tuple with the PaymentInstrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetPaymentInstrumentOk() (*ResourceReference, bool) {
	if o == nil || common.IsNil(o.PaymentInstrument) {
		return nil, false
	}
	return o.PaymentInstrument, true
}

// HasPaymentInstrument returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasPaymentInstrument() bool {
	if o != nil && !common.IsNil(o.PaymentInstrument) {
		return true
	}

	return false
}

// SetPaymentInstrument gets a reference to the given ResourceReference and assigns it to the PaymentInstrument field.
func (o *OutgoingTransferNotificationData) SetPaymentInstrument(v ResourceReference) {
	o.PaymentInstrument = &v
}

// GetPlatformPayment returns the PlatformPayment field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetPlatformPayment() PlatformPayment {
	if o == nil || common.IsNil(o.PlatformPayment) {
		var ret PlatformPayment
		return ret
	}
	return *o.PlatformPayment
}

// GetPlatformPaymentOk returns a tuple with the PlatformPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetPlatformPaymentOk() (*PlatformPayment, bool) {
	if o == nil || common.IsNil(o.PlatformPayment) {
		return nil, false
	}
	return o.PlatformPayment, true
}

// HasPlatformPayment returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasPlatformPayment() bool {
	if o != nil && !common.IsNil(o.PlatformPayment) {
		return true
	}

	return false
}

// SetPlatformPayment gets a reference to the given PlatformPayment and assigns it to the PlatformPayment field.
func (o *OutgoingTransferNotificationData) SetPlatformPayment(v PlatformPayment) {
	o.PlatformPayment = &v
}

// GetProcessingType returns the ProcessingType field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetProcessingType() string {
	if o == nil || common.IsNil(o.ProcessingType) {
		var ret string
		return ret
	}
	return *o.ProcessingType
}

// GetProcessingTypeOk returns a tuple with the ProcessingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetProcessingTypeOk() (*string, bool) {
	if o == nil || common.IsNil(o.ProcessingType) {
		return nil, false
	}
	return o.ProcessingType, true
}

// HasProcessingType returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasProcessingType() bool {
	if o != nil && !common.IsNil(o.ProcessingType) {
		return true
	}

	return false
}

// SetProcessingType gets a reference to the given string and assigns it to the ProcessingType field.
func (o *OutgoingTransferNotificationData) SetProcessingType(v string) {
	o.ProcessingType = &v
}

// GetPurposeCode returns the PurposeCode field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetPurposeCode() string {
	if o == nil || common.IsNil(o.PurposeCode) {
		var ret string
		return ret
	}
	return *o.PurposeCode
}

// GetPurposeCodeOk returns a tuple with the PurposeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetPurposeCodeOk() (*string, bool) {
	if o == nil || common.IsNil(o.PurposeCode) {
		return nil, false
	}
	return o.PurposeCode, true
}

// HasPurposeCode returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasPurposeCode() bool {
	if o != nil && !common.IsNil(o.PurposeCode) {
		return true
	}

	return false
}

// SetPurposeCode gets a reference to the given string and assigns it to the PurposeCode field.
func (o *OutgoingTransferNotificationData) SetPurposeCode(v string) {
	o.PurposeCode = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetReference() string {
	if o == nil || common.IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasReference() bool {
	if o != nil && !common.IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *OutgoingTransferNotificationData) SetReference(v string) {
	o.Reference = &v
}

// GetReferenceForBeneficiary returns the ReferenceForBeneficiary field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetReferenceForBeneficiary() string {
	if o == nil || common.IsNil(o.ReferenceForBeneficiary) {
		var ret string
		return ret
	}
	return *o.ReferenceForBeneficiary
}

// GetReferenceForBeneficiaryOk returns a tuple with the ReferenceForBeneficiary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetReferenceForBeneficiaryOk() (*string, bool) {
	if o == nil || common.IsNil(o.ReferenceForBeneficiary) {
		return nil, false
	}
	return o.ReferenceForBeneficiary, true
}

// HasReferenceForBeneficiary returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasReferenceForBeneficiary() bool {
	if o != nil && !common.IsNil(o.ReferenceForBeneficiary) {
		return true
	}

	return false
}

// SetReferenceForBeneficiary gets a reference to the given string and assigns it to the ReferenceForBeneficiary field.
func (o *OutgoingTransferNotificationData) SetReferenceForBeneficiary(v string) {
	o.ReferenceForBeneficiary = &v
}

// GetRelayedAuthorisationData returns the RelayedAuthorisationData field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetRelayedAuthorisationData() RelayedAuthorisationData {
	if o == nil || common.IsNil(o.RelayedAuthorisationData) {
		var ret RelayedAuthorisationData
		return ret
	}
	return *o.RelayedAuthorisationData
}

// GetRelayedAuthorisationDataOk returns a tuple with the RelayedAuthorisationData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetRelayedAuthorisationDataOk() (*RelayedAuthorisationData, bool) {
	if o == nil || common.IsNil(o.RelayedAuthorisationData) {
		return nil, false
	}
	return o.RelayedAuthorisationData, true
}

// HasRelayedAuthorisationData returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasRelayedAuthorisationData() bool {
	if o != nil && !common.IsNil(o.RelayedAuthorisationData) {
		return true
	}

	return false
}

// SetRelayedAuthorisationData gets a reference to the given RelayedAuthorisationData and assigns it to the RelayedAuthorisationData field.
func (o *OutgoingTransferNotificationData) SetRelayedAuthorisationData(v RelayedAuthorisationData) {
	o.RelayedAuthorisationData = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetStatus() string {
	if o == nil || common.IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetStatusOk() (*string, bool) {
	if o == nil || common.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasStatus() bool {
	if o != nil && !common.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *OutgoingTransferNotificationData) SetStatus(v string) {
	o.Status = &v
}

// GetTransactionRulesResult returns the TransactionRulesResult field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetTransactionRulesResult() TransactionRulesResult {
	if o == nil || common.IsNil(o.TransactionRulesResult) {
		var ret TransactionRulesResult
		return ret
	}
	return *o.TransactionRulesResult
}

// GetTransactionRulesResultOk returns a tuple with the TransactionRulesResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetTransactionRulesResultOk() (*TransactionRulesResult, bool) {
	if o == nil || common.IsNil(o.TransactionRulesResult) {
		return nil, false
	}
	return o.TransactionRulesResult, true
}

// HasTransactionRulesResult returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasTransactionRulesResult() bool {
	if o != nil && !common.IsNil(o.TransactionRulesResult) {
		return true
	}

	return false
}

// SetTransactionRulesResult gets a reference to the given TransactionRulesResult and assigns it to the TransactionRulesResult field.
func (o *OutgoingTransferNotificationData) SetTransactionRulesResult(v TransactionRulesResult) {
	o.TransactionRulesResult = &v
}

// GetValueDate returns the ValueDate field value if set, zero value otherwise.
func (o *OutgoingTransferNotificationData) GetValueDate() time.Time {
	if o == nil || common.IsNil(o.ValueDate) {
		var ret time.Time
		return ret
	}
	return *o.ValueDate
}

// GetValueDateOk returns a tuple with the ValueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingTransferNotificationData) GetValueDateOk() (*time.Time, bool) {
	if o == nil || common.IsNil(o.ValueDate) {
		return nil, false
	}
	return o.ValueDate, true
}

// HasValueDate returns a boolean if a field has been set.
func (o *OutgoingTransferNotificationData) HasValueDate() bool {
	if o != nil && !common.IsNil(o.ValueDate) {
		return true
	}

	return false
}

// SetValueDate gets a reference to the given time.Time and assigns it to the ValueDate field.
func (o *OutgoingTransferNotificationData) SetValueDate(v time.Time) {
	o.ValueDate = &v
}

func (o OutgoingTransferNotificationData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutgoingTransferNotificationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.AccountHolder) {
		toSerialize["accountHolder"] = o.AccountHolder
	}
	if !common.IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !common.IsNil(o.BalanceAccount) {
		toSerialize["balanceAccount"] = o.BalanceAccount
	}
	if !common.IsNil(o.BalancePlatform) {
		toSerialize["balancePlatform"] = o.BalancePlatform
	}
	toSerialize["counterparty"] = o.Counterparty
	if !common.IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !common.IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !common.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !common.IsNil(o.MerchantData) {
		toSerialize["merchantData"] = o.MerchantData
	}
	if !common.IsNil(o.Modification) {
		toSerialize["modification"] = o.Modification
	}
	if !common.IsNil(o.OriginalAmount) {
		toSerialize["originalAmount"] = o.OriginalAmount
	}
	if !common.IsNil(o.PaymentId) {
		toSerialize["paymentId"] = o.PaymentId
	}
	if !common.IsNil(o.PaymentInstrument) {
		toSerialize["paymentInstrument"] = o.PaymentInstrument
	}
	if !common.IsNil(o.PlatformPayment) {
		toSerialize["platformPayment"] = o.PlatformPayment
	}
	if !common.IsNil(o.ProcessingType) {
		toSerialize["processingType"] = o.ProcessingType
	}
	if !common.IsNil(o.PurposeCode) {
		toSerialize["purposeCode"] = o.PurposeCode
	}
	if !common.IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !common.IsNil(o.ReferenceForBeneficiary) {
		toSerialize["referenceForBeneficiary"] = o.ReferenceForBeneficiary
	}
	if !common.IsNil(o.RelayedAuthorisationData) {
		toSerialize["relayedAuthorisationData"] = o.RelayedAuthorisationData
	}
	if !common.IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !common.IsNil(o.TransactionRulesResult) {
		toSerialize["transactionRulesResult"] = o.TransactionRulesResult
	}
	if !common.IsNil(o.ValueDate) {
		toSerialize["valueDate"] = o.ValueDate
	}
	return toSerialize, nil
}

type NullableOutgoingTransferNotificationData struct {
	value *OutgoingTransferNotificationData
	isSet bool
}

func (v NullableOutgoingTransferNotificationData) Get() *OutgoingTransferNotificationData {
	return v.value
}

func (v *NullableOutgoingTransferNotificationData) Set(val *OutgoingTransferNotificationData) {
	v.value = val
	v.isSet = true
}

func (v NullableOutgoingTransferNotificationData) IsSet() bool {
	return v.isSet
}

func (v *NullableOutgoingTransferNotificationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutgoingTransferNotificationData(val *OutgoingTransferNotificationData) *NullableOutgoingTransferNotificationData {
	return &NullableOutgoingTransferNotificationData{value: val, isSet: true}
}

func (v NullableOutgoingTransferNotificationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutgoingTransferNotificationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func (o *OutgoingTransferNotificationData) isValidProcessingType() bool {
	var allowedEnumValues = []string{"atmWithdraw", "balanceInquiry", "ecommerce", "moto", "pos", "purchaseWithCashback", "recurring", "token", "unknown"}
	for _, allowed := range allowedEnumValues {
		if o.GetProcessingType() == allowed {
			return true
		}
	}
	return false
}
