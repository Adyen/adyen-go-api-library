/*
Payment webhooks (deprecated)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package balanceplatformpaymentnotification

import (
	"encoding/json"
	"time"

	"github.com/adyen/adyen-go-api-library/v6/src/common"
)

// checks if the IncomingTransferNotificationData type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &IncomingTransferNotificationData{}

// IncomingTransferNotificationData struct for IncomingTransferNotificationData
type IncomingTransferNotificationData struct {
	AccountHolder  *ResourceReference `json:"accountHolder,omitempty"`
	Amount         *Amount            `json:"amount,omitempty"`
	BalanceAccount *ResourceReference `json:"balanceAccount,omitempty"`
	// The unique identifier of the balance platform.
	BalancePlatform *string       `json:"balancePlatform,omitempty"`
	Counterparty    *Counterparty `json:"counterparty,omitempty"`
	// The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
	CreationDate *time.Time `json:"creationDate,omitempty"`
	// Your description for the transfer. If you send a description longer than 140 characters, the text is truncated.
	Description *string `json:"description,omitempty"`
	// The ID of the resource.
	Id             *string                       `json:"id,omitempty"`
	Modification   *NotificationModificationData `json:"modification,omitempty"`
	OriginalAmount *Amount                       `json:"originalAmount,omitempty"`
	// The ID of the original payment authorisation, refund, or funds transfer request. Use this to trace the original request from the `balancePlatform.payment.created` webhook.
	PaymentId         *string            `json:"paymentId,omitempty"`
	PaymentInstrument *ResourceReference `json:"paymentInstrument,omitempty"`
	PlatformPayment   *PlatformPayment   `json:"platformPayment,omitempty"`
	// An Adyen-generated unique reference for the transfer.
	Reference *string `json:"reference,omitempty"`
	// The reference sent to or received from the counterparty.  * For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) request.   * For incoming funds, this is the reference from the sender.
	ReferenceForBeneficiary *string `json:"referenceForBeneficiary,omitempty"`
	// The event status. The possible values depend on the `type`.  * **Authorised**, **Refused**, or **Error** for type `balancePlatform.payment.created`   * **Expired** or **Cancelled** or **AuthAdjustmentAuthorised** or **AuthAdjustmentRefused** for type `balancePlatform.payment.updated`  * **PendingIncomingTransfer** for type `balancePlatform.incomingTransfer.created`   * **Refunded** or **IncomingTransfer** for type `balancePlatform.incomingTransfer.updated`   * **Captured** or **OutgoingTransfer** for type `balancePlatform.outgoingTransfer.created`  * **TransferConfirmed**, **TransferSentOut**, or **TransferFailed** for type `balancePlatform.outgoingTransfer.updated`
	Status *string `json:"status,omitempty"`
	// Indicates the expected settlement date of this transaction, in ISO 8601 extended format. For example, **2021-08-17T15:34:37+02:00**.
	ValueDate *time.Time `json:"valueDate,omitempty"`
}

// NewIncomingTransferNotificationData instantiates a new IncomingTransferNotificationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncomingTransferNotificationData() *IncomingTransferNotificationData {
	this := IncomingTransferNotificationData{}
	return &this
}

// NewIncomingTransferNotificationDataWithDefaults instantiates a new IncomingTransferNotificationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncomingTransferNotificationDataWithDefaults() *IncomingTransferNotificationData {
	this := IncomingTransferNotificationData{}
	return &this
}

// GetAccountHolder returns the AccountHolder field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetAccountHolder() ResourceReference {
	if o == nil || common.IsNil(o.AccountHolder) {
		var ret ResourceReference
		return ret
	}
	return *o.AccountHolder
}

// GetAccountHolderOk returns a tuple with the AccountHolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetAccountHolderOk() (*ResourceReference, bool) {
	if o == nil || common.IsNil(o.AccountHolder) {
		return nil, false
	}
	return o.AccountHolder, true
}

// HasAccountHolder returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasAccountHolder() bool {
	if o != nil && !common.IsNil(o.AccountHolder) {
		return true
	}

	return false
}

// SetAccountHolder gets a reference to the given ResourceReference and assigns it to the AccountHolder field.
func (o *IncomingTransferNotificationData) SetAccountHolder(v ResourceReference) {
	o.AccountHolder = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetAmount() Amount {
	if o == nil || common.IsNil(o.Amount) {
		var ret Amount
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetAmountOk() (*Amount, bool) {
	if o == nil || common.IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasAmount() bool {
	if o != nil && !common.IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given Amount and assigns it to the Amount field.
func (o *IncomingTransferNotificationData) SetAmount(v Amount) {
	o.Amount = &v
}

// GetBalanceAccount returns the BalanceAccount field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetBalanceAccount() ResourceReference {
	if o == nil || common.IsNil(o.BalanceAccount) {
		var ret ResourceReference
		return ret
	}
	return *o.BalanceAccount
}

// GetBalanceAccountOk returns a tuple with the BalanceAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetBalanceAccountOk() (*ResourceReference, bool) {
	if o == nil || common.IsNil(o.BalanceAccount) {
		return nil, false
	}
	return o.BalanceAccount, true
}

// HasBalanceAccount returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasBalanceAccount() bool {
	if o != nil && !common.IsNil(o.BalanceAccount) {
		return true
	}

	return false
}

// SetBalanceAccount gets a reference to the given ResourceReference and assigns it to the BalanceAccount field.
func (o *IncomingTransferNotificationData) SetBalanceAccount(v ResourceReference) {
	o.BalanceAccount = &v
}

// GetBalancePlatform returns the BalancePlatform field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetBalancePlatform() string {
	if o == nil || common.IsNil(o.BalancePlatform) {
		var ret string
		return ret
	}
	return *o.BalancePlatform
}

// GetBalancePlatformOk returns a tuple with the BalancePlatform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetBalancePlatformOk() (*string, bool) {
	if o == nil || common.IsNil(o.BalancePlatform) {
		return nil, false
	}
	return o.BalancePlatform, true
}

// HasBalancePlatform returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasBalancePlatform() bool {
	if o != nil && !common.IsNil(o.BalancePlatform) {
		return true
	}

	return false
}

// SetBalancePlatform gets a reference to the given string and assigns it to the BalancePlatform field.
func (o *IncomingTransferNotificationData) SetBalancePlatform(v string) {
	o.BalancePlatform = &v
}

// GetCounterparty returns the Counterparty field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetCounterparty() Counterparty {
	if o == nil || common.IsNil(o.Counterparty) {
		var ret Counterparty
		return ret
	}
	return *o.Counterparty
}

// GetCounterpartyOk returns a tuple with the Counterparty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetCounterpartyOk() (*Counterparty, bool) {
	if o == nil || common.IsNil(o.Counterparty) {
		return nil, false
	}
	return o.Counterparty, true
}

// HasCounterparty returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasCounterparty() bool {
	if o != nil && !common.IsNil(o.Counterparty) {
		return true
	}

	return false
}

// SetCounterparty gets a reference to the given Counterparty and assigns it to the Counterparty field.
func (o *IncomingTransferNotificationData) SetCounterparty(v Counterparty) {
	o.Counterparty = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetCreationDate() time.Time {
	if o == nil || common.IsNil(o.CreationDate) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || common.IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasCreationDate() bool {
	if o != nil && !common.IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *IncomingTransferNotificationData) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetDescription() string {
	if o == nil || common.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetDescriptionOk() (*string, bool) {
	if o == nil || common.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasDescription() bool {
	if o != nil && !common.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IncomingTransferNotificationData) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetId() string {
	if o == nil || common.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasId() bool {
	if o != nil && !common.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IncomingTransferNotificationData) SetId(v string) {
	o.Id = &v
}

// GetModification returns the Modification field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetModification() NotificationModificationData {
	if o == nil || common.IsNil(o.Modification) {
		var ret NotificationModificationData
		return ret
	}
	return *o.Modification
}

// GetModificationOk returns a tuple with the Modification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetModificationOk() (*NotificationModificationData, bool) {
	if o == nil || common.IsNil(o.Modification) {
		return nil, false
	}
	return o.Modification, true
}

// HasModification returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasModification() bool {
	if o != nil && !common.IsNil(o.Modification) {
		return true
	}

	return false
}

// SetModification gets a reference to the given NotificationModificationData and assigns it to the Modification field.
func (o *IncomingTransferNotificationData) SetModification(v NotificationModificationData) {
	o.Modification = &v
}

// GetOriginalAmount returns the OriginalAmount field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetOriginalAmount() Amount {
	if o == nil || common.IsNil(o.OriginalAmount) {
		var ret Amount
		return ret
	}
	return *o.OriginalAmount
}

// GetOriginalAmountOk returns a tuple with the OriginalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetOriginalAmountOk() (*Amount, bool) {
	if o == nil || common.IsNil(o.OriginalAmount) {
		return nil, false
	}
	return o.OriginalAmount, true
}

// HasOriginalAmount returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasOriginalAmount() bool {
	if o != nil && !common.IsNil(o.OriginalAmount) {
		return true
	}

	return false
}

// SetOriginalAmount gets a reference to the given Amount and assigns it to the OriginalAmount field.
func (o *IncomingTransferNotificationData) SetOriginalAmount(v Amount) {
	o.OriginalAmount = &v
}

// GetPaymentId returns the PaymentId field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetPaymentId() string {
	if o == nil || common.IsNil(o.PaymentId) {
		var ret string
		return ret
	}
	return *o.PaymentId
}

// GetPaymentIdOk returns a tuple with the PaymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetPaymentIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.PaymentId) {
		return nil, false
	}
	return o.PaymentId, true
}

// HasPaymentId returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasPaymentId() bool {
	if o != nil && !common.IsNil(o.PaymentId) {
		return true
	}

	return false
}

// SetPaymentId gets a reference to the given string and assigns it to the PaymentId field.
func (o *IncomingTransferNotificationData) SetPaymentId(v string) {
	o.PaymentId = &v
}

// GetPaymentInstrument returns the PaymentInstrument field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetPaymentInstrument() ResourceReference {
	if o == nil || common.IsNil(o.PaymentInstrument) {
		var ret ResourceReference
		return ret
	}
	return *o.PaymentInstrument
}

// GetPaymentInstrumentOk returns a tuple with the PaymentInstrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetPaymentInstrumentOk() (*ResourceReference, bool) {
	if o == nil || common.IsNil(o.PaymentInstrument) {
		return nil, false
	}
	return o.PaymentInstrument, true
}

// HasPaymentInstrument returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasPaymentInstrument() bool {
	if o != nil && !common.IsNil(o.PaymentInstrument) {
		return true
	}

	return false
}

// SetPaymentInstrument gets a reference to the given ResourceReference and assigns it to the PaymentInstrument field.
func (o *IncomingTransferNotificationData) SetPaymentInstrument(v ResourceReference) {
	o.PaymentInstrument = &v
}

// GetPlatformPayment returns the PlatformPayment field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetPlatformPayment() PlatformPayment {
	if o == nil || common.IsNil(o.PlatformPayment) {
		var ret PlatformPayment
		return ret
	}
	return *o.PlatformPayment
}

// GetPlatformPaymentOk returns a tuple with the PlatformPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetPlatformPaymentOk() (*PlatformPayment, bool) {
	if o == nil || common.IsNil(o.PlatformPayment) {
		return nil, false
	}
	return o.PlatformPayment, true
}

// HasPlatformPayment returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasPlatformPayment() bool {
	if o != nil && !common.IsNil(o.PlatformPayment) {
		return true
	}

	return false
}

// SetPlatformPayment gets a reference to the given PlatformPayment and assigns it to the PlatformPayment field.
func (o *IncomingTransferNotificationData) SetPlatformPayment(v PlatformPayment) {
	o.PlatformPayment = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetReference() string {
	if o == nil || common.IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasReference() bool {
	if o != nil && !common.IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *IncomingTransferNotificationData) SetReference(v string) {
	o.Reference = &v
}

// GetReferenceForBeneficiary returns the ReferenceForBeneficiary field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetReferenceForBeneficiary() string {
	if o == nil || common.IsNil(o.ReferenceForBeneficiary) {
		var ret string
		return ret
	}
	return *o.ReferenceForBeneficiary
}

// GetReferenceForBeneficiaryOk returns a tuple with the ReferenceForBeneficiary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetReferenceForBeneficiaryOk() (*string, bool) {
	if o == nil || common.IsNil(o.ReferenceForBeneficiary) {
		return nil, false
	}
	return o.ReferenceForBeneficiary, true
}

// HasReferenceForBeneficiary returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasReferenceForBeneficiary() bool {
	if o != nil && !common.IsNil(o.ReferenceForBeneficiary) {
		return true
	}

	return false
}

// SetReferenceForBeneficiary gets a reference to the given string and assigns it to the ReferenceForBeneficiary field.
func (o *IncomingTransferNotificationData) SetReferenceForBeneficiary(v string) {
	o.ReferenceForBeneficiary = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetStatus() string {
	if o == nil || common.IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetStatusOk() (*string, bool) {
	if o == nil || common.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasStatus() bool {
	if o != nil && !common.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *IncomingTransferNotificationData) SetStatus(v string) {
	o.Status = &v
}

// GetValueDate returns the ValueDate field value if set, zero value otherwise.
func (o *IncomingTransferNotificationData) GetValueDate() time.Time {
	if o == nil || common.IsNil(o.ValueDate) {
		var ret time.Time
		return ret
	}
	return *o.ValueDate
}

// GetValueDateOk returns a tuple with the ValueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingTransferNotificationData) GetValueDateOk() (*time.Time, bool) {
	if o == nil || common.IsNil(o.ValueDate) {
		return nil, false
	}
	return o.ValueDate, true
}

// HasValueDate returns a boolean if a field has been set.
func (o *IncomingTransferNotificationData) HasValueDate() bool {
	if o != nil && !common.IsNil(o.ValueDate) {
		return true
	}

	return false
}

// SetValueDate gets a reference to the given time.Time and assigns it to the ValueDate field.
func (o *IncomingTransferNotificationData) SetValueDate(v time.Time) {
	o.ValueDate = &v
}

func (o IncomingTransferNotificationData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncomingTransferNotificationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.AccountHolder) {
		toSerialize["accountHolder"] = o.AccountHolder
	}
	if !common.IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !common.IsNil(o.BalanceAccount) {
		toSerialize["balanceAccount"] = o.BalanceAccount
	}
	if !common.IsNil(o.BalancePlatform) {
		toSerialize["balancePlatform"] = o.BalancePlatform
	}
	if !common.IsNil(o.Counterparty) {
		toSerialize["counterparty"] = o.Counterparty
	}
	if !common.IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !common.IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !common.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !common.IsNil(o.Modification) {
		toSerialize["modification"] = o.Modification
	}
	if !common.IsNil(o.OriginalAmount) {
		toSerialize["originalAmount"] = o.OriginalAmount
	}
	if !common.IsNil(o.PaymentId) {
		toSerialize["paymentId"] = o.PaymentId
	}
	if !common.IsNil(o.PaymentInstrument) {
		toSerialize["paymentInstrument"] = o.PaymentInstrument
	}
	if !common.IsNil(o.PlatformPayment) {
		toSerialize["platformPayment"] = o.PlatformPayment
	}
	if !common.IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !common.IsNil(o.ReferenceForBeneficiary) {
		toSerialize["referenceForBeneficiary"] = o.ReferenceForBeneficiary
	}
	if !common.IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !common.IsNil(o.ValueDate) {
		toSerialize["valueDate"] = o.ValueDate
	}
	return toSerialize, nil
}

type NullableIncomingTransferNotificationData struct {
	value *IncomingTransferNotificationData
	isSet bool
}

func (v NullableIncomingTransferNotificationData) Get() *IncomingTransferNotificationData {
	return v.value
}

func (v *NullableIncomingTransferNotificationData) Set(val *IncomingTransferNotificationData) {
	v.value = val
	v.isSet = true
}

func (v NullableIncomingTransferNotificationData) IsSet() bool {
	return v.isSet
}

func (v *NullableIncomingTransferNotificationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncomingTransferNotificationData(val *IncomingTransferNotificationData) *NullableIncomingTransferNotificationData {
	return &NullableIncomingTransferNotificationData{value: val, isSet: true}
}

func (v NullableIncomingTransferNotificationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncomingTransferNotificationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
