/*
Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package common

import (
	"encoding/json"
)

// checks if the InvalidFieldWrapper type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvalidFieldWrapper{}

// InvalidFieldWrapper struct for InvalidFieldWrapper
type InvalidFieldWrapper struct {
	InvalidField *InvalidField `json:"InvalidField,omitempty"`
}

// NewInvalidFieldWrapper instantiates a new InvalidFieldWrapper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvalidFieldWrapper() *InvalidFieldWrapper {
	this := InvalidFieldWrapper{}
	return &this
}

// NewInvalidFieldWrapperWithDefaults instantiates a new InvalidFieldWrapper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvalidFieldWrapperWithDefaults() *InvalidFieldWrapper {
	this := InvalidFieldWrapper{}
	return &this
}

// GetInvalidField returns the InvalidField field value if set, zero value otherwise.
func (o *InvalidFieldWrapper) GetInvalidField() InvalidField {
	if o == nil || IsNil(o.InvalidField) {
		var ret InvalidField
		return ret
	}
	return *o.InvalidField
}

// GetInvalidFieldOk returns a tuple with the InvalidField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvalidFieldWrapper) GetInvalidFieldOk() (*InvalidField, bool) {
	if o == nil || IsNil(o.InvalidField) {
		return nil, false
	}
	return o.InvalidField, true
}

// HasInvalidField returns a boolean if a field has been set.
func (o *InvalidFieldWrapper) HasInvalidField() bool {
	if o != nil && !IsNil(o.InvalidField) {
		return true
	}

	return false
}

// SetInvalidField gets a reference to the given InvalidField and assigns it to the InvalidField field.
func (o *InvalidFieldWrapper) SetInvalidField(v InvalidField) {
	o.InvalidField = &v
}

func (o InvalidFieldWrapper) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvalidFieldWrapper) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InvalidField) {
		toSerialize["InvalidField"] = o.InvalidField
	}
	return toSerialize, nil
}

type NullableInvalidFieldWrapper struct {
	value *InvalidFieldWrapper
	isSet bool
}

func (v NullableInvalidFieldWrapper) Get() *InvalidFieldWrapper {
	return v.value
}

func (v *NullableInvalidFieldWrapper) Set(val *InvalidFieldWrapper) {
	v.value = val
	v.isSet = true
}

func (v NullableInvalidFieldWrapper) IsSet() bool {
	return v.isSet
}

func (v *NullableInvalidFieldWrapper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvalidFieldWrapper(val *InvalidFieldWrapper) *NullableInvalidFieldWrapper {
	return &NullableInvalidFieldWrapper{value: val, isSet: true}
}

func (v NullableInvalidFieldWrapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvalidFieldWrapper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
