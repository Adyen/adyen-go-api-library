/*
Configuration API

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package balanceplatform

import (
	"context"
    "net/http"
    "net/url"
    "strings"
    "github.com/adyen/adyen-go-api-library/v21/src/common"
)

// AuthorizedCardUsersApi service
type AuthorizedCardUsersApi common.Service

// All parameters accepted by AuthorizedCardUsersApi.CreateAuthorisedCardUsers
type AuthorizedCardUsersApiCreateAuthorisedCardUsersInput struct {
	paymentInstrumentId string
	authorisedCardUsers *AuthorisedCardUsers
}

func (r AuthorizedCardUsersApiCreateAuthorisedCardUsersInput) AuthorisedCardUsers(authorisedCardUsers AuthorisedCardUsers) AuthorizedCardUsersApiCreateAuthorisedCardUsersInput {
	r.authorisedCardUsers = &authorisedCardUsers
	return r
}


/*
Prepare a request for CreateAuthorisedCardUsers
@param paymentInstrumentId
@return AuthorizedCardUsersApiCreateAuthorisedCardUsersInput
*/
func (a *AuthorizedCardUsersApi) CreateAuthorisedCardUsersInput(paymentInstrumentId string) AuthorizedCardUsersApiCreateAuthorisedCardUsersInput {
	return AuthorizedCardUsersApiCreateAuthorisedCardUsersInput{
		paymentInstrumentId: paymentInstrumentId,
	}
}

/*
CreateAuthorisedCardUsers Create authorized users for a card.

Assigns authorized users to a card. Users must have the **authorisedPaymentInstrumentUser** capability to be able to use the card.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r AuthorizedCardUsersApiCreateAuthorisedCardUsersInput - Request parameters, see CreateAuthorisedCardUsersInput
@return *http.Response, error
*/
func (a *AuthorizedCardUsersApi) CreateAuthorisedCardUsers(ctx context.Context, r AuthorizedCardUsersApiCreateAuthorisedCardUsersInput) (*http.Response, error) {
    var res interface{}
	path := "/paymentInstruments/{paymentInstrumentId}/authorisedCardUsers"
    path = strings.Replace(path, "{"+"paymentInstrumentId"+"}", url.PathEscape(common.ParameterValueToString(r.paymentInstrumentId, "paymentInstrumentId")), -1)
    queryParams := url.Values{}
    headerParams := make(map[string]string)
    httpRes, err := common.SendAPIRequest(
        ctx,
        a.Client,
        r.authorisedCardUsers,
        res,
        http.MethodPost,
        a.BasePath()+path,
        queryParams,
        headerParams,
    )

    if httpRes == nil {
        return httpRes, err
    }

    var serviceError common.RestServiceError
                        if httpRes.StatusCode == 400 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return httpRes, decodeError
                            }
                            return httpRes, serviceError
                        }
                        if httpRes.StatusCode == 401 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return httpRes, decodeError
                            }
                            return httpRes, serviceError
                        }
                        if httpRes.StatusCode == 403 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return httpRes, decodeError
                            }
                            return httpRes, serviceError
                        }
                        if httpRes.StatusCode == 422 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return httpRes, decodeError
                            }
                            return httpRes, serviceError
                        }

    return httpRes, err
}


// All parameters accepted by AuthorizedCardUsersApi.DeleteAuthorisedCardUsers
type AuthorizedCardUsersApiDeleteAuthorisedCardUsersInput struct {
	paymentInstrumentId string
}


/*
Prepare a request for DeleteAuthorisedCardUsers
@param paymentInstrumentId
@return AuthorizedCardUsersApiDeleteAuthorisedCardUsersInput
*/
func (a *AuthorizedCardUsersApi) DeleteAuthorisedCardUsersInput(paymentInstrumentId string) AuthorizedCardUsersApiDeleteAuthorisedCardUsersInput {
	return AuthorizedCardUsersApiDeleteAuthorisedCardUsersInput{
		paymentInstrumentId: paymentInstrumentId,
	}
}

/*
DeleteAuthorisedCardUsers Delete the authorized users for a card.

Deletes the list of authorized users assigned to a card.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r AuthorizedCardUsersApiDeleteAuthorisedCardUsersInput - Request parameters, see DeleteAuthorisedCardUsersInput
@return *http.Response, error
*/
func (a *AuthorizedCardUsersApi) DeleteAuthorisedCardUsers(ctx context.Context, r AuthorizedCardUsersApiDeleteAuthorisedCardUsersInput) (*http.Response, error) {
    var res interface{}
	path := "/paymentInstruments/{paymentInstrumentId}/authorisedCardUsers"
    path = strings.Replace(path, "{"+"paymentInstrumentId"+"}", url.PathEscape(common.ParameterValueToString(r.paymentInstrumentId, "paymentInstrumentId")), -1)
    queryParams := url.Values{}
    headerParams := make(map[string]string)
    httpRes, err := common.SendAPIRequest(
        ctx,
        a.Client,
        nil,
        res,
        http.MethodDelete,
        a.BasePath()+path,
        queryParams,
        headerParams,
    )

    if httpRes == nil {
        return httpRes, err
    }

    var serviceError common.RestServiceError
                        if httpRes.StatusCode == 401 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return httpRes, decodeError
                            }
                            return httpRes, serviceError
                        }
                        if httpRes.StatusCode == 403 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return httpRes, decodeError
                            }
                            return httpRes, serviceError
                        }

    return httpRes, err
}


// All parameters accepted by AuthorizedCardUsersApi.GetAllAuthorisedCardUsers
type AuthorizedCardUsersApiGetAllAuthorisedCardUsersInput struct {
	paymentInstrumentId string
}


/*
Prepare a request for GetAllAuthorisedCardUsers
@param paymentInstrumentId
@return AuthorizedCardUsersApiGetAllAuthorisedCardUsersInput
*/
func (a *AuthorizedCardUsersApi) GetAllAuthorisedCardUsersInput(paymentInstrumentId string) AuthorizedCardUsersApiGetAllAuthorisedCardUsersInput {
	return AuthorizedCardUsersApiGetAllAuthorisedCardUsersInput{
		paymentInstrumentId: paymentInstrumentId,
	}
}

/*
GetAllAuthorisedCardUsers Get authorized users for a card.

Returns the authorized users for a card.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r AuthorizedCardUsersApiGetAllAuthorisedCardUsersInput - Request parameters, see GetAllAuthorisedCardUsersInput
@return AuthorisedCardUsers, *http.Response, error
*/
func (a *AuthorizedCardUsersApi) GetAllAuthorisedCardUsers(ctx context.Context, r AuthorizedCardUsersApiGetAllAuthorisedCardUsersInput) (AuthorisedCardUsers, *http.Response, error) {
    res := &AuthorisedCardUsers{}
	path := "/paymentInstruments/{paymentInstrumentId}/authorisedCardUsers"
    path = strings.Replace(path, "{"+"paymentInstrumentId"+"}", url.PathEscape(common.ParameterValueToString(r.paymentInstrumentId, "paymentInstrumentId")), -1)
    queryParams := url.Values{}
    headerParams := make(map[string]string)
    httpRes, err := common.SendAPIRequest(
        ctx,
        a.Client,
        nil,
        res,
        http.MethodGet,
        a.BasePath()+path,
        queryParams,
        headerParams,
    )

    if httpRes == nil {
        return *res, httpRes, err
    }

    var serviceError common.RestServiceError
                        if httpRes.StatusCode == 401 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return *res, httpRes, decodeError
                            }
                            return *res, httpRes, serviceError
                        }
                        if httpRes.StatusCode == 403 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return *res, httpRes, decodeError
                            }
                            return *res, httpRes, serviceError
                        }
                        if httpRes.StatusCode == 404 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return *res, httpRes, decodeError
                            }
                            return *res, httpRes, serviceError
                        }
                        if httpRes.StatusCode == 422 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return *res, httpRes, decodeError
                            }
                            return *res, httpRes, serviceError
                        }

    return *res, httpRes, err
}


// All parameters accepted by AuthorizedCardUsersApi.UpdateAuthorisedCardUsers
type AuthorizedCardUsersApiUpdateAuthorisedCardUsersInput struct {
	paymentInstrumentId string
	authorisedCardUsers *AuthorisedCardUsers
}

func (r AuthorizedCardUsersApiUpdateAuthorisedCardUsersInput) AuthorisedCardUsers(authorisedCardUsers AuthorisedCardUsers) AuthorizedCardUsersApiUpdateAuthorisedCardUsersInput {
	r.authorisedCardUsers = &authorisedCardUsers
	return r
}


/*
Prepare a request for UpdateAuthorisedCardUsers
@param paymentInstrumentId
@return AuthorizedCardUsersApiUpdateAuthorisedCardUsersInput
*/
func (a *AuthorizedCardUsersApi) UpdateAuthorisedCardUsersInput(paymentInstrumentId string) AuthorizedCardUsersApiUpdateAuthorisedCardUsersInput {
	return AuthorizedCardUsersApiUpdateAuthorisedCardUsersInput{
		paymentInstrumentId: paymentInstrumentId,
	}
}

/*
UpdateAuthorisedCardUsers Update the authorized users for a card.

Updates the list of authorized users for a card.

>This request replaces all existing authorized users for the card.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r AuthorizedCardUsersApiUpdateAuthorisedCardUsersInput - Request parameters, see UpdateAuthorisedCardUsersInput
@return *http.Response, error
*/
func (a *AuthorizedCardUsersApi) UpdateAuthorisedCardUsers(ctx context.Context, r AuthorizedCardUsersApiUpdateAuthorisedCardUsersInput) (*http.Response, error) {
    var res interface{}
	path := "/paymentInstruments/{paymentInstrumentId}/authorisedCardUsers"
    path = strings.Replace(path, "{"+"paymentInstrumentId"+"}", url.PathEscape(common.ParameterValueToString(r.paymentInstrumentId, "paymentInstrumentId")), -1)
    queryParams := url.Values{}
    headerParams := make(map[string]string)
    httpRes, err := common.SendAPIRequest(
        ctx,
        a.Client,
        r.authorisedCardUsers,
        res,
        http.MethodPatch,
        a.BasePath()+path,
        queryParams,
        headerParams,
    )

    if httpRes == nil {
        return httpRes, err
    }

    var serviceError common.RestServiceError
                        if httpRes.StatusCode == 400 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return httpRes, decodeError
                            }
                            return httpRes, serviceError
                        }
                        if httpRes.StatusCode == 401 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return httpRes, decodeError
                            }
                            return httpRes, serviceError
                        }
                        if httpRes.StatusCode == 403 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return httpRes, decodeError
                            }
                            return httpRes, serviceError
                        }
                        if httpRes.StatusCode == 422 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return httpRes, decodeError
                            }
                            return httpRes, serviceError
                        }

    return httpRes, err
}

