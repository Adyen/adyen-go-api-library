/*
Configuration API

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package balanceplatform

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v21/src/common"
)

// checks if the TargetUpdate type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &TargetUpdate{}

// TargetUpdate struct for TargetUpdate
type TargetUpdate struct {
	// The unique identifier of the `target.type`. This can be the ID of your:  * balance platform * account holder * account holder's balance account
	Id *string `json:"id,omitempty"`
	// The resource for which you want to receive notifications. Possible values:  * **balancePlatform**: receive notifications about balance changes in your entire balance platform.  * **accountHolder**: receive notifications about balance changes of a specific user.  * **balanceAccount**: receive notifications about balance changes in a specific balance account.
	Type *string `json:"type,omitempty"`
}

// NewTargetUpdate instantiates a new TargetUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetUpdate() *TargetUpdate {
	this := TargetUpdate{}
	return &this
}

// NewTargetUpdateWithDefaults instantiates a new TargetUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetUpdateWithDefaults() *TargetUpdate {
	this := TargetUpdate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TargetUpdate) GetId() string {
	if o == nil || common.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetUpdate) GetIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TargetUpdate) HasId() bool {
	if o != nil && !common.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TargetUpdate) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TargetUpdate) GetType() string {
	if o == nil || common.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetUpdate) GetTypeOk() (*string, bool) {
	if o == nil || common.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TargetUpdate) HasType() bool {
	if o != nil && !common.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TargetUpdate) SetType(v string) {
	o.Type = &v
}

func (o TargetUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !common.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableTargetUpdate struct {
	value *TargetUpdate
	isSet bool
}

func (v NullableTargetUpdate) Get() *TargetUpdate {
	return v.value
}

func (v *NullableTargetUpdate) Set(val *TargetUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetUpdate(val *TargetUpdate) *NullableTargetUpdate {
	return &NullableTargetUpdate{value: val, isSet: true}
}

func (v NullableTargetUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func (o *TargetUpdate) isValidType() bool {
	var allowedEnumValues = []string{"balanceAccount", "accountHolder", "balancePlatform"}
	for _, allowed := range allowedEnumValues {
		if o.GetType() == allowed {
			return true
		}
	}
	return false
}
