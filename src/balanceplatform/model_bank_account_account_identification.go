/*
Configuration API

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package balanceplatform

import (
	"encoding/json"
	"fmt"
)

// BankAccountAccountIdentification - Contains the bank account details. The fields required in this object depend on the country of the bank account and the currency of the transfer.
type BankAccountAccountIdentification struct {
	AULocalAccountIdentification      *AULocalAccountIdentification
	BRLocalAccountIdentification      *BRLocalAccountIdentification
	CALocalAccountIdentification      *CALocalAccountIdentification
	CZLocalAccountIdentification      *CZLocalAccountIdentification
	DKLocalAccountIdentification      *DKLocalAccountIdentification
	HKLocalAccountIdentification      *HKLocalAccountIdentification
	HULocalAccountIdentification      *HULocalAccountIdentification
	IbanAccountIdentification         *IbanAccountIdentification
	NOLocalAccountIdentification      *NOLocalAccountIdentification
	NZLocalAccountIdentification      *NZLocalAccountIdentification
	NumberAndBicAccountIdentification *NumberAndBicAccountIdentification
	PLLocalAccountIdentification      *PLLocalAccountIdentification
	SELocalAccountIdentification      *SELocalAccountIdentification
	SGLocalAccountIdentification      *SGLocalAccountIdentification
	UKLocalAccountIdentification      *UKLocalAccountIdentification
	USLocalAccountIdentification      *USLocalAccountIdentification
}

// AULocalAccountIdentificationAsBankAccountAccountIdentification is a convenience function that returns AULocalAccountIdentification wrapped in BankAccountAccountIdentification
func AULocalAccountIdentificationAsBankAccountAccountIdentification(v *AULocalAccountIdentification) BankAccountAccountIdentification {
	return BankAccountAccountIdentification{
		AULocalAccountIdentification: v,
	}
}

// BRLocalAccountIdentificationAsBankAccountAccountIdentification is a convenience function that returns BRLocalAccountIdentification wrapped in BankAccountAccountIdentification
func BRLocalAccountIdentificationAsBankAccountAccountIdentification(v *BRLocalAccountIdentification) BankAccountAccountIdentification {
	return BankAccountAccountIdentification{
		BRLocalAccountIdentification: v,
	}
}

// CALocalAccountIdentificationAsBankAccountAccountIdentification is a convenience function that returns CALocalAccountIdentification wrapped in BankAccountAccountIdentification
func CALocalAccountIdentificationAsBankAccountAccountIdentification(v *CALocalAccountIdentification) BankAccountAccountIdentification {
	return BankAccountAccountIdentification{
		CALocalAccountIdentification: v,
	}
}

// CZLocalAccountIdentificationAsBankAccountAccountIdentification is a convenience function that returns CZLocalAccountIdentification wrapped in BankAccountAccountIdentification
func CZLocalAccountIdentificationAsBankAccountAccountIdentification(v *CZLocalAccountIdentification) BankAccountAccountIdentification {
	return BankAccountAccountIdentification{
		CZLocalAccountIdentification: v,
	}
}

// DKLocalAccountIdentificationAsBankAccountAccountIdentification is a convenience function that returns DKLocalAccountIdentification wrapped in BankAccountAccountIdentification
func DKLocalAccountIdentificationAsBankAccountAccountIdentification(v *DKLocalAccountIdentification) BankAccountAccountIdentification {
	return BankAccountAccountIdentification{
		DKLocalAccountIdentification: v,
	}
}

// HKLocalAccountIdentificationAsBankAccountAccountIdentification is a convenience function that returns HKLocalAccountIdentification wrapped in BankAccountAccountIdentification
func HKLocalAccountIdentificationAsBankAccountAccountIdentification(v *HKLocalAccountIdentification) BankAccountAccountIdentification {
	return BankAccountAccountIdentification{
		HKLocalAccountIdentification: v,
	}
}

// HULocalAccountIdentificationAsBankAccountAccountIdentification is a convenience function that returns HULocalAccountIdentification wrapped in BankAccountAccountIdentification
func HULocalAccountIdentificationAsBankAccountAccountIdentification(v *HULocalAccountIdentification) BankAccountAccountIdentification {
	return BankAccountAccountIdentification{
		HULocalAccountIdentification: v,
	}
}

// IbanAccountIdentificationAsBankAccountAccountIdentification is a convenience function that returns IbanAccountIdentification wrapped in BankAccountAccountIdentification
func IbanAccountIdentificationAsBankAccountAccountIdentification(v *IbanAccountIdentification) BankAccountAccountIdentification {
	return BankAccountAccountIdentification{
		IbanAccountIdentification: v,
	}
}

// NOLocalAccountIdentificationAsBankAccountAccountIdentification is a convenience function that returns NOLocalAccountIdentification wrapped in BankAccountAccountIdentification
func NOLocalAccountIdentificationAsBankAccountAccountIdentification(v *NOLocalAccountIdentification) BankAccountAccountIdentification {
	return BankAccountAccountIdentification{
		NOLocalAccountIdentification: v,
	}
}

// NZLocalAccountIdentificationAsBankAccountAccountIdentification is a convenience function that returns NZLocalAccountIdentification wrapped in BankAccountAccountIdentification
func NZLocalAccountIdentificationAsBankAccountAccountIdentification(v *NZLocalAccountIdentification) BankAccountAccountIdentification {
	return BankAccountAccountIdentification{
		NZLocalAccountIdentification: v,
	}
}

// NumberAndBicAccountIdentificationAsBankAccountAccountIdentification is a convenience function that returns NumberAndBicAccountIdentification wrapped in BankAccountAccountIdentification
func NumberAndBicAccountIdentificationAsBankAccountAccountIdentification(v *NumberAndBicAccountIdentification) BankAccountAccountIdentification {
	return BankAccountAccountIdentification{
		NumberAndBicAccountIdentification: v,
	}
}

// PLLocalAccountIdentificationAsBankAccountAccountIdentification is a convenience function that returns PLLocalAccountIdentification wrapped in BankAccountAccountIdentification
func PLLocalAccountIdentificationAsBankAccountAccountIdentification(v *PLLocalAccountIdentification) BankAccountAccountIdentification {
	return BankAccountAccountIdentification{
		PLLocalAccountIdentification: v,
	}
}

// SELocalAccountIdentificationAsBankAccountAccountIdentification is a convenience function that returns SELocalAccountIdentification wrapped in BankAccountAccountIdentification
func SELocalAccountIdentificationAsBankAccountAccountIdentification(v *SELocalAccountIdentification) BankAccountAccountIdentification {
	return BankAccountAccountIdentification{
		SELocalAccountIdentification: v,
	}
}

// SGLocalAccountIdentificationAsBankAccountAccountIdentification is a convenience function that returns SGLocalAccountIdentification wrapped in BankAccountAccountIdentification
func SGLocalAccountIdentificationAsBankAccountAccountIdentification(v *SGLocalAccountIdentification) BankAccountAccountIdentification {
	return BankAccountAccountIdentification{
		SGLocalAccountIdentification: v,
	}
}

// UKLocalAccountIdentificationAsBankAccountAccountIdentification is a convenience function that returns UKLocalAccountIdentification wrapped in BankAccountAccountIdentification
func UKLocalAccountIdentificationAsBankAccountAccountIdentification(v *UKLocalAccountIdentification) BankAccountAccountIdentification {
	return BankAccountAccountIdentification{
		UKLocalAccountIdentification: v,
	}
}

// USLocalAccountIdentificationAsBankAccountAccountIdentification is a convenience function that returns USLocalAccountIdentification wrapped in BankAccountAccountIdentification
func USLocalAccountIdentificationAsBankAccountAccountIdentification(v *USLocalAccountIdentification) BankAccountAccountIdentification {
	return BankAccountAccountIdentification{
		USLocalAccountIdentification: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BankAccountAccountIdentification) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AULocalAccountIdentification
	err = json.Unmarshal(data, &dst.AULocalAccountIdentification)
	if err == nil {
		jsonAULocalAccountIdentification, _ := json.Marshal(dst.AULocalAccountIdentification)
		if string(jsonAULocalAccountIdentification) == "{}" || !dst.AULocalAccountIdentification.isValidType() { // empty struct
			dst.AULocalAccountIdentification = nil
		} else {
			match++
		}
	} else {
		dst.AULocalAccountIdentification = nil
	}

	// try to unmarshal data into BRLocalAccountIdentification
	err = json.Unmarshal(data, &dst.BRLocalAccountIdentification)
	if err == nil {
		jsonBRLocalAccountIdentification, _ := json.Marshal(dst.BRLocalAccountIdentification)
		if string(jsonBRLocalAccountIdentification) == "{}" || !dst.BRLocalAccountIdentification.isValidType() { // empty struct
			dst.BRLocalAccountIdentification = nil
		} else {
			match++
		}
	} else {
		dst.BRLocalAccountIdentification = nil
	}

	// try to unmarshal data into CALocalAccountIdentification
	err = json.Unmarshal(data, &dst.CALocalAccountIdentification)
	if err == nil {
		jsonCALocalAccountIdentification, _ := json.Marshal(dst.CALocalAccountIdentification)
		if string(jsonCALocalAccountIdentification) == "{}" || !dst.CALocalAccountIdentification.isValidType() { // empty struct
			dst.CALocalAccountIdentification = nil
		} else {
			match++
		}
	} else {
		dst.CALocalAccountIdentification = nil
	}

	// try to unmarshal data into CZLocalAccountIdentification
	err = json.Unmarshal(data, &dst.CZLocalAccountIdentification)
	if err == nil {
		jsonCZLocalAccountIdentification, _ := json.Marshal(dst.CZLocalAccountIdentification)
		if string(jsonCZLocalAccountIdentification) == "{}" || !dst.CZLocalAccountIdentification.isValidType() { // empty struct
			dst.CZLocalAccountIdentification = nil
		} else {
			match++
		}
	} else {
		dst.CZLocalAccountIdentification = nil
	}

	// try to unmarshal data into DKLocalAccountIdentification
	err = json.Unmarshal(data, &dst.DKLocalAccountIdentification)
	if err == nil {
		jsonDKLocalAccountIdentification, _ := json.Marshal(dst.DKLocalAccountIdentification)
		if string(jsonDKLocalAccountIdentification) == "{}" || !dst.DKLocalAccountIdentification.isValidType() { // empty struct
			dst.DKLocalAccountIdentification = nil
		} else {
			match++
		}
	} else {
		dst.DKLocalAccountIdentification = nil
	}

	// try to unmarshal data into HKLocalAccountIdentification
	err = json.Unmarshal(data, &dst.HKLocalAccountIdentification)
	if err == nil {
		jsonHKLocalAccountIdentification, _ := json.Marshal(dst.HKLocalAccountIdentification)
		if string(jsonHKLocalAccountIdentification) == "{}" || !dst.HKLocalAccountIdentification.isValidType() { // empty struct
			dst.HKLocalAccountIdentification = nil
		} else {
			match++
		}
	} else {
		dst.HKLocalAccountIdentification = nil
	}

	// try to unmarshal data into HULocalAccountIdentification
	err = json.Unmarshal(data, &dst.HULocalAccountIdentification)
	if err == nil {
		jsonHULocalAccountIdentification, _ := json.Marshal(dst.HULocalAccountIdentification)
		if string(jsonHULocalAccountIdentification) == "{}" || !dst.HULocalAccountIdentification.isValidType() { // empty struct
			dst.HULocalAccountIdentification = nil
		} else {
			match++
		}
	} else {
		dst.HULocalAccountIdentification = nil
	}

	// try to unmarshal data into IbanAccountIdentification
	err = json.Unmarshal(data, &dst.IbanAccountIdentification)
	if err == nil {
		jsonIbanAccountIdentification, _ := json.Marshal(dst.IbanAccountIdentification)
		if string(jsonIbanAccountIdentification) == "{}" || !dst.IbanAccountIdentification.isValidType() { // empty struct
			dst.IbanAccountIdentification = nil
		} else {
			match++
		}
	} else {
		dst.IbanAccountIdentification = nil
	}

	// try to unmarshal data into NOLocalAccountIdentification
	err = json.Unmarshal(data, &dst.NOLocalAccountIdentification)
	if err == nil {
		jsonNOLocalAccountIdentification, _ := json.Marshal(dst.NOLocalAccountIdentification)
		if string(jsonNOLocalAccountIdentification) == "{}" || !dst.NOLocalAccountIdentification.isValidType() { // empty struct
			dst.NOLocalAccountIdentification = nil
		} else {
			match++
		}
	} else {
		dst.NOLocalAccountIdentification = nil
	}

	// try to unmarshal data into NZLocalAccountIdentification
	err = json.Unmarshal(data, &dst.NZLocalAccountIdentification)
	if err == nil {
		jsonNZLocalAccountIdentification, _ := json.Marshal(dst.NZLocalAccountIdentification)
		if string(jsonNZLocalAccountIdentification) == "{}" || !dst.NZLocalAccountIdentification.isValidType() { // empty struct
			dst.NZLocalAccountIdentification = nil
		} else {
			match++
		}
	} else {
		dst.NZLocalAccountIdentification = nil
	}

	// try to unmarshal data into NumberAndBicAccountIdentification
	err = json.Unmarshal(data, &dst.NumberAndBicAccountIdentification)
	if err == nil {
		jsonNumberAndBicAccountIdentification, _ := json.Marshal(dst.NumberAndBicAccountIdentification)
		if string(jsonNumberAndBicAccountIdentification) == "{}" || !dst.NumberAndBicAccountIdentification.isValidType() { // empty struct
			dst.NumberAndBicAccountIdentification = nil
		} else {
			match++
		}
	} else {
		dst.NumberAndBicAccountIdentification = nil
	}

	// try to unmarshal data into PLLocalAccountIdentification
	err = json.Unmarshal(data, &dst.PLLocalAccountIdentification)
	if err == nil {
		jsonPLLocalAccountIdentification, _ := json.Marshal(dst.PLLocalAccountIdentification)
		if string(jsonPLLocalAccountIdentification) == "{}" || !dst.PLLocalAccountIdentification.isValidType() { // empty struct
			dst.PLLocalAccountIdentification = nil
		} else {
			match++
		}
	} else {
		dst.PLLocalAccountIdentification = nil
	}

	// try to unmarshal data into SELocalAccountIdentification
	err = json.Unmarshal(data, &dst.SELocalAccountIdentification)
	if err == nil {
		jsonSELocalAccountIdentification, _ := json.Marshal(dst.SELocalAccountIdentification)
		if string(jsonSELocalAccountIdentification) == "{}" || !dst.SELocalAccountIdentification.isValidType() { // empty struct
			dst.SELocalAccountIdentification = nil
		} else {
			match++
		}
	} else {
		dst.SELocalAccountIdentification = nil
	}

	// try to unmarshal data into SGLocalAccountIdentification
	err = json.Unmarshal(data, &dst.SGLocalAccountIdentification)
	if err == nil {
		jsonSGLocalAccountIdentification, _ := json.Marshal(dst.SGLocalAccountIdentification)
		if string(jsonSGLocalAccountIdentification) == "{}" || !dst.SGLocalAccountIdentification.isValidType() { // empty struct
			dst.SGLocalAccountIdentification = nil
		} else {
			match++
		}
	} else {
		dst.SGLocalAccountIdentification = nil
	}

	// try to unmarshal data into UKLocalAccountIdentification
	err = json.Unmarshal(data, &dst.UKLocalAccountIdentification)
	if err == nil {
		jsonUKLocalAccountIdentification, _ := json.Marshal(dst.UKLocalAccountIdentification)
		if string(jsonUKLocalAccountIdentification) == "{}" || !dst.UKLocalAccountIdentification.isValidType() { // empty struct
			dst.UKLocalAccountIdentification = nil
		} else {
			match++
		}
	} else {
		dst.UKLocalAccountIdentification = nil
	}

	// try to unmarshal data into USLocalAccountIdentification
	err = json.Unmarshal(data, &dst.USLocalAccountIdentification)
	if err == nil {
		jsonUSLocalAccountIdentification, _ := json.Marshal(dst.USLocalAccountIdentification)
		if string(jsonUSLocalAccountIdentification) == "{}" || !dst.USLocalAccountIdentification.isValidType() { // empty struct
			dst.USLocalAccountIdentification = nil
		} else {
			match++
		}
	} else {
		dst.USLocalAccountIdentification = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AULocalAccountIdentification = nil
		dst.BRLocalAccountIdentification = nil
		dst.CALocalAccountIdentification = nil
		dst.CZLocalAccountIdentification = nil
		dst.DKLocalAccountIdentification = nil
		dst.HKLocalAccountIdentification = nil
		dst.HULocalAccountIdentification = nil
		dst.IbanAccountIdentification = nil
		dst.NOLocalAccountIdentification = nil
		dst.NZLocalAccountIdentification = nil
		dst.NumberAndBicAccountIdentification = nil
		dst.PLLocalAccountIdentification = nil
		dst.SELocalAccountIdentification = nil
		dst.SGLocalAccountIdentification = nil
		dst.UKLocalAccountIdentification = nil
		dst.USLocalAccountIdentification = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BankAccountAccountIdentification)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BankAccountAccountIdentification)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BankAccountAccountIdentification) MarshalJSON() ([]byte, error) {
	if src.AULocalAccountIdentification != nil {
		return json.Marshal(&src.AULocalAccountIdentification)
	}

	if src.BRLocalAccountIdentification != nil {
		return json.Marshal(&src.BRLocalAccountIdentification)
	}

	if src.CALocalAccountIdentification != nil {
		return json.Marshal(&src.CALocalAccountIdentification)
	}

	if src.CZLocalAccountIdentification != nil {
		return json.Marshal(&src.CZLocalAccountIdentification)
	}

	if src.DKLocalAccountIdentification != nil {
		return json.Marshal(&src.DKLocalAccountIdentification)
	}

	if src.HKLocalAccountIdentification != nil {
		return json.Marshal(&src.HKLocalAccountIdentification)
	}

	if src.HULocalAccountIdentification != nil {
		return json.Marshal(&src.HULocalAccountIdentification)
	}

	if src.IbanAccountIdentification != nil {
		return json.Marshal(&src.IbanAccountIdentification)
	}

	if src.NOLocalAccountIdentification != nil {
		return json.Marshal(&src.NOLocalAccountIdentification)
	}

	if src.NZLocalAccountIdentification != nil {
		return json.Marshal(&src.NZLocalAccountIdentification)
	}

	if src.NumberAndBicAccountIdentification != nil {
		return json.Marshal(&src.NumberAndBicAccountIdentification)
	}

	if src.PLLocalAccountIdentification != nil {
		return json.Marshal(&src.PLLocalAccountIdentification)
	}

	if src.SELocalAccountIdentification != nil {
		return json.Marshal(&src.SELocalAccountIdentification)
	}

	if src.SGLocalAccountIdentification != nil {
		return json.Marshal(&src.SGLocalAccountIdentification)
	}

	if src.UKLocalAccountIdentification != nil {
		return json.Marshal(&src.UKLocalAccountIdentification)
	}

	if src.USLocalAccountIdentification != nil {
		return json.Marshal(&src.USLocalAccountIdentification)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BankAccountAccountIdentification) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AULocalAccountIdentification != nil {
		return obj.AULocalAccountIdentification
	}

	if obj.BRLocalAccountIdentification != nil {
		return obj.BRLocalAccountIdentification
	}

	if obj.CALocalAccountIdentification != nil {
		return obj.CALocalAccountIdentification
	}

	if obj.CZLocalAccountIdentification != nil {
		return obj.CZLocalAccountIdentification
	}

	if obj.DKLocalAccountIdentification != nil {
		return obj.DKLocalAccountIdentification
	}

	if obj.HKLocalAccountIdentification != nil {
		return obj.HKLocalAccountIdentification
	}

	if obj.HULocalAccountIdentification != nil {
		return obj.HULocalAccountIdentification
	}

	if obj.IbanAccountIdentification != nil {
		return obj.IbanAccountIdentification
	}

	if obj.NOLocalAccountIdentification != nil {
		return obj.NOLocalAccountIdentification
	}

	if obj.NZLocalAccountIdentification != nil {
		return obj.NZLocalAccountIdentification
	}

	if obj.NumberAndBicAccountIdentification != nil {
		return obj.NumberAndBicAccountIdentification
	}

	if obj.PLLocalAccountIdentification != nil {
		return obj.PLLocalAccountIdentification
	}

	if obj.SELocalAccountIdentification != nil {
		return obj.SELocalAccountIdentification
	}

	if obj.SGLocalAccountIdentification != nil {
		return obj.SGLocalAccountIdentification
	}

	if obj.UKLocalAccountIdentification != nil {
		return obj.UKLocalAccountIdentification
	}

	if obj.USLocalAccountIdentification != nil {
		return obj.USLocalAccountIdentification
	}

	// all schemas are nil
	return nil
}

type NullableBankAccountAccountIdentification struct {
	value *BankAccountAccountIdentification
	isSet bool
}

func (v NullableBankAccountAccountIdentification) Get() *BankAccountAccountIdentification {
	return v.value
}

func (v *NullableBankAccountAccountIdentification) Set(val *BankAccountAccountIdentification) {
	v.value = val
	v.isSet = true
}

func (v NullableBankAccountAccountIdentification) IsSet() bool {
	return v.isSet
}

func (v *NullableBankAccountAccountIdentification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBankAccountAccountIdentification(val *BankAccountAccountIdentification) *NullableBankAccountAccountIdentification {
	return &NullableBankAccountAccountIdentification{value: val, isSet: true}
}

func (v NullableBankAccountAccountIdentification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBankAccountAccountIdentification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
