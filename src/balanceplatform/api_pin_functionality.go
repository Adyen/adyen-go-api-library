/*
Configuration API

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package balanceplatform

import (
	"context"
    "net/http"
    "net/url"
    "strings"
    "github.com/adyen/adyen-go-api-library/v9/src/common"
)

// PINFunctionalityApi service
type PINFunctionalityApi common.Service

// All parameters accepted by PINFunctionalityApi.ChangePin
type PINFunctionalityApiChangePinInput struct {
	pinChangeRequest *PinChangeRequest
}

func (r PINFunctionalityApiChangePinInput) PinChangeRequest(pinChangeRequest PinChangeRequest) PINFunctionalityApiChangePinInput {
	r.pinChangeRequest = &pinChangeRequest
	return r
}


/*
Prepare a request for ChangePin

@return PINFunctionalityApiChangePinInput
*/
func (a *PINFunctionalityApi) ChangePinInput() PINFunctionalityApiChangePinInput {
	return PINFunctionalityApiChangePinInput{
	}
}

/*
ChangePin Change Pin

Change Pin

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r PINFunctionalityApiChangePinInput - Request parameters, see ChangePinInput
@return PinChangeResponse, *http.Response, error
*/
func (a *PINFunctionalityApi) ChangePin(ctx context.Context, r PINFunctionalityApiChangePinInput) (PinChangeResponse, *http.Response, error) {
    res := &PinChangeResponse{}
	path := "/pins/change"
    queryParams := url.Values{}
    headerParams := make(map[string]string)
    httpRes, err := common.SendAPIRequest(
        ctx,
        a.Client,
        r.pinChangeRequest,
        res,
        http.MethodPost,
        a.BasePath()+path,
        queryParams,
        headerParams,
    )

    if httpRes == nil {
        return *res, httpRes, err
    }

    var serviceError common.RestServiceError
                        if httpRes.StatusCode == 401 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return *res, httpRes, decodeError
                            }
                            return *res, httpRes, serviceError
                        }
                        if httpRes.StatusCode == 403 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return *res, httpRes, decodeError
                            }
                            return *res, httpRes, serviceError
                        }
                        if httpRes.StatusCode == 422 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return *res, httpRes, decodeError
                            }
                            return *res, httpRes, serviceError
                        }
                        if httpRes.StatusCode == 500 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return *res, httpRes, decodeError
                            }
                            return *res, httpRes, serviceError
                        }

    return *res, httpRes, err
}


// All parameters accepted by PINFunctionalityApi.GetRsaPublickey
type PINFunctionalityApiGetRsaPublickeyInput struct {
	purpose *string
	format *string
}

// Purpose of publicKey.
func (r PINFunctionalityApiGetRsaPublickeyInput) Purpose(purpose string) PINFunctionalityApiGetRsaPublickeyInput {
	r.purpose = &purpose
	return r
}

// Format of publicKey.
func (r PINFunctionalityApiGetRsaPublickeyInput) Format(format string) PINFunctionalityApiGetRsaPublickeyInput {
	r.format = &format
	return r
}


/*
Prepare a request for GetRsaPublickey

@return PINFunctionalityApiGetRsaPublickeyInput
*/
func (a *PINFunctionalityApi) GetRsaPublickeyInput() PINFunctionalityApiGetRsaPublickeyInput {
	return PINFunctionalityApiGetRsaPublickeyInput{
	}
}

/*
GetRsaPublickey Get RSA publicKey

Get RSA publicKey

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r PINFunctionalityApiGetRsaPublickeyInput - Request parameters, see GetRsaPublickeyInput
@return PublicKeyResponse, *http.Response, error
*/
func (a *PINFunctionalityApi) GetRsaPublickey(ctx context.Context, r PINFunctionalityApiGetRsaPublickeyInput) (PublicKeyResponse, *http.Response, error) {
    res := &PublicKeyResponse{}
	path := "/pins/publicKey"
    queryParams := url.Values{}
    headerParams := make(map[string]string)
    if r.purpose != nil {
        common.ParameterAddToQuery(queryParams, "purpose", r.purpose, "")
    }
    if r.format != nil {
        common.ParameterAddToQuery(queryParams, "format", r.format, "")
    }
    httpRes, err := common.SendAPIRequest(
        ctx,
        a.Client,
        nil,
        res,
        http.MethodGet,
        a.BasePath()+path,
        queryParams,
        headerParams,
    )

    if httpRes == nil {
        return *res, httpRes, err
    }

    var serviceError common.RestServiceError
                        if httpRes.StatusCode == 401 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return *res, httpRes, decodeError
                            }
                            return *res, httpRes, serviceError
                        }
                        if httpRes.StatusCode == 403 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return *res, httpRes, decodeError
                            }
                            return *res, httpRes, serviceError
                        }
                        if httpRes.StatusCode == 422 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return *res, httpRes, decodeError
                            }
                            return *res, httpRes, serviceError
                        }
                        if httpRes.StatusCode == 500 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return *res, httpRes, decodeError
                            }
                            return *res, httpRes, serviceError
                        }

    return *res, httpRes, err
}


// All parameters accepted by PINFunctionalityApi.RevealPin
type PINFunctionalityApiRevealPinInput struct {
	revealPinRequest *RevealPinRequest
}

func (r PINFunctionalityApiRevealPinInput) RevealPinRequest(revealPinRequest RevealPinRequest) PINFunctionalityApiRevealPinInput {
	r.revealPinRequest = &revealPinRequest
	return r
}


/*
Prepare a request for RevealPin

@return PINFunctionalityApiRevealPinInput
*/
func (a *PINFunctionalityApi) RevealPinInput() PINFunctionalityApiRevealPinInput {
	return PINFunctionalityApiRevealPinInput{
	}
}

/*
RevealPin Reveal Pin

Reveal Pin

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r PINFunctionalityApiRevealPinInput - Request parameters, see RevealPinInput
@return RevealPinResponse, *http.Response, error
*/
func (a *PINFunctionalityApi) RevealPin(ctx context.Context, r PINFunctionalityApiRevealPinInput) (RevealPinResponse, *http.Response, error) {
    res := &RevealPinResponse{}
	path := "/pins/reveal"
    queryParams := url.Values{}
    headerParams := make(map[string]string)
    httpRes, err := common.SendAPIRequest(
        ctx,
        a.Client,
        r.revealPinRequest,
        res,
        http.MethodPost,
        a.BasePath()+path,
        queryParams,
        headerParams,
    )

    if httpRes == nil {
        return *res, httpRes, err
    }

    var serviceError common.RestServiceError
                        if httpRes.StatusCode == 401 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return *res, httpRes, decodeError
                            }
                            return *res, httpRes, serviceError
                        }
                        if httpRes.StatusCode == 403 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return *res, httpRes, decodeError
                            }
                            return *res, httpRes, serviceError
                        }
                        if httpRes.StatusCode == 422 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return *res, httpRes, decodeError
                            }
                            return *res, httpRes, serviceError
                        }
                        if httpRes.StatusCode == 500 {
                            body, _ := ioutil.ReadAll(httpRes.Body)
                            decodeError := json.Unmarshal([]byte(body), &serviceError)
                            if decodeError != nil {
                                return *res, httpRes, decodeError
                            }
                            return *res, httpRes, serviceError
                        }

    return *res, httpRes, err
}

