/*
Configuration API

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package balanceplatform

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v21/src/common"
)

// checks if the Condition type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &Condition{}

// Condition struct for Condition
type Condition struct {
	// Define the type of balance about which you want to get notified. Possible values:  * **available**: the balance available for use.  * **balance**: the sum of transactions that have already been settled.  * **pending**: the sum of transactions that will be settled in the future.  * **reserved**: the balance currently held in reserve.
	BalanceType string `json:"balanceType"`
	// Define when you want to get notified about a balance change. Possible values:  * **greaterThan**: the balance in the account(s) exceeds the specified `value`.  * **greaterThanOrEqual**: the balance in the account(s) reaches or exceeds the specified `value`.  * **lessThan**: the balance in the account(s) drops below the specified `value`.  * **lessThanOrEqual**: the balance in the account(s) reaches to drops below the specified `value`.
	ConditionType string `json:"conditionType"`
	// The value limit in the specified balance type and currency, in minor units.
	Value int64 `json:"value"`
}

// NewCondition instantiates a new Condition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCondition(balanceType string, conditionType string, value int64) *Condition {
	this := Condition{}
	this.BalanceType = balanceType
	this.ConditionType = conditionType
	this.Value = value
	return &this
}

// NewConditionWithDefaults instantiates a new Condition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionWithDefaults() *Condition {
	this := Condition{}
	return &this
}

// GetBalanceType returns the BalanceType field value
func (o *Condition) GetBalanceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BalanceType
}

// GetBalanceTypeOk returns a tuple with the BalanceType field value
// and a boolean to check if the value has been set.
func (o *Condition) GetBalanceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BalanceType, true
}

// SetBalanceType sets field value
func (o *Condition) SetBalanceType(v string) {
	o.BalanceType = v
}

// GetConditionType returns the ConditionType field value
func (o *Condition) GetConditionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConditionType
}

// GetConditionTypeOk returns a tuple with the ConditionType field value
// and a boolean to check if the value has been set.
func (o *Condition) GetConditionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConditionType, true
}

// SetConditionType sets field value
func (o *Condition) SetConditionType(v string) {
	o.ConditionType = v
}

// GetValue returns the Value field value
func (o *Condition) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Condition) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Condition) SetValue(v int64) {
	o.Value = v
}

func (o Condition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Condition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["balanceType"] = o.BalanceType
	toSerialize["conditionType"] = o.ConditionType
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableCondition struct {
	value *Condition
	isSet bool
}

func (v NullableCondition) Get() *Condition {
	return v.value
}

func (v *NullableCondition) Set(val *Condition) {
	v.value = val
	v.isSet = true
}

func (v NullableCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCondition(val *Condition) *NullableCondition {
	return &NullableCondition{value: val, isSet: true}
}

func (v NullableCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func (o *Condition) isValidBalanceType() bool {
	var allowedEnumValues = []string{"balance", "available", "pending", "reserved"}
	for _, allowed := range allowedEnumValues {
		if o.GetBalanceType() == allowed {
			return true
		}
	}
	return false
}
func (o *Condition) isValidConditionType() bool {
	var allowedEnumValues = []string{"greaterThan", "greaterThanOrEqual", "lessThan", "lessThanOrEqual"}
	for _, allowed := range allowedEnumValues {
		if o.GetConditionType() == allowed {
			return true
		}
	}
	return false
}
