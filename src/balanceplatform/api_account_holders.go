/*
Configuration API

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package balanceplatform

import (
	_context "context"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v6/src/common"
)

// AccountHoldersApi AccountHoldersApi service
type AccountHoldersApi common.Service

/*
Get an account holder
Returns an account holder.
 * @param id The unique identifier of the account holder.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return AccountHolder
*/
func (a AccountHoldersApi) GetAccountHolder(id *string, ctxs ..._context.Context) (AccountHolder, *_nethttp.Response, error) {
	res := &AccountHolder{}
	path := "/accountHolders/{id}"
	path = strings.ReplaceAll(path, "{"+"id"+"}", *id)
	httpRes, err := a.Client.MakeHTTPGetRequest(res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Get all balance accounts of an account holder
Returns a paginated list of the balance accounts associated with an account holder. To fetch multiple pages, use the query parameters.   For example, to limit the page to 5 balance accounts and skip the first 10, use &#x60;/accountHolders/{id}/balanceAccounts?limit&#x3D;5&amp;offset&#x3D;10&#x60;.
 * @param id The unique identifier of the account holder.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaginatedBalanceAccountsResponse
*/
func (a AccountHoldersApi) GetAllBalanceAccountsOfAccountHolder(id *string, queryParams map[string]string, ctxs ..._context.Context) (PaginatedBalanceAccountsResponse, *_nethttp.Response, error) {
	res := &PaginatedBalanceAccountsResponse{}
	path := "/accountHolders/{id}/balanceAccounts"
	path = strings.ReplaceAll(path, "{"+"id"+"}", *id)
	queryString := url.Values{}
	if _, ok := queryParams["offset"]; ok {
		queryString.Add("offset", queryParams["offset"])
	}
	if _, ok := queryParams["limit"]; ok {
		queryString.Add("limit", queryParams["limit"])
	}
	httpRes, err := a.Client.MakeHTTPGetRequest(res, a.BasePath()+path+"?"+queryString.Encode(), ctxs...)
	return *res, httpRes, err
}

/*
Update an account holder
Updates an account holder. When updating an account holder resource, if a parameter is not provided in the request, it is left unchanged.
 * @param id The unique identifier of the account holder.
 * @param req AccountHolder - reference of AccountHolder).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return AccountHolder
*/
func (a AccountHoldersApi) UpdateAccountHolder(id *string, req *AccountHolder, ctxs ..._context.Context) (AccountHolder, *_nethttp.Response, error) {
	res := &AccountHolder{}
	path := "/accountHolders/{id}"
	path = strings.ReplaceAll(path, "{"+"id"+"}", *id)
	httpRes, err := a.Client.MakeHTTPPatchRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Create an account holder
Creates an account holder linked to a [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities).
 * @param req AccountHolderInfo - reference of AccountHolderInfo).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return AccountHolder
*/
func (a AccountHoldersApi) CreateAccountHolder(req *AccountHolderInfo, ctxs ..._context.Context) (AccountHolder, *_nethttp.Response, error) {
	res := &AccountHolder{}
	path := "/accountHolders"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}
