/*
Configuration API

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package balanceplatform

import (
	_context "context"
	_nethttp "net/http"
	"strings"

	"github.com/adyen/adyen-go-api-library/v6/src/common"
)

// TransactionRulesApi TransactionRulesApi service
type TransactionRulesApi common.Service

/*
Delete a transaction rule
Deletes a transaction rule.
 * @param transactionRuleId The unique identifier of the transaction rule.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return TransactionRule
*/
func (a TransactionRulesApi) DeleteTransactionRule(transactionRuleId *string, ctxs ..._context.Context) (TransactionRule, *_nethttp.Response, error) {
	res := &TransactionRule{}
	path := "/transactionRules/{transactionRuleId}"
	path = strings.ReplaceAll(path, "{"+"transactionRuleId"+"}", *transactionRuleId)
	httpRes, err := a.Client.MakeHTTPDeleteRequest(res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Get a transaction rule
Returns the details of a transaction rule.
 * @param transactionRuleId The unique identifier of the transaction rule.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return TransactionRuleResponse
*/
func (a TransactionRulesApi) GetTransactionRule(transactionRuleId *string, ctxs ..._context.Context) (TransactionRuleResponse, *_nethttp.Response, error) {
	res := &TransactionRuleResponse{}
	path := "/transactionRules/{transactionRuleId}"
	path = strings.ReplaceAll(path, "{"+"transactionRuleId"+"}", *transactionRuleId)
	httpRes, err := a.Client.MakeHTTPGetRequest(res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Update a transaction rule
Updates a transaction rule.   * To update only the status of a transaction rule, send only the &#x60;status&#x60; parameter. All other parameters not provided in the request are left unchanged.  * When updating any other parameter, you need to send all existing resource parameters. If you omit a parameter in the request, that parameter is removed from the resource.
 * @param transactionRuleId The unique identifier of the transaction rule.
 * @param req TransactionRuleInfo - reference of TransactionRuleInfo).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return TransactionRule
*/
func (a TransactionRulesApi) UpdateTransactionRule(transactionRuleId *string, req *TransactionRuleInfo, ctxs ..._context.Context) (TransactionRule, *_nethttp.Response, error) {
	res := &TransactionRule{}
	path := "/transactionRules/{transactionRuleId}"
	path = strings.ReplaceAll(path, "{"+"transactionRuleId"+"}", *transactionRuleId)
	httpRes, err := a.Client.MakeHTTPPatchRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Create a transaction rule
Creates a [transaction rule](https://docs.adyen.com/issuing/transaction-rules). When your user makes a transaction with their Adyen-issued card, the transaction is allowed or declined based on the conditions and outcome defined in the transaction rule. You can apply the transaction rule to several cards, such as all the cards in your platform, or to a specific card. For use cases, see [examples](https://docs.adyen.com/issuing/transaction-rules/examples).
 * @param req TransactionRuleInfo - reference of TransactionRuleInfo).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return TransactionRule
*/
func (a TransactionRulesApi) CreateTransactionRule(req *TransactionRuleInfo, ctxs ..._context.Context) (TransactionRule, *_nethttp.Response, error) {
	res := &TransactionRule{}
	path := "/transactionRules"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}
