/*
Configuration API

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package balanceplatform

import (
	"encoding/json"
    "github.com/adyen/adyen-go-api-library/v21/src/common"
	"fmt"
)

// SettingType the model 'SettingType'
type SettingType string

// List of SettingType
const (
	BALANCE SettingType = "balance"
)

// All allowed values of SettingType enum
var AllowedSettingTypeEnumValues = []SettingType{
	"balance",
}

func (v *SettingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SettingType(value)
	for _, existing := range AllowedSettingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SettingType", value)
}

// NewSettingTypeFromValue returns a pointer to a valid SettingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSettingTypeFromValue(v string) (*SettingType, error) {
	ev := SettingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SettingType: valid values are %v", v, AllowedSettingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SettingType) IsValid() bool {
	for _, existing := range AllowedSettingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SettingType value
func (v SettingType) Ptr() *SettingType {
	return &v
}

type NullableSettingType struct {
	value *SettingType
	isSet bool
}

func (v NullableSettingType) Get() *SettingType {
	return v.value
}

func (v *NullableSettingType) Set(val *SettingType) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingType) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingType(val *SettingType) *NullableSettingType {
	return &NullableSettingType{value: val, isSet: true}
}

func (v NullableSettingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

