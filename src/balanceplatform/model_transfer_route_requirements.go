/*
Configuration API

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package balanceplatform

import (
	"encoding/json"
	"fmt"
)

// TransferRouteRequirements - A set of rules defined by clearing houses and banking partners. Your transfer request must adhere to these rules to ensure successful initiation of transfer. Based on the priority, one or more requirements may be returned. Each requirement is defined with a `type` and `description`.
type TransferRouteRequirements struct {
	AddressRequirement                       *AddressRequirement
	AmountMinMaxRequirement                  *AmountMinMaxRequirement
	BankAccountIdentificationTypeRequirement *BankAccountIdentificationTypeRequirement
	PaymentInstrumentRequirement             *PaymentInstrumentRequirement
}

// AddressRequirementAsTransferRouteRequirements is a convenience function that returns AddressRequirement wrapped in TransferRouteRequirements
func AddressRequirementAsTransferRouteRequirements(v *AddressRequirement) TransferRouteRequirements {
	return TransferRouteRequirements{
		AddressRequirement: v,
	}
}

// AmountMinMaxRequirementAsTransferRouteRequirements is a convenience function that returns AmountMinMaxRequirement wrapped in TransferRouteRequirements
func AmountMinMaxRequirementAsTransferRouteRequirements(v *AmountMinMaxRequirement) TransferRouteRequirements {
	return TransferRouteRequirements{
		AmountMinMaxRequirement: v,
	}
}

// BankAccountIdentificationTypeRequirementAsTransferRouteRequirements is a convenience function that returns BankAccountIdentificationTypeRequirement wrapped in TransferRouteRequirements
func BankAccountIdentificationTypeRequirementAsTransferRouteRequirements(v *BankAccountIdentificationTypeRequirement) TransferRouteRequirements {
	return TransferRouteRequirements{
		BankAccountIdentificationTypeRequirement: v,
	}
}

// PaymentInstrumentRequirementAsTransferRouteRequirements is a convenience function that returns PaymentInstrumentRequirement wrapped in TransferRouteRequirements
func PaymentInstrumentRequirementAsTransferRouteRequirements(v *PaymentInstrumentRequirement) TransferRouteRequirements {
	return TransferRouteRequirements{
		PaymentInstrumentRequirement: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TransferRouteRequirements) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddressRequirement
	err = json.Unmarshal(data, &dst.AddressRequirement)
	if err == nil {
		jsonAddressRequirement, _ := json.Marshal(dst.AddressRequirement)
		if string(jsonAddressRequirement) == "{}" || !dst.AddressRequirement.isValidType() { // empty struct
			dst.AddressRequirement = nil
		} else {
			match++
		}
	} else {
		dst.AddressRequirement = nil
	}

	// try to unmarshal data into AmountMinMaxRequirement
	err = json.Unmarshal(data, &dst.AmountMinMaxRequirement)
	if err == nil {
		jsonAmountMinMaxRequirement, _ := json.Marshal(dst.AmountMinMaxRequirement)
		if string(jsonAmountMinMaxRequirement) == "{}" || !dst.AmountMinMaxRequirement.isValidType() { // empty struct
			dst.AmountMinMaxRequirement = nil
		} else {
			match++
		}
	} else {
		dst.AmountMinMaxRequirement = nil
	}

	// try to unmarshal data into BankAccountIdentificationTypeRequirement
	err = json.Unmarshal(data, &dst.BankAccountIdentificationTypeRequirement)
	if err == nil {
		jsonBankAccountIdentificationTypeRequirement, _ := json.Marshal(dst.BankAccountIdentificationTypeRequirement)
		if string(jsonBankAccountIdentificationTypeRequirement) == "{}" || !dst.BankAccountIdentificationTypeRequirement.isValidType() { // empty struct
			dst.BankAccountIdentificationTypeRequirement = nil
		} else {
			match++
		}
	} else {
		dst.BankAccountIdentificationTypeRequirement = nil
	}

	// try to unmarshal data into PaymentInstrumentRequirement
	err = json.Unmarshal(data, &dst.PaymentInstrumentRequirement)
	if err == nil {
		jsonPaymentInstrumentRequirement, _ := json.Marshal(dst.PaymentInstrumentRequirement)
		if string(jsonPaymentInstrumentRequirement) == "{}" || !dst.PaymentInstrumentRequirement.isValidType() { // empty struct
			dst.PaymentInstrumentRequirement = nil
		} else {
			match++
		}
	} else {
		dst.PaymentInstrumentRequirement = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddressRequirement = nil
		dst.AmountMinMaxRequirement = nil
		dst.BankAccountIdentificationTypeRequirement = nil
		dst.PaymentInstrumentRequirement = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TransferRouteRequirements)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TransferRouteRequirements)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransferRouteRequirements) MarshalJSON() ([]byte, error) {
	if src.AddressRequirement != nil {
		return json.Marshal(&src.AddressRequirement)
	}

	if src.AmountMinMaxRequirement != nil {
		return json.Marshal(&src.AmountMinMaxRequirement)
	}

	if src.BankAccountIdentificationTypeRequirement != nil {
		return json.Marshal(&src.BankAccountIdentificationTypeRequirement)
	}

	if src.PaymentInstrumentRequirement != nil {
		return json.Marshal(&src.PaymentInstrumentRequirement)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TransferRouteRequirements) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddressRequirement != nil {
		return obj.AddressRequirement
	}

	if obj.AmountMinMaxRequirement != nil {
		return obj.AmountMinMaxRequirement
	}

	if obj.BankAccountIdentificationTypeRequirement != nil {
		return obj.BankAccountIdentificationTypeRequirement
	}

	if obj.PaymentInstrumentRequirement != nil {
		return obj.PaymentInstrumentRequirement
	}

	// all schemas are nil
	return nil
}

type NullableTransferRouteRequirements struct {
	value *TransferRouteRequirements
	isSet bool
}

func (v NullableTransferRouteRequirements) Get() *TransferRouteRequirements {
	return v.value
}

func (v *NullableTransferRouteRequirements) Set(val *TransferRouteRequirements) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferRouteRequirements) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferRouteRequirements) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferRouteRequirements(val *TransferRouteRequirements) *NullableTransferRouteRequirements {
	return &NullableTransferRouteRequirements{value: val, isSet: true}
}

func (v NullableTransferRouteRequirements) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferRouteRequirements) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
