/*
Configuration API

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package balanceplatform

import (
	"context"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v21/src/common"
)

// BalancesApi service
type BalancesApi common.Service

// All parameters accepted by BalancesApi.CreateWebhookSetting
type BalancesApiCreateWebhookSettingInput struct {
	balancePlatformId         string
	webhookId                 string
	balanceWebhookSettingInfo *BalanceWebhookSettingInfo
}

func (r BalancesApiCreateWebhookSettingInput) BalanceWebhookSettingInfo(balanceWebhookSettingInfo BalanceWebhookSettingInfo) BalancesApiCreateWebhookSettingInput {
	r.balanceWebhookSettingInfo = &balanceWebhookSettingInfo
	return r
}

/*
Prepare a request for CreateWebhookSetting
@param balancePlatformId The unique identifier of the balance platform.@param webhookId The unique identifier of the balance webhook.
@return BalancesApiCreateWebhookSettingInput
*/
func (a *BalancesApi) CreateWebhookSettingInput(balancePlatformId string, webhookId string) BalancesApiCreateWebhookSettingInput {
	return BalancesApiCreateWebhookSettingInput{
		balancePlatformId: balancePlatformId,
		webhookId:         webhookId,
	}
}

/*
CreateWebhookSetting Create a balance webhook setting

Configures the criteria for triggering [balance webhooks](https://docs.adyen.com/api-explorer/balance-webhooks/1/post/balancePlatform.balanceAccount.balance.updated).

Adyen sends balance webhooks to notify you of balance changes in your balance platform. They can be triggered when the balance reaches, exceeds, or drops below a specific value in a specific currency.

You can get notified about balance changes in your entire balance platform, in the balance accounts of a specific user, or a specific balance account. The hierarchy between the webhook settings are based on the following business logic:

* Settings on a higher level apply to all lower level resources (balance platform > account holder > balance acocunt).

* The most granular setting overrides higher level settings (balance account > account holder > balance platform).

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r BalancesApiCreateWebhookSettingInput - Request parameters, see CreateWebhookSettingInput
@return WebhookSetting, *http.Response, error
*/
func (a *BalancesApi) CreateWebhookSetting(ctx context.Context, r BalancesApiCreateWebhookSettingInput) (WebhookSetting, *http.Response, error) {
	res := &WebhookSetting{}
	path := "/balancePlatforms/{balancePlatformId}/webhooks/{webhookId}/settings"
	path = strings.Replace(path, "{"+"balancePlatformId"+"}", url.PathEscape(common.ParameterValueToString(r.balancePlatformId, "balancePlatformId")), -1)
	path = strings.Replace(path, "{"+"webhookId"+"}", url.PathEscape(common.ParameterValueToString(r.webhookId, "webhookId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		ctx,
		a.Client,
		r.balanceWebhookSettingInfo,
		res,
		http.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes == nil {
		return *res, httpRes, err
	}

	var serviceError common.RestServiceError
	if httpRes.StatusCode == 400 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 401 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 403 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 404 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 422 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 500 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}

	return *res, httpRes, err
}

// All parameters accepted by BalancesApi.DeleteWebhookSetting
type BalancesApiDeleteWebhookSettingInput struct {
	balancePlatformId string
	webhookId         string
	settingId         string
}

/*
Prepare a request for DeleteWebhookSetting
@param balancePlatformId The unique identifier of the balance platform.@param webhookId The unique identifier of the balance webhook.@param settingId The unique identifier of the balance webhook setting.
@return BalancesApiDeleteWebhookSettingInput
*/
func (a *BalancesApi) DeleteWebhookSettingInput(balancePlatformId string, webhookId string, settingId string) BalancesApiDeleteWebhookSettingInput {
	return BalancesApiDeleteWebhookSettingInput{
		balancePlatformId: balancePlatformId,
		webhookId:         webhookId,
		settingId:         settingId,
	}
}

/*
DeleteWebhookSetting Delete a balance webhook setting by id

Deletes a balance webhook setting that contains the conditions for triggering [balance webhooks](https://docs.adyen.com/api-explorer/balance-webhooks/latest/post/balanceAccount.balance.updated).

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r BalancesApiDeleteWebhookSettingInput - Request parameters, see DeleteWebhookSettingInput
@return *http.Response, error
*/
func (a *BalancesApi) DeleteWebhookSetting(ctx context.Context, r BalancesApiDeleteWebhookSettingInput) (*http.Response, error) {
	var res interface{}
	path := "/balancePlatforms/{balancePlatformId}/webhooks/{webhookId}/settings/{settingId}"
	path = strings.Replace(path, "{"+"balancePlatformId"+"}", url.PathEscape(common.ParameterValueToString(r.balancePlatformId, "balancePlatformId")), -1)
	path = strings.Replace(path, "{"+"webhookId"+"}", url.PathEscape(common.ParameterValueToString(r.webhookId, "webhookId")), -1)
	path = strings.Replace(path, "{"+"settingId"+"}", url.PathEscape(common.ParameterValueToString(r.settingId, "settingId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		ctx,
		a.Client,
		nil,
		res,
		http.MethodDelete,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes == nil {
		return httpRes, err
	}

	var serviceError common.RestServiceError
	if httpRes.StatusCode == 400 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return httpRes, decodeError
		}
		return httpRes, serviceError
	}
	if httpRes.StatusCode == 401 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return httpRes, decodeError
		}
		return httpRes, serviceError
	}
	if httpRes.StatusCode == 403 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return httpRes, decodeError
		}
		return httpRes, serviceError
	}
	if httpRes.StatusCode == 404 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return httpRes, decodeError
		}
		return httpRes, serviceError
	}
	if httpRes.StatusCode == 422 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return httpRes, decodeError
		}
		return httpRes, serviceError
	}
	if httpRes.StatusCode == 500 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return httpRes, decodeError
		}
		return httpRes, serviceError
	}

	return httpRes, err
}

// All parameters accepted by BalancesApi.GetAllWebhookSettings
type BalancesApiGetAllWebhookSettingsInput struct {
	balancePlatformId string
	webhookId         string
}

/*
Prepare a request for GetAllWebhookSettings
@param balancePlatformId The unique identifier of the balance platform.@param webhookId The unique identifier of the balance webhook.
@return BalancesApiGetAllWebhookSettingsInput
*/
func (a *BalancesApi) GetAllWebhookSettingsInput(balancePlatformId string, webhookId string) BalancesApiGetAllWebhookSettingsInput {
	return BalancesApiGetAllWebhookSettingsInput{
		balancePlatformId: balancePlatformId,
		webhookId:         webhookId,
	}
}

/*
GetAllWebhookSettings Get all balance webhook settings

Returns all balance webhook settings configured for triggering [balance webhooks](https://docs.adyen.com/api-explorer/balance-webhooks/latest/post/balanceAccount.balance.updated).

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r BalancesApiGetAllWebhookSettingsInput - Request parameters, see GetAllWebhookSettingsInput
@return WebhookSettings, *http.Response, error
*/
func (a *BalancesApi) GetAllWebhookSettings(ctx context.Context, r BalancesApiGetAllWebhookSettingsInput) (WebhookSettings, *http.Response, error) {
	res := &WebhookSettings{}
	path := "/balancePlatforms/{balancePlatformId}/webhooks/{webhookId}/settings"
	path = strings.Replace(path, "{"+"balancePlatformId"+"}", url.PathEscape(common.ParameterValueToString(r.balancePlatformId, "balancePlatformId")), -1)
	path = strings.Replace(path, "{"+"webhookId"+"}", url.PathEscape(common.ParameterValueToString(r.webhookId, "webhookId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		ctx,
		a.Client,
		nil,
		res,
		http.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes == nil {
		return *res, httpRes, err
	}

	var serviceError common.RestServiceError
	if httpRes.StatusCode == 400 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 401 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 403 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 404 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 422 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 500 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}

	return *res, httpRes, err
}

// All parameters accepted by BalancesApi.GetWebhookSetting
type BalancesApiGetWebhookSettingInput struct {
	balancePlatformId string
	webhookId         string
	settingId         string
}

/*
Prepare a request for GetWebhookSetting
@param balancePlatformId The unique identifier of the balance platform.@param webhookId The unique identifier of the balance webhook.@param settingId The unique identifier of the balance webhook setting.
@return BalancesApiGetWebhookSettingInput
*/
func (a *BalancesApi) GetWebhookSettingInput(balancePlatformId string, webhookId string, settingId string) BalancesApiGetWebhookSettingInput {
	return BalancesApiGetWebhookSettingInput{
		balancePlatformId: balancePlatformId,
		webhookId:         webhookId,
		settingId:         settingId,
	}
}

/*
GetWebhookSetting Get a balance webhook setting by id

Returns the details of a specific balance webhook setting configured for triggering [balance webhooks](https://docs.adyen.com/api-explorer/balance-webhooks/latest/post/balanceAccount.balance.updated).

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r BalancesApiGetWebhookSettingInput - Request parameters, see GetWebhookSettingInput
@return WebhookSetting, *http.Response, error
*/
func (a *BalancesApi) GetWebhookSetting(ctx context.Context, r BalancesApiGetWebhookSettingInput) (WebhookSetting, *http.Response, error) {
	res := &WebhookSetting{}
	path := "/balancePlatforms/{balancePlatformId}/webhooks/{webhookId}/settings/{settingId}"
	path = strings.Replace(path, "{"+"balancePlatformId"+"}", url.PathEscape(common.ParameterValueToString(r.balancePlatformId, "balancePlatformId")), -1)
	path = strings.Replace(path, "{"+"webhookId"+"}", url.PathEscape(common.ParameterValueToString(r.webhookId, "webhookId")), -1)
	path = strings.Replace(path, "{"+"settingId"+"}", url.PathEscape(common.ParameterValueToString(r.settingId, "settingId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		ctx,
		a.Client,
		nil,
		res,
		http.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes == nil {
		return *res, httpRes, err
	}

	var serviceError common.RestServiceError
	if httpRes.StatusCode == 400 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 401 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 403 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 404 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 422 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 500 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}

	return *res, httpRes, err
}

// All parameters accepted by BalancesApi.UpdateWebhookSetting
type BalancesApiUpdateWebhookSettingInput struct {
	balancePlatformId               string
	webhookId                       string
	settingId                       string
	balanceWebhookSettingInfoUpdate *BalanceWebhookSettingInfoUpdate
}

func (r BalancesApiUpdateWebhookSettingInput) BalanceWebhookSettingInfoUpdate(balanceWebhookSettingInfoUpdate BalanceWebhookSettingInfoUpdate) BalancesApiUpdateWebhookSettingInput {
	r.balanceWebhookSettingInfoUpdate = &balanceWebhookSettingInfoUpdate
	return r
}

/*
Prepare a request for UpdateWebhookSetting
@param balancePlatformId The unique identifier of the balance platform.@param webhookId The unique identifier of the balance webhook.@param settingId The unique identifier of the balance webhook setting.
@return BalancesApiUpdateWebhookSettingInput
*/
func (a *BalancesApi) UpdateWebhookSettingInput(balancePlatformId string, webhookId string, settingId string) BalancesApiUpdateWebhookSettingInput {
	return BalancesApiUpdateWebhookSettingInput{
		balancePlatformId: balancePlatformId,
		webhookId:         webhookId,
		settingId:         settingId,
	}
}

/*
UpdateWebhookSetting Update a balance webhook setting by id

Updates the conditions the balance change needs to meet for Adyen to send a [balance webhook](https://docs.adyen.com/api-explorer/balance-webhooks/latest/post/balanceAccount.balance.updated).

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r BalancesApiUpdateWebhookSettingInput - Request parameters, see UpdateWebhookSettingInput
@return WebhookSetting, *http.Response, error
*/
func (a *BalancesApi) UpdateWebhookSetting(ctx context.Context, r BalancesApiUpdateWebhookSettingInput) (WebhookSetting, *http.Response, error) {
	res := &WebhookSetting{}
	path := "/balancePlatforms/{balancePlatformId}/webhooks/{webhookId}/settings/{settingId}"
	path = strings.Replace(path, "{"+"balancePlatformId"+"}", url.PathEscape(common.ParameterValueToString(r.balancePlatformId, "balancePlatformId")), -1)
	path = strings.Replace(path, "{"+"webhookId"+"}", url.PathEscape(common.ParameterValueToString(r.webhookId, "webhookId")), -1)
	path = strings.Replace(path, "{"+"settingId"+"}", url.PathEscape(common.ParameterValueToString(r.settingId, "settingId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		ctx,
		a.Client,
		r.balanceWebhookSettingInfoUpdate,
		res,
		http.MethodPatch,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes == nil {
		return *res, httpRes, err
	}

	var serviceError common.RestServiceError
	if httpRes.StatusCode == 400 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 401 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 403 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 404 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 422 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}
	if httpRes.StatusCode == 500 {
		body, _ := ioutil.ReadAll(httpRes.Body)
		decodeError := json.Unmarshal([]byte(body), &serviceError)
		if decodeError != nil {
			return *res, httpRes, decodeError
		}
		return *res, httpRes, serviceError
	}

	return *res, httpRes, err
}
