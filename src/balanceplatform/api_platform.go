/*
Configuration API

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package balanceplatform

import (
	_context "context"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v6/src/common"
)

// PlatformApi PlatformApi service
type PlatformApi common.Service

/*
Get a balance platform
Returns a balance platform.
 * @param id The unique identifier of the balance platform.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return BalancePlatform
*/
func (a PlatformApi) GetBalancePlatform(id *string, ctxs ..._context.Context) (BalancePlatform, *_nethttp.Response, error) {
	res := &BalancePlatform{}
	path := "/balancePlatforms/{id}"
	path = strings.ReplaceAll(path, "{"+"id"+"}", *id)
	httpRes, err := a.Client.MakeHTTPGetRequest(res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Get all account holders under a balance platform
Returns a paginated list of all the account holders that belong to the balance platform. To fetch multiple pages, use the query parameters.   For example, to limit the page to 5 account holders and to skip the first 20, use &#x60;/balancePlatforms/{id}/accountHolders?limit&#x3D;5&amp;offset&#x3D;20&#x60;.
 * @param id The unique identifier of the balance platform.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaginatedAccountHoldersResponse
*/
func (a PlatformApi) GetAllAccountHoldersUnderBalancePlatform(id *string, queryParams map[string]string, ctxs ..._context.Context) (PaginatedAccountHoldersResponse, *_nethttp.Response, error) {
	res := &PaginatedAccountHoldersResponse{}
	path := "/balancePlatforms/{id}/accountHolders"
	path = strings.ReplaceAll(path, "{"+"id"+"}", *id)
	queryString := url.Values{}
	if _, ok := queryParams["offset"]; ok {
		queryString.Add("offset", queryParams["offset"])
	}
	if _, ok := queryParams["limit"]; ok {
		queryString.Add("limit", queryParams["limit"])
	}
	httpRes, err := a.Client.MakeHTTPGetRequest(res, a.BasePath()+path+"?"+queryString.Encode(), ctxs...)
	return *res, httpRes, err
}
