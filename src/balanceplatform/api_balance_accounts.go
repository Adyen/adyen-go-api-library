/*
Configuration API

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package balanceplatform

import (
	_context "context"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v6/src/common"
)

// BalanceAccountsApi BalanceAccountsApi service
type BalanceAccountsApi common.Service

/*
Delete a sweep
Deletes a sweep for a balance account.
 * @param balanceAccountId The unique identifier of the balance account.
 * @param sweepId The unique identifier of the sweep.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
*/
func (a BalanceAccountsApi) DeleteSweep(balanceAccountId *string, sweepId *string, ctxs ..._context.Context) (*_nethttp.Response, error) {
	var res interface{}
	path := "/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}"
	path = strings.ReplaceAll(path, "{"+"balanceAccountId"+"}", *balanceAccountId)
	path = strings.ReplaceAll(path, "{"+"sweepId"+"}", *sweepId)
	httpRes, err := a.Client.MakeHTTPDeleteRequest(res, a.BasePath()+path, ctxs...)
	return httpRes, err
}

/*
Get all sweeps for a balance account
Returns a list of the sweeps configured for a balance account.  To fetch multiple pages, use the query parameters. For example, to limit the page to 5 sweeps and to skip the first 10, use &#x60;/balanceAccounts/{balanceAccountId}/sweeps?limit&#x3D;5&amp;offset&#x3D;10&#x60;.
 * @param balanceAccountId The unique identifier of the balance account.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return BalanceSweepConfigurationsResponse
*/
func (a BalanceAccountsApi) GetAllSweepsForBalanceAccount(balanceAccountId *string, queryParams map[string]string, ctxs ..._context.Context) (BalanceSweepConfigurationsResponse, *_nethttp.Response, error) {
	res := &BalanceSweepConfigurationsResponse{}
	path := "/balanceAccounts/{balanceAccountId}/sweeps"
	path = strings.ReplaceAll(path, "{"+"balanceAccountId"+"}", *balanceAccountId)
	queryString := url.Values{}
	if _, ok := queryParams["offset"]; ok {
		queryString.Add("offset", queryParams["offset"])
	}
	if _, ok := queryParams["limit"]; ok {
		queryString.Add("limit", queryParams["limit"])
	}
	httpRes, err := a.Client.MakeHTTPGetRequest(res, a.BasePath()+path+"?"+queryString.Encode(), ctxs...)
	return *res, httpRes, err
}

/*
Get a sweep
Returns a sweep.
 * @param balanceAccountId The unique identifier of the balance account.
 * @param sweepId The unique identifier of the sweep.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return SweepConfigurationV2
*/
func (a BalanceAccountsApi) GetSweep(balanceAccountId *string, sweepId *string, ctxs ..._context.Context) (SweepConfigurationV2, *_nethttp.Response, error) {
	res := &SweepConfigurationV2{}
	path := "/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}"
	path = strings.ReplaceAll(path, "{"+"balanceAccountId"+"}", *balanceAccountId)
	path = strings.ReplaceAll(path, "{"+"sweepId"+"}", *sweepId)
	httpRes, err := a.Client.MakeHTTPGetRequest(res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Get a balance account
Returns a balance account and its balances for the default currency and other currencies with a non-zero balance.
 * @param id The unique identifier of the balance account.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return BalanceAccount
*/
func (a BalanceAccountsApi) GetBalanceAccount(id *string, ctxs ..._context.Context) (BalanceAccount, *_nethttp.Response, error) {
	res := &BalanceAccount{}
	path := "/balanceAccounts/{id}"
	path = strings.ReplaceAll(path, "{"+"id"+"}", *id)
	httpRes, err := a.Client.MakeHTTPGetRequest(res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Get all payment instruments for a balance account
Returns a paginated list of the payment instruments associated with a balance account.   To fetch multiple pages, use the query parameters.For example, to limit the page to 3 payment instruments and to skip the first 6, use &#x60;/balanceAccounts/{id}/paymentInstruments?limit&#x3D;3&amp;offset&#x3D;6&#x60;.
 * @param id The unique identifier of the balance account.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaginatedPaymentInstrumentsResponse
*/
func (a BalanceAccountsApi) GetAllPaymentInstrumentsForBalanceAccount(id *string, queryParams map[string]string, ctxs ..._context.Context) (PaginatedPaymentInstrumentsResponse, *_nethttp.Response, error) {
	res := &PaginatedPaymentInstrumentsResponse{}
	path := "/balanceAccounts/{id}/paymentInstruments"
	path = strings.ReplaceAll(path, "{"+"id"+"}", *id)
	queryString := url.Values{}
	if _, ok := queryParams["offset"]; ok {
		queryString.Add("offset", queryParams["offset"])
	}
	if _, ok := queryParams["limit"]; ok {
		queryString.Add("limit", queryParams["limit"])
	}
	httpRes, err := a.Client.MakeHTTPGetRequest(res, a.BasePath()+path+"?"+queryString.Encode(), ctxs...)
	return *res, httpRes, err
}

/*
Update a sweep
Updates a sweep. When updating a sweep resource, note that if a request parameter is not provided, the parameter is left unchanged.
 * @param balanceAccountId The unique identifier of the balance account.
 * @param sweepId The unique identifier of the sweep.
 * @param req SweepConfigurationV2 - reference of SweepConfigurationV2).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return SweepConfigurationV2
*/
func (a BalanceAccountsApi) UpdateSweep(balanceAccountId *string, sweepId *string, req *SweepConfigurationV2, ctxs ..._context.Context) (SweepConfigurationV2, *_nethttp.Response, error) {
	res := &SweepConfigurationV2{}
	path := "/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}"
	path = strings.ReplaceAll(path, "{"+"balanceAccountId"+"}", *balanceAccountId)
	path = strings.ReplaceAll(path, "{"+"sweepId"+"}", *sweepId)
	httpRes, err := a.Client.MakeHTTPPatchRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Update a balance account
Updates a balance account.
 * @param id The unique identifier of the balance account.
 * @param req BalanceAccountUpdateRequest - reference of BalanceAccountUpdateRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return BalanceAccount
*/
func (a BalanceAccountsApi) UpdateBalanceAccount(id *string, req *BalanceAccountUpdateRequest, ctxs ..._context.Context) (BalanceAccount, *_nethttp.Response, error) {
	res := &BalanceAccount{}
	path := "/balanceAccounts/{id}"
	path = strings.ReplaceAll(path, "{"+"id"+"}", *id)
	httpRes, err := a.Client.MakeHTTPPatchRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Create a balance account
Creates a balance account that holds the funds of the associated account holder.
 * @param req BalanceAccountInfo - reference of BalanceAccountInfo).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return BalanceAccount
*/
func (a BalanceAccountsApi) CreateBalanceAccount(req *BalanceAccountInfo, ctxs ..._context.Context) (BalanceAccount, *_nethttp.Response, error) {
	res := &BalanceAccount{}
	path := "/balanceAccounts"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Create a sweep
Creates a sweep that results in moving funds from or to a balance account.  A sweep pulls in or pushes out funds based on a defined schedule, amount, currency, and a source or a destination.
 * @param balanceAccountId The unique identifier of the balance account.
 * @param req SweepConfigurationV2 - reference of SweepConfigurationV2).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return SweepConfigurationV2
*/
func (a BalanceAccountsApi) CreateSweep(balanceAccountId *string, req *SweepConfigurationV2, ctxs ..._context.Context) (SweepConfigurationV2, *_nethttp.Response, error) {
	res := &SweepConfigurationV2{}
	path := "/balanceAccounts/{balanceAccountId}/sweeps"
	path = strings.ReplaceAll(path, "{"+"balanceAccountId"+"}", *balanceAccountId)
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}
