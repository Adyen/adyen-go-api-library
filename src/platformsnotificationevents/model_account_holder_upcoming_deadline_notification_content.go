/*
 * Adyen for Platforms: Notifications
 *
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/platforms/notifications).
 *
 * API version: 6
 * Contact: support@adyen.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformsnotificationevents

import (
	"encoding/json"
)

// AccountHolderUpcomingDeadlineNotificationContent struct for AccountHolderUpcomingDeadlineNotificationContent
type AccountHolderUpcomingDeadlineNotificationContent struct {
	// The code of the account holder whom the event refers to.
	AccountHolderCode *string `json:"accountHolderCode,omitempty"`
	// The event name that will be trigger if no action is taken.
	Event         *string    `json:"event,omitempty"`
	ExecutionDate *LocalDate `json:"executionDate,omitempty"`
	// The reason that leads to scheduling of the event.
	Reason *string `json:"reason,omitempty"`
}

// NewAccountHolderUpcomingDeadlineNotificationContent instantiates a new AccountHolderUpcomingDeadlineNotificationContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountHolderUpcomingDeadlineNotificationContent() *AccountHolderUpcomingDeadlineNotificationContent {
	this := AccountHolderUpcomingDeadlineNotificationContent{}
	return &this
}

// NewAccountHolderUpcomingDeadlineNotificationContentWithDefaults instantiates a new AccountHolderUpcomingDeadlineNotificationContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountHolderUpcomingDeadlineNotificationContentWithDefaults() *AccountHolderUpcomingDeadlineNotificationContent {
	this := AccountHolderUpcomingDeadlineNotificationContent{}
	return &this
}

// GetAccountHolderCode returns the AccountHolderCode field value if set, zero value otherwise.
func (o *AccountHolderUpcomingDeadlineNotificationContent) GetAccountHolderCode() string {
	if o == nil || o.AccountHolderCode == nil {
		var ret string
		return ret
	}
	return *o.AccountHolderCode
}

// GetAccountHolderCodeOk returns a tuple with the AccountHolderCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountHolderUpcomingDeadlineNotificationContent) GetAccountHolderCodeOk() (*string, bool) {
	if o == nil || o.AccountHolderCode == nil {
		return nil, false
	}
	return o.AccountHolderCode, true
}

// HasAccountHolderCode returns a boolean if a field has been set.
func (o *AccountHolderUpcomingDeadlineNotificationContent) HasAccountHolderCode() bool {
	if o != nil && o.AccountHolderCode != nil {
		return true
	}

	return false
}

// SetAccountHolderCode gets a reference to the given string and assigns it to the AccountHolderCode field.
func (o *AccountHolderUpcomingDeadlineNotificationContent) SetAccountHolderCode(v string) {
	o.AccountHolderCode = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *AccountHolderUpcomingDeadlineNotificationContent) GetEvent() string {
	if o == nil || o.Event == nil {
		var ret string
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountHolderUpcomingDeadlineNotificationContent) GetEventOk() (*string, bool) {
	if o == nil || o.Event == nil {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *AccountHolderUpcomingDeadlineNotificationContent) HasEvent() bool {
	if o != nil && o.Event != nil {
		return true
	}

	return false
}

// SetEvent gets a reference to the given string and assigns it to the Event field.
func (o *AccountHolderUpcomingDeadlineNotificationContent) SetEvent(v string) {
	o.Event = &v
}

// GetExecutionDate returns the ExecutionDate field value if set, zero value otherwise.
func (o *AccountHolderUpcomingDeadlineNotificationContent) GetExecutionDate() LocalDate {
	if o == nil || o.ExecutionDate == nil {
		var ret LocalDate
		return ret
	}
	return *o.ExecutionDate
}

// GetExecutionDateOk returns a tuple with the ExecutionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountHolderUpcomingDeadlineNotificationContent) GetExecutionDateOk() (*LocalDate, bool) {
	if o == nil || o.ExecutionDate == nil {
		return nil, false
	}
	return o.ExecutionDate, true
}

// HasExecutionDate returns a boolean if a field has been set.
func (o *AccountHolderUpcomingDeadlineNotificationContent) HasExecutionDate() bool {
	if o != nil && o.ExecutionDate != nil {
		return true
	}

	return false
}

// SetExecutionDate gets a reference to the given LocalDate and assigns it to the ExecutionDate field.
func (o *AccountHolderUpcomingDeadlineNotificationContent) SetExecutionDate(v LocalDate) {
	o.ExecutionDate = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *AccountHolderUpcomingDeadlineNotificationContent) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountHolderUpcomingDeadlineNotificationContent) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *AccountHolderUpcomingDeadlineNotificationContent) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *AccountHolderUpcomingDeadlineNotificationContent) SetReason(v string) {
	o.Reason = &v
}

func (o AccountHolderUpcomingDeadlineNotificationContent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountHolderCode != nil {
		toSerialize["accountHolderCode"] = o.AccountHolderCode
	}
	if o.Event != nil {
		toSerialize["event"] = o.Event
	}
	if o.ExecutionDate != nil {
		toSerialize["executionDate"] = o.ExecutionDate
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableAccountHolderUpcomingDeadlineNotificationContent struct {
	value *AccountHolderUpcomingDeadlineNotificationContent
	isSet bool
}

func (v NullableAccountHolderUpcomingDeadlineNotificationContent) Get() *AccountHolderUpcomingDeadlineNotificationContent {
	return v.value
}

func (v *NullableAccountHolderUpcomingDeadlineNotificationContent) Set(val *AccountHolderUpcomingDeadlineNotificationContent) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountHolderUpcomingDeadlineNotificationContent) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountHolderUpcomingDeadlineNotificationContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountHolderUpcomingDeadlineNotificationContent(val *AccountHolderUpcomingDeadlineNotificationContent) *NullableAccountHolderUpcomingDeadlineNotificationContent {
	return &NullableAccountHolderUpcomingDeadlineNotificationContent{value: val, isSet: true}
}

func (v NullableAccountHolderUpcomingDeadlineNotificationContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountHolderUpcomingDeadlineNotificationContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
