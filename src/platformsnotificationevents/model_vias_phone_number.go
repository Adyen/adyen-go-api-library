/*
 * Adyen for Platforms: Notifications
 *
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/platforms/notifications).
 *
 * API version: 6
 * Contact: support@adyen.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformsnotificationevents

import (
	"encoding/json"
)

// ViasPhoneNumber struct for ViasPhoneNumber
type ViasPhoneNumber struct {
	// The two-character country code of the phone number. >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
	PhoneCountryCode string `json:"phoneCountryCode"`
	// The phone number. >The inclusion of the phone number country code is not necessary.
	PhoneNumber string `json:"phoneNumber"`
	// The type of the phone number. >The following values are permitted: `Landline`, `Mobile`, `SIP`, `Fax`.
	PhoneType *string `json:"phoneType,omitempty"`
}

// NewViasPhoneNumber instantiates a new ViasPhoneNumber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViasPhoneNumber(phoneCountryCode string, phoneNumber string) *ViasPhoneNumber {
	this := ViasPhoneNumber{}
	this.PhoneCountryCode = phoneCountryCode
	this.PhoneNumber = phoneNumber
	return &this
}

// NewViasPhoneNumberWithDefaults instantiates a new ViasPhoneNumber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViasPhoneNumberWithDefaults() *ViasPhoneNumber {
	this := ViasPhoneNumber{}
	return &this
}

// GetPhoneCountryCode returns the PhoneCountryCode field value
func (o *ViasPhoneNumber) GetPhoneCountryCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PhoneCountryCode
}

// GetPhoneCountryCodeOk returns a tuple with the PhoneCountryCode field value
// and a boolean to check if the value has been set.
func (o *ViasPhoneNumber) GetPhoneCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PhoneCountryCode, true
}

// SetPhoneCountryCode sets field value
func (o *ViasPhoneNumber) SetPhoneCountryCode(v string) {
	o.PhoneCountryCode = v
}

// GetPhoneNumber returns the PhoneNumber field value
func (o *ViasPhoneNumber) GetPhoneNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value
// and a boolean to check if the value has been set.
func (o *ViasPhoneNumber) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PhoneNumber, true
}

// SetPhoneNumber sets field value
func (o *ViasPhoneNumber) SetPhoneNumber(v string) {
	o.PhoneNumber = v
}

// GetPhoneType returns the PhoneType field value if set, zero value otherwise.
func (o *ViasPhoneNumber) GetPhoneType() string {
	if o == nil || o.PhoneType == nil {
		var ret string
		return ret
	}
	return *o.PhoneType
}

// GetPhoneTypeOk returns a tuple with the PhoneType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViasPhoneNumber) GetPhoneTypeOk() (*string, bool) {
	if o == nil || o.PhoneType == nil {
		return nil, false
	}
	return o.PhoneType, true
}

// HasPhoneType returns a boolean if a field has been set.
func (o *ViasPhoneNumber) HasPhoneType() bool {
	if o != nil && o.PhoneType != nil {
		return true
	}

	return false
}

// SetPhoneType gets a reference to the given string and assigns it to the PhoneType field.
func (o *ViasPhoneNumber) SetPhoneType(v string) {
	o.PhoneType = &v
}

func (o ViasPhoneNumber) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["phoneCountryCode"] = o.PhoneCountryCode
	}
	if true {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if o.PhoneType != nil {
		toSerialize["phoneType"] = o.PhoneType
	}
	return json.Marshal(toSerialize)
}

type NullableViasPhoneNumber struct {
	value *ViasPhoneNumber
	isSet bool
}

func (v NullableViasPhoneNumber) Get() *ViasPhoneNumber {
	return v.value
}

func (v *NullableViasPhoneNumber) Set(val *ViasPhoneNumber) {
	v.value = val
	v.isSet = true
}

func (v NullableViasPhoneNumber) IsSet() bool {
	return v.isSet
}

func (v *NullableViasPhoneNumber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViasPhoneNumber(val *ViasPhoneNumber) *NullableViasPhoneNumber {
	return &NullableViasPhoneNumber{value: val, isSet: true}
}

func (v NullableViasPhoneNumber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViasPhoneNumber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
