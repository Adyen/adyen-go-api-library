/*
 * Adyen for Platforms: Notifications
 *
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/platforms/notifications).
 *
 * API version: 6
 * Contact: support@adyen.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformsnotificationevents

import (
	"encoding/json"
)

// PersonalDocumentData struct for PersonalDocumentData
type PersonalDocumentData struct {
	// The expiration date of the document. The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
	ExpirationDate *string `json:"expirationDate,omitempty"`
	// The two-character country code of the issuer. >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
	IssuerCountry *string `json:"issuerCountry,omitempty"`
	// The state issued the document (if applicable)
	IssuerState *string `json:"issuerState,omitempty"`
	// The number of the document. Delete the given type if the value empty.
	Number *string `json:"number,omitempty"`
	// The type of the document. More then one item pert type does not allowed. Valid values: ID, PASSPORT, VISA, DRIVINGLICENSE
	Type string `json:"type"`
}

// NewPersonalDocumentData instantiates a new PersonalDocumentData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonalDocumentData(type_ string) *PersonalDocumentData {
	this := PersonalDocumentData{}
	this.Type = type_
	return &this
}

// NewPersonalDocumentDataWithDefaults instantiates a new PersonalDocumentData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonalDocumentDataWithDefaults() *PersonalDocumentData {
	this := PersonalDocumentData{}
	return &this
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *PersonalDocumentData) GetExpirationDate() string {
	if o == nil || o.ExpirationDate == nil {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonalDocumentData) GetExpirationDateOk() (*string, bool) {
	if o == nil || o.ExpirationDate == nil {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *PersonalDocumentData) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate != nil {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *PersonalDocumentData) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetIssuerCountry returns the IssuerCountry field value if set, zero value otherwise.
func (o *PersonalDocumentData) GetIssuerCountry() string {
	if o == nil || o.IssuerCountry == nil {
		var ret string
		return ret
	}
	return *o.IssuerCountry
}

// GetIssuerCountryOk returns a tuple with the IssuerCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonalDocumentData) GetIssuerCountryOk() (*string, bool) {
	if o == nil || o.IssuerCountry == nil {
		return nil, false
	}
	return o.IssuerCountry, true
}

// HasIssuerCountry returns a boolean if a field has been set.
func (o *PersonalDocumentData) HasIssuerCountry() bool {
	if o != nil && o.IssuerCountry != nil {
		return true
	}

	return false
}

// SetIssuerCountry gets a reference to the given string and assigns it to the IssuerCountry field.
func (o *PersonalDocumentData) SetIssuerCountry(v string) {
	o.IssuerCountry = &v
}

// GetIssuerState returns the IssuerState field value if set, zero value otherwise.
func (o *PersonalDocumentData) GetIssuerState() string {
	if o == nil || o.IssuerState == nil {
		var ret string
		return ret
	}
	return *o.IssuerState
}

// GetIssuerStateOk returns a tuple with the IssuerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonalDocumentData) GetIssuerStateOk() (*string, bool) {
	if o == nil || o.IssuerState == nil {
		return nil, false
	}
	return o.IssuerState, true
}

// HasIssuerState returns a boolean if a field has been set.
func (o *PersonalDocumentData) HasIssuerState() bool {
	if o != nil && o.IssuerState != nil {
		return true
	}

	return false
}

// SetIssuerState gets a reference to the given string and assigns it to the IssuerState field.
func (o *PersonalDocumentData) SetIssuerState(v string) {
	o.IssuerState = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *PersonalDocumentData) GetNumber() string {
	if o == nil || o.Number == nil {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonalDocumentData) GetNumberOk() (*string, bool) {
	if o == nil || o.Number == nil {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *PersonalDocumentData) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *PersonalDocumentData) SetNumber(v string) {
	o.Number = &v
}

// GetType returns the Type field value
func (o *PersonalDocumentData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PersonalDocumentData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PersonalDocumentData) SetType(v string) {
	o.Type = v
}

func (o PersonalDocumentData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpirationDate != nil {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if o.IssuerCountry != nil {
		toSerialize["issuerCountry"] = o.IssuerCountry
	}
	if o.IssuerState != nil {
		toSerialize["issuerState"] = o.IssuerState
	}
	if o.Number != nil {
		toSerialize["number"] = o.Number
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullablePersonalDocumentData struct {
	value *PersonalDocumentData
	isSet bool
}

func (v NullablePersonalDocumentData) Get() *PersonalDocumentData {
	return v.value
}

func (v *NullablePersonalDocumentData) Set(val *PersonalDocumentData) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonalDocumentData) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonalDocumentData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonalDocumentData(val *PersonalDocumentData) *NullablePersonalDocumentData {
	return &NullablePersonalDocumentData{value: val, isSet: true}
}

func (v NullablePersonalDocumentData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonalDocumentData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
