/*
 * Adyen for Platforms: Notifications
 *
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/platforms/notifications).
 *
 * API version: 6
 * Contact: support@adyen.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformsnotificationevents

import (
	"encoding/json"
)

// PayoutMethod struct for PayoutMethod
type PayoutMethod struct {
	MerchantAccount          string  `json:"merchantAccount"`
	PayoutMethodCode         *string `json:"payoutMethodCode,omitempty"`
	PayoutMethodType         *string `json:"payoutMethodType,omitempty"`
	RecurringDetailReference string  `json:"recurringDetailReference"`
	ShopperReference         string  `json:"shopperReference"`
}

// NewPayoutMethod instantiates a new PayoutMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayoutMethod(merchantAccount string, recurringDetailReference string, shopperReference string) *PayoutMethod {
	this := PayoutMethod{}
	this.MerchantAccount = merchantAccount
	this.RecurringDetailReference = recurringDetailReference
	this.ShopperReference = shopperReference
	return &this
}

// NewPayoutMethodWithDefaults instantiates a new PayoutMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayoutMethodWithDefaults() *PayoutMethod {
	this := PayoutMethod{}
	return &this
}

// GetMerchantAccount returns the MerchantAccount field value
func (o *PayoutMethod) GetMerchantAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantAccount
}

// GetMerchantAccountOk returns a tuple with the MerchantAccount field value
// and a boolean to check if the value has been set.
func (o *PayoutMethod) GetMerchantAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantAccount, true
}

// SetMerchantAccount sets field value
func (o *PayoutMethod) SetMerchantAccount(v string) {
	o.MerchantAccount = v
}

// GetPayoutMethodCode returns the PayoutMethodCode field value if set, zero value otherwise.
func (o *PayoutMethod) GetPayoutMethodCode() string {
	if o == nil || o.PayoutMethodCode == nil {
		var ret string
		return ret
	}
	return *o.PayoutMethodCode
}

// GetPayoutMethodCodeOk returns a tuple with the PayoutMethodCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutMethod) GetPayoutMethodCodeOk() (*string, bool) {
	if o == nil || o.PayoutMethodCode == nil {
		return nil, false
	}
	return o.PayoutMethodCode, true
}

// HasPayoutMethodCode returns a boolean if a field has been set.
func (o *PayoutMethod) HasPayoutMethodCode() bool {
	if o != nil && o.PayoutMethodCode != nil {
		return true
	}

	return false
}

// SetPayoutMethodCode gets a reference to the given string and assigns it to the PayoutMethodCode field.
func (o *PayoutMethod) SetPayoutMethodCode(v string) {
	o.PayoutMethodCode = &v
}

// GetPayoutMethodType returns the PayoutMethodType field value if set, zero value otherwise.
func (o *PayoutMethod) GetPayoutMethodType() string {
	if o == nil || o.PayoutMethodType == nil {
		var ret string
		return ret
	}
	return *o.PayoutMethodType
}

// GetPayoutMethodTypeOk returns a tuple with the PayoutMethodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutMethod) GetPayoutMethodTypeOk() (*string, bool) {
	if o == nil || o.PayoutMethodType == nil {
		return nil, false
	}
	return o.PayoutMethodType, true
}

// HasPayoutMethodType returns a boolean if a field has been set.
func (o *PayoutMethod) HasPayoutMethodType() bool {
	if o != nil && o.PayoutMethodType != nil {
		return true
	}

	return false
}

// SetPayoutMethodType gets a reference to the given string and assigns it to the PayoutMethodType field.
func (o *PayoutMethod) SetPayoutMethodType(v string) {
	o.PayoutMethodType = &v
}

// GetRecurringDetailReference returns the RecurringDetailReference field value
func (o *PayoutMethod) GetRecurringDetailReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecurringDetailReference
}

// GetRecurringDetailReferenceOk returns a tuple with the RecurringDetailReference field value
// and a boolean to check if the value has been set.
func (o *PayoutMethod) GetRecurringDetailReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecurringDetailReference, true
}

// SetRecurringDetailReference sets field value
func (o *PayoutMethod) SetRecurringDetailReference(v string) {
	o.RecurringDetailReference = v
}

// GetShopperReference returns the ShopperReference field value
func (o *PayoutMethod) GetShopperReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShopperReference
}

// GetShopperReferenceOk returns a tuple with the ShopperReference field value
// and a boolean to check if the value has been set.
func (o *PayoutMethod) GetShopperReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShopperReference, true
}

// SetShopperReference sets field value
func (o *PayoutMethod) SetShopperReference(v string) {
	o.ShopperReference = v
}

func (o PayoutMethod) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["merchantAccount"] = o.MerchantAccount
	}
	if o.PayoutMethodCode != nil {
		toSerialize["payoutMethodCode"] = o.PayoutMethodCode
	}
	if o.PayoutMethodType != nil {
		toSerialize["payoutMethodType"] = o.PayoutMethodType
	}
	if true {
		toSerialize["recurringDetailReference"] = o.RecurringDetailReference
	}
	if true {
		toSerialize["shopperReference"] = o.ShopperReference
	}
	return json.Marshal(toSerialize)
}

type NullablePayoutMethod struct {
	value *PayoutMethod
	isSet bool
}

func (v NullablePayoutMethod) Get() *PayoutMethod {
	return v.value
}

func (v *NullablePayoutMethod) Set(val *PayoutMethod) {
	v.value = val
	v.isSet = true
}

func (v NullablePayoutMethod) IsSet() bool {
	return v.isSet
}

func (v *NullablePayoutMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayoutMethod(val *PayoutMethod) *NullablePayoutMethod {
	return &NullablePayoutMethod{value: val, isSet: true}
}

func (v NullablePayoutMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayoutMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
