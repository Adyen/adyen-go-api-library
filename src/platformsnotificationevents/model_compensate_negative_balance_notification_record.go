/*
 * Adyen for Platforms: Notifications
 *
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/platforms/notifications).
 *
 * API version: 6
 * Contact: support@adyen.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformsnotificationevents

import (
	"encoding/json"
	"time"
)

// CompensateNegativeBalanceNotificationRecord struct for CompensateNegativeBalanceNotificationRecord
type CompensateNegativeBalanceNotificationRecord struct {
	// The code of the account whose negative balance has been compensated.
	AccountCode string `json:"accountCode"`
	Amount      Amount `json:"amount"`
	// The date on which the compensation took place.
	TransferDate time.Time `json:"transferDate"`
}

// NewCompensateNegativeBalanceNotificationRecord instantiates a new CompensateNegativeBalanceNotificationRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompensateNegativeBalanceNotificationRecord(accountCode string, amount Amount, transferDate time.Time) *CompensateNegativeBalanceNotificationRecord {
	this := CompensateNegativeBalanceNotificationRecord{}
	this.AccountCode = accountCode
	this.Amount = amount
	this.TransferDate = transferDate
	return &this
}

// NewCompensateNegativeBalanceNotificationRecordWithDefaults instantiates a new CompensateNegativeBalanceNotificationRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompensateNegativeBalanceNotificationRecordWithDefaults() *CompensateNegativeBalanceNotificationRecord {
	this := CompensateNegativeBalanceNotificationRecord{}
	return &this
}

// GetAccountCode returns the AccountCode field value
func (o *CompensateNegativeBalanceNotificationRecord) GetAccountCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountCode
}

// GetAccountCodeOk returns a tuple with the AccountCode field value
// and a boolean to check if the value has been set.
func (o *CompensateNegativeBalanceNotificationRecord) GetAccountCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountCode, true
}

// SetAccountCode sets field value
func (o *CompensateNegativeBalanceNotificationRecord) SetAccountCode(v string) {
	o.AccountCode = v
}

// GetAmount returns the Amount field value
func (o *CompensateNegativeBalanceNotificationRecord) GetAmount() Amount {
	if o == nil {
		var ret Amount
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CompensateNegativeBalanceNotificationRecord) GetAmountOk() (*Amount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CompensateNegativeBalanceNotificationRecord) SetAmount(v Amount) {
	o.Amount = v
}

// GetTransferDate returns the TransferDate field value
func (o *CompensateNegativeBalanceNotificationRecord) GetTransferDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TransferDate
}

// GetTransferDateOk returns a tuple with the TransferDate field value
// and a boolean to check if the value has been set.
func (o *CompensateNegativeBalanceNotificationRecord) GetTransferDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransferDate, true
}

// SetTransferDate sets field value
func (o *CompensateNegativeBalanceNotificationRecord) SetTransferDate(v time.Time) {
	o.TransferDate = v
}

func (o CompensateNegativeBalanceNotificationRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accountCode"] = o.AccountCode
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["transferDate"] = o.TransferDate
	}
	return json.Marshal(toSerialize)
}

type NullableCompensateNegativeBalanceNotificationRecord struct {
	value *CompensateNegativeBalanceNotificationRecord
	isSet bool
}

func (v NullableCompensateNegativeBalanceNotificationRecord) Get() *CompensateNegativeBalanceNotificationRecord {
	return v.value
}

func (v *NullableCompensateNegativeBalanceNotificationRecord) Set(val *CompensateNegativeBalanceNotificationRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableCompensateNegativeBalanceNotificationRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableCompensateNegativeBalanceNotificationRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompensateNegativeBalanceNotificationRecord(val *CompensateNegativeBalanceNotificationRecord) *NullableCompensateNegativeBalanceNotificationRecord {
	return &NullableCompensateNegativeBalanceNotificationRecord{value: val, isSet: true}
}

func (v NullableCompensateNegativeBalanceNotificationRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompensateNegativeBalanceNotificationRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
