/*
 * Adyen for Platforms: Notifications
 *
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/platforms/notifications).
 *
 * API version: 6
 * Contact: support@adyen.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformsnotificationevents

import (
	"encoding/json"
)

// ErrorFieldType struct for ErrorFieldType
type ErrorFieldType struct {
	// The validation error code.
	ErrorCode *int32 `json:"errorCode,omitempty"`
	// A description of the validation error.
	ErrorDescription *string    `json:"errorDescription,omitempty"`
	FieldType        *FieldType `json:"fieldType,omitempty"`
}

// NewErrorFieldType instantiates a new ErrorFieldType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorFieldType() *ErrorFieldType {
	this := ErrorFieldType{}
	return &this
}

// NewErrorFieldTypeWithDefaults instantiates a new ErrorFieldType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorFieldTypeWithDefaults() *ErrorFieldType {
	this := ErrorFieldType{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *ErrorFieldType) GetErrorCode() int32 {
	if o == nil || o.ErrorCode == nil {
		var ret int32
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorFieldType) GetErrorCodeOk() (*int32, bool) {
	if o == nil || o.ErrorCode == nil {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *ErrorFieldType) HasErrorCode() bool {
	if o != nil && o.ErrorCode != nil {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given int32 and assigns it to the ErrorCode field.
func (o *ErrorFieldType) SetErrorCode(v int32) {
	o.ErrorCode = &v
}

// GetErrorDescription returns the ErrorDescription field value if set, zero value otherwise.
func (o *ErrorFieldType) GetErrorDescription() string {
	if o == nil || o.ErrorDescription == nil {
		var ret string
		return ret
	}
	return *o.ErrorDescription
}

// GetErrorDescriptionOk returns a tuple with the ErrorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorFieldType) GetErrorDescriptionOk() (*string, bool) {
	if o == nil || o.ErrorDescription == nil {
		return nil, false
	}
	return o.ErrorDescription, true
}

// HasErrorDescription returns a boolean if a field has been set.
func (o *ErrorFieldType) HasErrorDescription() bool {
	if o != nil && o.ErrorDescription != nil {
		return true
	}

	return false
}

// SetErrorDescription gets a reference to the given string and assigns it to the ErrorDescription field.
func (o *ErrorFieldType) SetErrorDescription(v string) {
	o.ErrorDescription = &v
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *ErrorFieldType) GetFieldType() FieldType {
	if o == nil || o.FieldType == nil {
		var ret FieldType
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorFieldType) GetFieldTypeOk() (*FieldType, bool) {
	if o == nil || o.FieldType == nil {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *ErrorFieldType) HasFieldType() bool {
	if o != nil && o.FieldType != nil {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given FieldType and assigns it to the FieldType field.
func (o *ErrorFieldType) SetFieldType(v FieldType) {
	o.FieldType = &v
}

func (o ErrorFieldType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorCode != nil {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if o.ErrorDescription != nil {
		toSerialize["errorDescription"] = o.ErrorDescription
	}
	if o.FieldType != nil {
		toSerialize["fieldType"] = o.FieldType
	}
	return json.Marshal(toSerialize)
}

type NullableErrorFieldType struct {
	value *ErrorFieldType
	isSet bool
}

func (v NullableErrorFieldType) Get() *ErrorFieldType {
	return v.value
}

func (v *NullableErrorFieldType) Set(val *ErrorFieldType) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorFieldType) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorFieldType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorFieldType(val *ErrorFieldType) *NullableErrorFieldType {
	return &NullableErrorFieldType{value: val, isSet: true}
}

func (v NullableErrorFieldType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorFieldType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
