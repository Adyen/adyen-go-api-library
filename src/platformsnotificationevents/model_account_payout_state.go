/*
 * Adyen for Platforms: Notifications
 *
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/platforms/notifications).
 *
 * API version: 6
 * Contact: support@adyen.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformsnotificationevents

import (
	"encoding/json"
)

// AccountPayoutState struct for AccountPayoutState
type AccountPayoutState struct {
	// Indicates whether payouts are allowed. This field is the overarching payout status, and is the aggregate of multiple conditions (e.g., KYC status, disabled flag, etc). If this field is false, no payouts will be permitted for any of the account holder's accounts. If this field is true, payouts will be permitted for any of the account holder's accounts.
	AllowPayout *bool `json:"allowPayout,omitempty"`
	// The reason why payouts (to all of the account holder's accounts) have been disabled (by the platform). If the `disabled` field is true, this field can be used to explain why.
	DisableReason *string `json:"disableReason,omitempty"`
	// Indicates whether payouts have been disabled (by the platform) for all of the account holder's accounts. A platform may enable and disable this field at their discretion. If this field is true, `allowPayout` will be false and no payouts will be permitted for any of the account holder's accounts. If this field is false, `allowPayout` may or may not be enabled, depending on other factors.
	Disabled *bool `json:"disabled,omitempty"`
	// The reason why payouts (to all of the account holder's accounts) have been disabled (by Adyen). If payouts have been disabled by Adyen, this field will explain why. If this field is blank, payouts have not been disabled by Adyen.
	NotAllowedReason *string `json:"notAllowedReason,omitempty"`
	PayoutLimit      *Amount `json:"payoutLimit,omitempty"`
	// The payout tier that the account holder occupies.
	TierNumber *int32 `json:"tierNumber,omitempty"`
}

// NewAccountPayoutState instantiates a new AccountPayoutState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountPayoutState() *AccountPayoutState {
	this := AccountPayoutState{}
	return &this
}

// NewAccountPayoutStateWithDefaults instantiates a new AccountPayoutState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountPayoutStateWithDefaults() *AccountPayoutState {
	this := AccountPayoutState{}
	return &this
}

// GetAllowPayout returns the AllowPayout field value if set, zero value otherwise.
func (o *AccountPayoutState) GetAllowPayout() bool {
	if o == nil || o.AllowPayout == nil {
		var ret bool
		return ret
	}
	return *o.AllowPayout
}

// GetAllowPayoutOk returns a tuple with the AllowPayout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPayoutState) GetAllowPayoutOk() (*bool, bool) {
	if o == nil || o.AllowPayout == nil {
		return nil, false
	}
	return o.AllowPayout, true
}

// HasAllowPayout returns a boolean if a field has been set.
func (o *AccountPayoutState) HasAllowPayout() bool {
	if o != nil && o.AllowPayout != nil {
		return true
	}

	return false
}

// SetAllowPayout gets a reference to the given bool and assigns it to the AllowPayout field.
func (o *AccountPayoutState) SetAllowPayout(v bool) {
	o.AllowPayout = &v
}

// GetDisableReason returns the DisableReason field value if set, zero value otherwise.
func (o *AccountPayoutState) GetDisableReason() string {
	if o == nil || o.DisableReason == nil {
		var ret string
		return ret
	}
	return *o.DisableReason
}

// GetDisableReasonOk returns a tuple with the DisableReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPayoutState) GetDisableReasonOk() (*string, bool) {
	if o == nil || o.DisableReason == nil {
		return nil, false
	}
	return o.DisableReason, true
}

// HasDisableReason returns a boolean if a field has been set.
func (o *AccountPayoutState) HasDisableReason() bool {
	if o != nil && o.DisableReason != nil {
		return true
	}

	return false
}

// SetDisableReason gets a reference to the given string and assigns it to the DisableReason field.
func (o *AccountPayoutState) SetDisableReason(v string) {
	o.DisableReason = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *AccountPayoutState) GetDisabled() bool {
	if o == nil || o.Disabled == nil {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPayoutState) GetDisabledOk() (*bool, bool) {
	if o == nil || o.Disabled == nil {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *AccountPayoutState) HasDisabled() bool {
	if o != nil && o.Disabled != nil {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *AccountPayoutState) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetNotAllowedReason returns the NotAllowedReason field value if set, zero value otherwise.
func (o *AccountPayoutState) GetNotAllowedReason() string {
	if o == nil || o.NotAllowedReason == nil {
		var ret string
		return ret
	}
	return *o.NotAllowedReason
}

// GetNotAllowedReasonOk returns a tuple with the NotAllowedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPayoutState) GetNotAllowedReasonOk() (*string, bool) {
	if o == nil || o.NotAllowedReason == nil {
		return nil, false
	}
	return o.NotAllowedReason, true
}

// HasNotAllowedReason returns a boolean if a field has been set.
func (o *AccountPayoutState) HasNotAllowedReason() bool {
	if o != nil && o.NotAllowedReason != nil {
		return true
	}

	return false
}

// SetNotAllowedReason gets a reference to the given string and assigns it to the NotAllowedReason field.
func (o *AccountPayoutState) SetNotAllowedReason(v string) {
	o.NotAllowedReason = &v
}

// GetPayoutLimit returns the PayoutLimit field value if set, zero value otherwise.
func (o *AccountPayoutState) GetPayoutLimit() Amount {
	if o == nil || o.PayoutLimit == nil {
		var ret Amount
		return ret
	}
	return *o.PayoutLimit
}

// GetPayoutLimitOk returns a tuple with the PayoutLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPayoutState) GetPayoutLimitOk() (*Amount, bool) {
	if o == nil || o.PayoutLimit == nil {
		return nil, false
	}
	return o.PayoutLimit, true
}

// HasPayoutLimit returns a boolean if a field has been set.
func (o *AccountPayoutState) HasPayoutLimit() bool {
	if o != nil && o.PayoutLimit != nil {
		return true
	}

	return false
}

// SetPayoutLimit gets a reference to the given Amount and assigns it to the PayoutLimit field.
func (o *AccountPayoutState) SetPayoutLimit(v Amount) {
	o.PayoutLimit = &v
}

// GetTierNumber returns the TierNumber field value if set, zero value otherwise.
func (o *AccountPayoutState) GetTierNumber() int32 {
	if o == nil || o.TierNumber == nil {
		var ret int32
		return ret
	}
	return *o.TierNumber
}

// GetTierNumberOk returns a tuple with the TierNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountPayoutState) GetTierNumberOk() (*int32, bool) {
	if o == nil || o.TierNumber == nil {
		return nil, false
	}
	return o.TierNumber, true
}

// HasTierNumber returns a boolean if a field has been set.
func (o *AccountPayoutState) HasTierNumber() bool {
	if o != nil && o.TierNumber != nil {
		return true
	}

	return false
}

// SetTierNumber gets a reference to the given int32 and assigns it to the TierNumber field.
func (o *AccountPayoutState) SetTierNumber(v int32) {
	o.TierNumber = &v
}

func (o AccountPayoutState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowPayout != nil {
		toSerialize["allowPayout"] = o.AllowPayout
	}
	if o.DisableReason != nil {
		toSerialize["disableReason"] = o.DisableReason
	}
	if o.Disabled != nil {
		toSerialize["disabled"] = o.Disabled
	}
	if o.NotAllowedReason != nil {
		toSerialize["notAllowedReason"] = o.NotAllowedReason
	}
	if o.PayoutLimit != nil {
		toSerialize["payoutLimit"] = o.PayoutLimit
	}
	if o.TierNumber != nil {
		toSerialize["tierNumber"] = o.TierNumber
	}
	return json.Marshal(toSerialize)
}

type NullableAccountPayoutState struct {
	value *AccountPayoutState
	isSet bool
}

func (v NullableAccountPayoutState) Get() *AccountPayoutState {
	return v.value
}

func (v *NullableAccountPayoutState) Set(val *AccountPayoutState) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountPayoutState) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountPayoutState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountPayoutState(val *AccountPayoutState) *NullableAccountPayoutState {
	return &NullableAccountPayoutState{value: val, isSet: true}
}

func (v NullableAccountPayoutState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountPayoutState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
