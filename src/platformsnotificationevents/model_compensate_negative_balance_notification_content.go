/*
 * Adyen for Platforms: Notifications
 *
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/platforms/notifications).
 *
 * API version: 6
 * Contact: support@adyen.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformsnotificationevents

import (
	"encoding/json"
)

// CompensateNegativeBalanceNotificationContent struct for CompensateNegativeBalanceNotificationContent
type CompensateNegativeBalanceNotificationContent struct {
	// A list of the negative balances compensated.
	Records []CompensateNegativeBalanceNotificationRecord `json:"records"`
}

// NewCompensateNegativeBalanceNotificationContent instantiates a new CompensateNegativeBalanceNotificationContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompensateNegativeBalanceNotificationContent(records []CompensateNegativeBalanceNotificationRecord) *CompensateNegativeBalanceNotificationContent {
	this := CompensateNegativeBalanceNotificationContent{}
	this.Records = records
	return &this
}

// NewCompensateNegativeBalanceNotificationContentWithDefaults instantiates a new CompensateNegativeBalanceNotificationContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompensateNegativeBalanceNotificationContentWithDefaults() *CompensateNegativeBalanceNotificationContent {
	this := CompensateNegativeBalanceNotificationContent{}
	return &this
}

// GetRecords returns the Records field value
func (o *CompensateNegativeBalanceNotificationContent) GetRecords() []CompensateNegativeBalanceNotificationRecord {
	if o == nil {
		var ret []CompensateNegativeBalanceNotificationRecord
		return ret
	}

	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *CompensateNegativeBalanceNotificationContent) GetRecordsOk() (*[]CompensateNegativeBalanceNotificationRecord, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Records, true
}

// SetRecords sets field value
func (o *CompensateNegativeBalanceNotificationContent) SetRecords(v []CompensateNegativeBalanceNotificationRecord) {
	o.Records = v
}

func (o CompensateNegativeBalanceNotificationContent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["records"] = o.Records
	}
	return json.Marshal(toSerialize)
}

type NullableCompensateNegativeBalanceNotificationContent struct {
	value *CompensateNegativeBalanceNotificationContent
	isSet bool
}

func (v NullableCompensateNegativeBalanceNotificationContent) Get() *CompensateNegativeBalanceNotificationContent {
	return v.value
}

func (v *NullableCompensateNegativeBalanceNotificationContent) Set(val *CompensateNegativeBalanceNotificationContent) {
	v.value = val
	v.isSet = true
}

func (v NullableCompensateNegativeBalanceNotificationContent) IsSet() bool {
	return v.isSet
}

func (v *NullableCompensateNegativeBalanceNotificationContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompensateNegativeBalanceNotificationContent(val *CompensateNegativeBalanceNotificationContent) *NullableCompensateNegativeBalanceNotificationContent {
	return &NullableCompensateNegativeBalanceNotificationContent{value: val, isSet: true}
}

func (v NullableCompensateNegativeBalanceNotificationContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompensateNegativeBalanceNotificationContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
