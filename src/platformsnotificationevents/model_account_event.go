/*
 * Adyen for Platforms: Notifications
 *
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/platforms/notifications).
 *
 * API version: 6
 * Contact: support@adyen.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformsnotificationevents

import (
	"encoding/json"
	"time"
)

// AccountEvent struct for AccountEvent
type AccountEvent struct {
	// The event. >Permitted values: `InactivateAccount`, `RefundNotPaidOutTransfers`. For more information, refer to [Verification checks](https://docs.adyen.com/platforms/onboarding-and-verification/verification-checks).
	Event string `json:"event"`
	// The date on which the event will take place.
	ExecutionDate time.Time `json:"executionDate"`
	// The reason why this event has been created.
	Reason string `json:"reason"`
}

// NewAccountEvent instantiates a new AccountEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountEvent(event string, executionDate time.Time, reason string) *AccountEvent {
	this := AccountEvent{}
	this.Event = event
	this.ExecutionDate = executionDate
	this.Reason = reason
	return &this
}

// NewAccountEventWithDefaults instantiates a new AccountEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountEventWithDefaults() *AccountEvent {
	this := AccountEvent{}
	return &this
}

// GetEvent returns the Event field value
func (o *AccountEvent) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *AccountEvent) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *AccountEvent) SetEvent(v string) {
	o.Event = v
}

// GetExecutionDate returns the ExecutionDate field value
func (o *AccountEvent) GetExecutionDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExecutionDate
}

// GetExecutionDateOk returns a tuple with the ExecutionDate field value
// and a boolean to check if the value has been set.
func (o *AccountEvent) GetExecutionDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutionDate, true
}

// SetExecutionDate sets field value
func (o *AccountEvent) SetExecutionDate(v time.Time) {
	o.ExecutionDate = v
}

// GetReason returns the Reason field value
func (o *AccountEvent) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *AccountEvent) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *AccountEvent) SetReason(v string) {
	o.Reason = v
}

func (o AccountEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["event"] = o.Event
	}
	if true {
		toSerialize["executionDate"] = o.ExecutionDate
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableAccountEvent struct {
	value *AccountEvent
	isSet bool
}

func (v NullableAccountEvent) Get() *AccountEvent {
	return v.value
}

func (v *NullableAccountEvent) Set(val *AccountEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountEvent(val *AccountEvent) *NullableAccountEvent {
	return &NullableAccountEvent{value: val, isSet: true}
}

func (v NullableAccountEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
