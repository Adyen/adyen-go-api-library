/*
 * Adyen for Platforms: Notifications
 *
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/platforms/notifications).
 *
 * API version: 6
 * Contact: support@adyen.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformsnotificationevents

import (
	"encoding/json"
)

// AccountHolderStoreStatusChangeNotificationContent struct for AccountHolderStoreStatusChangeNotificationContent
type AccountHolderStoreStatusChangeNotificationContent struct {
	// The code of the account holder.
	AccountHolderCode string `json:"accountHolderCode"`
	// In case the store status has not been updated, contains fields that did not pass the validation.
	InvalidFields *[]ErrorFieldType `json:"invalidFields,omitempty"`
	// The new status of the account holder.
	NewStatus string `json:"newStatus"`
	// The former status of the account holder.
	OldStatus string `json:"oldStatus"`
	// The reason for the status change.
	Reason *string `json:"reason,omitempty"`
	// Alphanumeric identifier of the store.
	Store string `json:"store"`
	// Store store reference.
	StoreReference string `json:"storeReference"`
}

// NewAccountHolderStoreStatusChangeNotificationContent instantiates a new AccountHolderStoreStatusChangeNotificationContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountHolderStoreStatusChangeNotificationContent(accountHolderCode string, newStatus string, oldStatus string, store string, storeReference string) *AccountHolderStoreStatusChangeNotificationContent {
	this := AccountHolderStoreStatusChangeNotificationContent{}
	this.AccountHolderCode = accountHolderCode
	this.NewStatus = newStatus
	this.OldStatus = oldStatus
	this.Store = store
	this.StoreReference = storeReference
	return &this
}

// NewAccountHolderStoreStatusChangeNotificationContentWithDefaults instantiates a new AccountHolderStoreStatusChangeNotificationContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountHolderStoreStatusChangeNotificationContentWithDefaults() *AccountHolderStoreStatusChangeNotificationContent {
	this := AccountHolderStoreStatusChangeNotificationContent{}
	return &this
}

// GetAccountHolderCode returns the AccountHolderCode field value
func (o *AccountHolderStoreStatusChangeNotificationContent) GetAccountHolderCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountHolderCode
}

// GetAccountHolderCodeOk returns a tuple with the AccountHolderCode field value
// and a boolean to check if the value has been set.
func (o *AccountHolderStoreStatusChangeNotificationContent) GetAccountHolderCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountHolderCode, true
}

// SetAccountHolderCode sets field value
func (o *AccountHolderStoreStatusChangeNotificationContent) SetAccountHolderCode(v string) {
	o.AccountHolderCode = v
}

// GetInvalidFields returns the InvalidFields field value if set, zero value otherwise.
func (o *AccountHolderStoreStatusChangeNotificationContent) GetInvalidFields() []ErrorFieldType {
	if o == nil || o.InvalidFields == nil {
		var ret []ErrorFieldType
		return ret
	}
	return *o.InvalidFields
}

// GetInvalidFieldsOk returns a tuple with the InvalidFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountHolderStoreStatusChangeNotificationContent) GetInvalidFieldsOk() (*[]ErrorFieldType, bool) {
	if o == nil || o.InvalidFields == nil {
		return nil, false
	}
	return o.InvalidFields, true
}

// HasInvalidFields returns a boolean if a field has been set.
func (o *AccountHolderStoreStatusChangeNotificationContent) HasInvalidFields() bool {
	if o != nil && o.InvalidFields != nil {
		return true
	}

	return false
}

// SetInvalidFields gets a reference to the given []ErrorFieldType and assigns it to the InvalidFields field.
func (o *AccountHolderStoreStatusChangeNotificationContent) SetInvalidFields(v []ErrorFieldType) {
	o.InvalidFields = &v
}

// GetNewStatus returns the NewStatus field value
func (o *AccountHolderStoreStatusChangeNotificationContent) GetNewStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewStatus
}

// GetNewStatusOk returns a tuple with the NewStatus field value
// and a boolean to check if the value has been set.
func (o *AccountHolderStoreStatusChangeNotificationContent) GetNewStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewStatus, true
}

// SetNewStatus sets field value
func (o *AccountHolderStoreStatusChangeNotificationContent) SetNewStatus(v string) {
	o.NewStatus = v
}

// GetOldStatus returns the OldStatus field value
func (o *AccountHolderStoreStatusChangeNotificationContent) GetOldStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OldStatus
}

// GetOldStatusOk returns a tuple with the OldStatus field value
// and a boolean to check if the value has been set.
func (o *AccountHolderStoreStatusChangeNotificationContent) GetOldStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OldStatus, true
}

// SetOldStatus sets field value
func (o *AccountHolderStoreStatusChangeNotificationContent) SetOldStatus(v string) {
	o.OldStatus = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *AccountHolderStoreStatusChangeNotificationContent) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountHolderStoreStatusChangeNotificationContent) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *AccountHolderStoreStatusChangeNotificationContent) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *AccountHolderStoreStatusChangeNotificationContent) SetReason(v string) {
	o.Reason = &v
}

// GetStore returns the Store field value
func (o *AccountHolderStoreStatusChangeNotificationContent) GetStore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Store
}

// GetStoreOk returns a tuple with the Store field value
// and a boolean to check if the value has been set.
func (o *AccountHolderStoreStatusChangeNotificationContent) GetStoreOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Store, true
}

// SetStore sets field value
func (o *AccountHolderStoreStatusChangeNotificationContent) SetStore(v string) {
	o.Store = v
}

// GetStoreReference returns the StoreReference field value
func (o *AccountHolderStoreStatusChangeNotificationContent) GetStoreReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StoreReference
}

// GetStoreReferenceOk returns a tuple with the StoreReference field value
// and a boolean to check if the value has been set.
func (o *AccountHolderStoreStatusChangeNotificationContent) GetStoreReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoreReference, true
}

// SetStoreReference sets field value
func (o *AccountHolderStoreStatusChangeNotificationContent) SetStoreReference(v string) {
	o.StoreReference = v
}

func (o AccountHolderStoreStatusChangeNotificationContent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accountHolderCode"] = o.AccountHolderCode
	}
	if o.InvalidFields != nil {
		toSerialize["invalidFields"] = o.InvalidFields
	}
	if true {
		toSerialize["newStatus"] = o.NewStatus
	}
	if true {
		toSerialize["oldStatus"] = o.OldStatus
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if true {
		toSerialize["store"] = o.Store
	}
	if true {
		toSerialize["storeReference"] = o.StoreReference
	}
	return json.Marshal(toSerialize)
}

type NullableAccountHolderStoreStatusChangeNotificationContent struct {
	value *AccountHolderStoreStatusChangeNotificationContent
	isSet bool
}

func (v NullableAccountHolderStoreStatusChangeNotificationContent) Get() *AccountHolderStoreStatusChangeNotificationContent {
	return v.value
}

func (v *NullableAccountHolderStoreStatusChangeNotificationContent) Set(val *AccountHolderStoreStatusChangeNotificationContent) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountHolderStoreStatusChangeNotificationContent) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountHolderStoreStatusChangeNotificationContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountHolderStoreStatusChangeNotificationContent(val *AccountHolderStoreStatusChangeNotificationContent) *NullableAccountHolderStoreStatusChangeNotificationContent {
	return &NullableAccountHolderStoreStatusChangeNotificationContent{value: val, isSet: true}
}

func (v NullableAccountHolderStoreStatusChangeNotificationContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountHolderStoreStatusChangeNotificationContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
