/*
 * Adyen for Platforms: Notifications
 *
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/platforms/notifications).
 *
 * API version: 6
 * Contact: support@adyen.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformsnotificationevents

import (
	"encoding/json"
)

// BusinessDetails struct for BusinessDetails
type BusinessDetails struct {
	// The registered name of the company (if it differs from the legal name of the company).
	DoingBusinessAs *string `json:"doingBusinessAs,omitempty"`
	// The legal name of the company.
	LegalBusinessName *string `json:"legalBusinessName,omitempty"`
	// The registration number of the company.
	RegistrationNumber *string `json:"registrationNumber,omitempty"`
	// Each of the shareholders associated with the company. Each array entry should represent one shareholder.
	Shareholders *[]ShareholderContact `json:"shareholders,omitempty"`
	// Market Identifier Code (MIC).
	StockExchange *string `json:"stockExchange,omitempty"`
	// International Securities Identification Number (ISIN).
	StockNumber *string `json:"stockNumber,omitempty"`
	// Stock Ticker symbol.
	StockTicker *string `json:"stockTicker,omitempty"`
	// The tax ID of the company.
	TaxId *string `json:"taxId,omitempty"`
}

// NewBusinessDetails instantiates a new BusinessDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBusinessDetails() *BusinessDetails {
	this := BusinessDetails{}
	return &this
}

// NewBusinessDetailsWithDefaults instantiates a new BusinessDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBusinessDetailsWithDefaults() *BusinessDetails {
	this := BusinessDetails{}
	return &this
}

// GetDoingBusinessAs returns the DoingBusinessAs field value if set, zero value otherwise.
func (o *BusinessDetails) GetDoingBusinessAs() string {
	if o == nil || o.DoingBusinessAs == nil {
		var ret string
		return ret
	}
	return *o.DoingBusinessAs
}

// GetDoingBusinessAsOk returns a tuple with the DoingBusinessAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessDetails) GetDoingBusinessAsOk() (*string, bool) {
	if o == nil || o.DoingBusinessAs == nil {
		return nil, false
	}
	return o.DoingBusinessAs, true
}

// HasDoingBusinessAs returns a boolean if a field has been set.
func (o *BusinessDetails) HasDoingBusinessAs() bool {
	if o != nil && o.DoingBusinessAs != nil {
		return true
	}

	return false
}

// SetDoingBusinessAs gets a reference to the given string and assigns it to the DoingBusinessAs field.
func (o *BusinessDetails) SetDoingBusinessAs(v string) {
	o.DoingBusinessAs = &v
}

// GetLegalBusinessName returns the LegalBusinessName field value if set, zero value otherwise.
func (o *BusinessDetails) GetLegalBusinessName() string {
	if o == nil || o.LegalBusinessName == nil {
		var ret string
		return ret
	}
	return *o.LegalBusinessName
}

// GetLegalBusinessNameOk returns a tuple with the LegalBusinessName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessDetails) GetLegalBusinessNameOk() (*string, bool) {
	if o == nil || o.LegalBusinessName == nil {
		return nil, false
	}
	return o.LegalBusinessName, true
}

// HasLegalBusinessName returns a boolean if a field has been set.
func (o *BusinessDetails) HasLegalBusinessName() bool {
	if o != nil && o.LegalBusinessName != nil {
		return true
	}

	return false
}

// SetLegalBusinessName gets a reference to the given string and assigns it to the LegalBusinessName field.
func (o *BusinessDetails) SetLegalBusinessName(v string) {
	o.LegalBusinessName = &v
}

// GetRegistrationNumber returns the RegistrationNumber field value if set, zero value otherwise.
func (o *BusinessDetails) GetRegistrationNumber() string {
	if o == nil || o.RegistrationNumber == nil {
		var ret string
		return ret
	}
	return *o.RegistrationNumber
}

// GetRegistrationNumberOk returns a tuple with the RegistrationNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessDetails) GetRegistrationNumberOk() (*string, bool) {
	if o == nil || o.RegistrationNumber == nil {
		return nil, false
	}
	return o.RegistrationNumber, true
}

// HasRegistrationNumber returns a boolean if a field has been set.
func (o *BusinessDetails) HasRegistrationNumber() bool {
	if o != nil && o.RegistrationNumber != nil {
		return true
	}

	return false
}

// SetRegistrationNumber gets a reference to the given string and assigns it to the RegistrationNumber field.
func (o *BusinessDetails) SetRegistrationNumber(v string) {
	o.RegistrationNumber = &v
}

// GetShareholders returns the Shareholders field value if set, zero value otherwise.
func (o *BusinessDetails) GetShareholders() []ShareholderContact {
	if o == nil || o.Shareholders == nil {
		var ret []ShareholderContact
		return ret
	}
	return *o.Shareholders
}

// GetShareholdersOk returns a tuple with the Shareholders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessDetails) GetShareholdersOk() (*[]ShareholderContact, bool) {
	if o == nil || o.Shareholders == nil {
		return nil, false
	}
	return o.Shareholders, true
}

// HasShareholders returns a boolean if a field has been set.
func (o *BusinessDetails) HasShareholders() bool {
	if o != nil && o.Shareholders != nil {
		return true
	}

	return false
}

// SetShareholders gets a reference to the given []ShareholderContact and assigns it to the Shareholders field.
func (o *BusinessDetails) SetShareholders(v []ShareholderContact) {
	o.Shareholders = &v
}

// GetStockExchange returns the StockExchange field value if set, zero value otherwise.
func (o *BusinessDetails) GetStockExchange() string {
	if o == nil || o.StockExchange == nil {
		var ret string
		return ret
	}
	return *o.StockExchange
}

// GetStockExchangeOk returns a tuple with the StockExchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessDetails) GetStockExchangeOk() (*string, bool) {
	if o == nil || o.StockExchange == nil {
		return nil, false
	}
	return o.StockExchange, true
}

// HasStockExchange returns a boolean if a field has been set.
func (o *BusinessDetails) HasStockExchange() bool {
	if o != nil && o.StockExchange != nil {
		return true
	}

	return false
}

// SetStockExchange gets a reference to the given string and assigns it to the StockExchange field.
func (o *BusinessDetails) SetStockExchange(v string) {
	o.StockExchange = &v
}

// GetStockNumber returns the StockNumber field value if set, zero value otherwise.
func (o *BusinessDetails) GetStockNumber() string {
	if o == nil || o.StockNumber == nil {
		var ret string
		return ret
	}
	return *o.StockNumber
}

// GetStockNumberOk returns a tuple with the StockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessDetails) GetStockNumberOk() (*string, bool) {
	if o == nil || o.StockNumber == nil {
		return nil, false
	}
	return o.StockNumber, true
}

// HasStockNumber returns a boolean if a field has been set.
func (o *BusinessDetails) HasStockNumber() bool {
	if o != nil && o.StockNumber != nil {
		return true
	}

	return false
}

// SetStockNumber gets a reference to the given string and assigns it to the StockNumber field.
func (o *BusinessDetails) SetStockNumber(v string) {
	o.StockNumber = &v
}

// GetStockTicker returns the StockTicker field value if set, zero value otherwise.
func (o *BusinessDetails) GetStockTicker() string {
	if o == nil || o.StockTicker == nil {
		var ret string
		return ret
	}
	return *o.StockTicker
}

// GetStockTickerOk returns a tuple with the StockTicker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessDetails) GetStockTickerOk() (*string, bool) {
	if o == nil || o.StockTicker == nil {
		return nil, false
	}
	return o.StockTicker, true
}

// HasStockTicker returns a boolean if a field has been set.
func (o *BusinessDetails) HasStockTicker() bool {
	if o != nil && o.StockTicker != nil {
		return true
	}

	return false
}

// SetStockTicker gets a reference to the given string and assigns it to the StockTicker field.
func (o *BusinessDetails) SetStockTicker(v string) {
	o.StockTicker = &v
}

// GetTaxId returns the TaxId field value if set, zero value otherwise.
func (o *BusinessDetails) GetTaxId() string {
	if o == nil || o.TaxId == nil {
		var ret string
		return ret
	}
	return *o.TaxId
}

// GetTaxIdOk returns a tuple with the TaxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessDetails) GetTaxIdOk() (*string, bool) {
	if o == nil || o.TaxId == nil {
		return nil, false
	}
	return o.TaxId, true
}

// HasTaxId returns a boolean if a field has been set.
func (o *BusinessDetails) HasTaxId() bool {
	if o != nil && o.TaxId != nil {
		return true
	}

	return false
}

// SetTaxId gets a reference to the given string and assigns it to the TaxId field.
func (o *BusinessDetails) SetTaxId(v string) {
	o.TaxId = &v
}

func (o BusinessDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DoingBusinessAs != nil {
		toSerialize["doingBusinessAs"] = o.DoingBusinessAs
	}
	if o.LegalBusinessName != nil {
		toSerialize["legalBusinessName"] = o.LegalBusinessName
	}
	if o.RegistrationNumber != nil {
		toSerialize["registrationNumber"] = o.RegistrationNumber
	}
	if o.Shareholders != nil {
		toSerialize["shareholders"] = o.Shareholders
	}
	if o.StockExchange != nil {
		toSerialize["stockExchange"] = o.StockExchange
	}
	if o.StockNumber != nil {
		toSerialize["stockNumber"] = o.StockNumber
	}
	if o.StockTicker != nil {
		toSerialize["stockTicker"] = o.StockTicker
	}
	if o.TaxId != nil {
		toSerialize["taxId"] = o.TaxId
	}
	return json.Marshal(toSerialize)
}

type NullableBusinessDetails struct {
	value *BusinessDetails
	isSet bool
}

func (v NullableBusinessDetails) Get() *BusinessDetails {
	return v.value
}

func (v *NullableBusinessDetails) Set(val *BusinessDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableBusinessDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableBusinessDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBusinessDetails(val *BusinessDetails) *NullableBusinessDetails {
	return &NullableBusinessDetails{value: val, isSet: true}
}

func (v NullableBusinessDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBusinessDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
