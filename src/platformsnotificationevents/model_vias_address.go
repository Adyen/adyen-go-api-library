/*
 * Adyen for Platforms: Notifications
 *
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/platforms/notifications).
 *
 * API version: 6
 * Contact: support@adyen.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformsnotificationevents

import (
	"encoding/json"
)

// ViasAddress struct for ViasAddress
type ViasAddress struct {
	// The name of the city. >Required if either `houseNumberOrName`, `street`, `postalCode`, or `stateOrProvince` are provided.
	City *string `json:"city,omitempty"`
	// The two-character country code of the address. The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL'). > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
	Country string `json:"country"`
	// The number or name of the house.
	HouseNumberOrName *string `json:"houseNumberOrName,omitempty"`
	// The postal code. >A maximum of five (5) digits for an address in the USA, or a maximum of ten (10) characters for an address in all other countries. >Required if either `houseNumberOrName`, `street`, `city`, or `stateOrProvince` are provided.
	PostalCode *string `json:"postalCode,omitempty"`
	// The abbreviation of the state or province. >Two (2) characters for an address in the USA or Canada, or a maximum of three (3) characters for an address in all other countries. >Required for an address in the USA or Canada if either `houseNumberOrName`, `street`, `city`, or `postalCode` are provided.
	StateOrProvince *string `json:"stateOrProvince,omitempty"`
	// The name of the street. >The house number should not be included in this field; it should be separately provided via `houseNumberOrName`. >Required if either `houseNumberOrName`, `city`, `postalCode`, or `stateOrProvince` are provided.
	Street *string `json:"street,omitempty"`
}

// NewViasAddress instantiates a new ViasAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViasAddress(country string) *ViasAddress {
	this := ViasAddress{}
	this.Country = country
	return &this
}

// NewViasAddressWithDefaults instantiates a new ViasAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViasAddressWithDefaults() *ViasAddress {
	this := ViasAddress{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *ViasAddress) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViasAddress) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *ViasAddress) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *ViasAddress) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value
func (o *ViasAddress) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *ViasAddress) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *ViasAddress) SetCountry(v string) {
	o.Country = v
}

// GetHouseNumberOrName returns the HouseNumberOrName field value if set, zero value otherwise.
func (o *ViasAddress) GetHouseNumberOrName() string {
	if o == nil || o.HouseNumberOrName == nil {
		var ret string
		return ret
	}
	return *o.HouseNumberOrName
}

// GetHouseNumberOrNameOk returns a tuple with the HouseNumberOrName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViasAddress) GetHouseNumberOrNameOk() (*string, bool) {
	if o == nil || o.HouseNumberOrName == nil {
		return nil, false
	}
	return o.HouseNumberOrName, true
}

// HasHouseNumberOrName returns a boolean if a field has been set.
func (o *ViasAddress) HasHouseNumberOrName() bool {
	if o != nil && o.HouseNumberOrName != nil {
		return true
	}

	return false
}

// SetHouseNumberOrName gets a reference to the given string and assigns it to the HouseNumberOrName field.
func (o *ViasAddress) SetHouseNumberOrName(v string) {
	o.HouseNumberOrName = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *ViasAddress) GetPostalCode() string {
	if o == nil || o.PostalCode == nil {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViasAddress) GetPostalCodeOk() (*string, bool) {
	if o == nil || o.PostalCode == nil {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *ViasAddress) HasPostalCode() bool {
	if o != nil && o.PostalCode != nil {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *ViasAddress) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetStateOrProvince returns the StateOrProvince field value if set, zero value otherwise.
func (o *ViasAddress) GetStateOrProvince() string {
	if o == nil || o.StateOrProvince == nil {
		var ret string
		return ret
	}
	return *o.StateOrProvince
}

// GetStateOrProvinceOk returns a tuple with the StateOrProvince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViasAddress) GetStateOrProvinceOk() (*string, bool) {
	if o == nil || o.StateOrProvince == nil {
		return nil, false
	}
	return o.StateOrProvince, true
}

// HasStateOrProvince returns a boolean if a field has been set.
func (o *ViasAddress) HasStateOrProvince() bool {
	if o != nil && o.StateOrProvince != nil {
		return true
	}

	return false
}

// SetStateOrProvince gets a reference to the given string and assigns it to the StateOrProvince field.
func (o *ViasAddress) SetStateOrProvince(v string) {
	o.StateOrProvince = &v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *ViasAddress) GetStreet() string {
	if o == nil || o.Street == nil {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViasAddress) GetStreetOk() (*string, bool) {
	if o == nil || o.Street == nil {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *ViasAddress) HasStreet() bool {
	if o != nil && o.Street != nil {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *ViasAddress) SetStreet(v string) {
	o.Street = &v
}

func (o ViasAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if true {
		toSerialize["country"] = o.Country
	}
	if o.HouseNumberOrName != nil {
		toSerialize["houseNumberOrName"] = o.HouseNumberOrName
	}
	if o.PostalCode != nil {
		toSerialize["postalCode"] = o.PostalCode
	}
	if o.StateOrProvince != nil {
		toSerialize["stateOrProvince"] = o.StateOrProvince
	}
	if o.Street != nil {
		toSerialize["street"] = o.Street
	}
	return json.Marshal(toSerialize)
}

type NullableViasAddress struct {
	value *ViasAddress
	isSet bool
}

func (v NullableViasAddress) Get() *ViasAddress {
	return v.value
}

func (v *NullableViasAddress) Set(val *ViasAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableViasAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableViasAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViasAddress(val *ViasAddress) *NullableViasAddress {
	return &NullableViasAddress{value: val, isSet: true}
}

func (v NullableViasAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViasAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
