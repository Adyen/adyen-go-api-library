/*
 * Adyen for Platforms: Notifications
 *
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/platforms/notifications).
 *
 * API version: 6
 * Contact: support@adyen.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformsnotificationevents

import (
	"encoding/json"
)

// NotificationResponse struct for NotificationResponse
type NotificationResponse struct {
	// Set this parameter to **[accepted]** to acknowledge that you received a notification from Adyen.
	NotificationResponse *string `json:"notificationResponse,omitempty"`
}

// NewNotificationResponse instantiates a new NotificationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationResponse() *NotificationResponse {
	this := NotificationResponse{}
	return &this
}

// NewNotificationResponseWithDefaults instantiates a new NotificationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationResponseWithDefaults() *NotificationResponse {
	this := NotificationResponse{}
	return &this
}

// GetNotificationResponse returns the NotificationResponse field value if set, zero value otherwise.
func (o *NotificationResponse) GetNotificationResponse() string {
	if o == nil || o.NotificationResponse == nil {
		var ret string
		return ret
	}
	return *o.NotificationResponse
}

// GetNotificationResponseOk returns a tuple with the NotificationResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationResponse) GetNotificationResponseOk() (*string, bool) {
	if o == nil || o.NotificationResponse == nil {
		return nil, false
	}
	return o.NotificationResponse, true
}

// HasNotificationResponse returns a boolean if a field has been set.
func (o *NotificationResponse) HasNotificationResponse() bool {
	if o != nil && o.NotificationResponse != nil {
		return true
	}

	return false
}

// SetNotificationResponse gets a reference to the given string and assigns it to the NotificationResponse field.
func (o *NotificationResponse) SetNotificationResponse(v string) {
	o.NotificationResponse = &v
}

func (o NotificationResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NotificationResponse != nil {
		toSerialize["notificationResponse"] = o.NotificationResponse
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationResponse struct {
	value *NotificationResponse
	isSet bool
}

func (v NullableNotificationResponse) Get() *NotificationResponse {
	return v.value
}

func (v *NullableNotificationResponse) Set(val *NotificationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationResponse(val *NotificationResponse) *NullableNotificationResponse {
	return &NullableNotificationResponse{value: val, isSet: true}
}

func (v NullableNotificationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
