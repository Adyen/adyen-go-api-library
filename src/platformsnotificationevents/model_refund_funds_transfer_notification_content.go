/*
 * Adyen for Platforms: Notifications
 *
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/platforms/notifications).
 *
 * API version: 6
 * Contact: support@adyen.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformsnotificationevents

import (
	"encoding/json"
)

// RefundFundsTransferNotificationContent struct for RefundFundsTransferNotificationContent
type RefundFundsTransferNotificationContent struct {
	Amount Amount `json:"amount"`
	// Invalid fields list.
	InvalidFields *[]ErrorFieldType `json:"invalidFields,omitempty"`
	// A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.
	MerchantReference *string `json:"merchantReference,omitempty"`
	// A PSP reference of the original fund transfer.
	OriginalReference string           `json:"originalReference"`
	Status            *OperationStatus `json:"status,omitempty"`
}

// NewRefundFundsTransferNotificationContent instantiates a new RefundFundsTransferNotificationContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefundFundsTransferNotificationContent(amount Amount, originalReference string) *RefundFundsTransferNotificationContent {
	this := RefundFundsTransferNotificationContent{}
	this.Amount = amount
	this.OriginalReference = originalReference
	return &this
}

// NewRefundFundsTransferNotificationContentWithDefaults instantiates a new RefundFundsTransferNotificationContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefundFundsTransferNotificationContentWithDefaults() *RefundFundsTransferNotificationContent {
	this := RefundFundsTransferNotificationContent{}
	return &this
}

// GetAmount returns the Amount field value
func (o *RefundFundsTransferNotificationContent) GetAmount() Amount {
	if o == nil {
		var ret Amount
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *RefundFundsTransferNotificationContent) GetAmountOk() (*Amount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *RefundFundsTransferNotificationContent) SetAmount(v Amount) {
	o.Amount = v
}

// GetInvalidFields returns the InvalidFields field value if set, zero value otherwise.
func (o *RefundFundsTransferNotificationContent) GetInvalidFields() []ErrorFieldType {
	if o == nil || o.InvalidFields == nil {
		var ret []ErrorFieldType
		return ret
	}
	return *o.InvalidFields
}

// GetInvalidFieldsOk returns a tuple with the InvalidFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundFundsTransferNotificationContent) GetInvalidFieldsOk() (*[]ErrorFieldType, bool) {
	if o == nil || o.InvalidFields == nil {
		return nil, false
	}
	return o.InvalidFields, true
}

// HasInvalidFields returns a boolean if a field has been set.
func (o *RefundFundsTransferNotificationContent) HasInvalidFields() bool {
	if o != nil && o.InvalidFields != nil {
		return true
	}

	return false
}

// SetInvalidFields gets a reference to the given []ErrorFieldType and assigns it to the InvalidFields field.
func (o *RefundFundsTransferNotificationContent) SetInvalidFields(v []ErrorFieldType) {
	o.InvalidFields = &v
}

// GetMerchantReference returns the MerchantReference field value if set, zero value otherwise.
func (o *RefundFundsTransferNotificationContent) GetMerchantReference() string {
	if o == nil || o.MerchantReference == nil {
		var ret string
		return ret
	}
	return *o.MerchantReference
}

// GetMerchantReferenceOk returns a tuple with the MerchantReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundFundsTransferNotificationContent) GetMerchantReferenceOk() (*string, bool) {
	if o == nil || o.MerchantReference == nil {
		return nil, false
	}
	return o.MerchantReference, true
}

// HasMerchantReference returns a boolean if a field has been set.
func (o *RefundFundsTransferNotificationContent) HasMerchantReference() bool {
	if o != nil && o.MerchantReference != nil {
		return true
	}

	return false
}

// SetMerchantReference gets a reference to the given string and assigns it to the MerchantReference field.
func (o *RefundFundsTransferNotificationContent) SetMerchantReference(v string) {
	o.MerchantReference = &v
}

// GetOriginalReference returns the OriginalReference field value
func (o *RefundFundsTransferNotificationContent) GetOriginalReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalReference
}

// GetOriginalReferenceOk returns a tuple with the OriginalReference field value
// and a boolean to check if the value has been set.
func (o *RefundFundsTransferNotificationContent) GetOriginalReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalReference, true
}

// SetOriginalReference sets field value
func (o *RefundFundsTransferNotificationContent) SetOriginalReference(v string) {
	o.OriginalReference = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RefundFundsTransferNotificationContent) GetStatus() OperationStatus {
	if o == nil || o.Status == nil {
		var ret OperationStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundFundsTransferNotificationContent) GetStatusOk() (*OperationStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RefundFundsTransferNotificationContent) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given OperationStatus and assigns it to the Status field.
func (o *RefundFundsTransferNotificationContent) SetStatus(v OperationStatus) {
	o.Status = &v
}

func (o RefundFundsTransferNotificationContent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if o.InvalidFields != nil {
		toSerialize["invalidFields"] = o.InvalidFields
	}
	if o.MerchantReference != nil {
		toSerialize["merchantReference"] = o.MerchantReference
	}
	if true {
		toSerialize["originalReference"] = o.OriginalReference
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableRefundFundsTransferNotificationContent struct {
	value *RefundFundsTransferNotificationContent
	isSet bool
}

func (v NullableRefundFundsTransferNotificationContent) Get() *RefundFundsTransferNotificationContent {
	return v.value
}

func (v *NullableRefundFundsTransferNotificationContent) Set(val *RefundFundsTransferNotificationContent) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundFundsTransferNotificationContent) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundFundsTransferNotificationContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundFundsTransferNotificationContent(val *RefundFundsTransferNotificationContent) *NullableRefundFundsTransferNotificationContent {
	return &NullableRefundFundsTransferNotificationContent{value: val, isSet: true}
}

func (v NullableRefundFundsTransferNotificationContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundFundsTransferNotificationContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
