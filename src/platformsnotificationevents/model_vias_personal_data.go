/*
 * Adyen for Platforms: Notifications
 *
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/platforms/notifications).
 *
 * API version: 6
 * Contact: support@adyen.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformsnotificationevents

import (
	"encoding/json"
)

// ViasPersonalData struct for ViasPersonalData
type ViasPersonalData struct {
	// The date of birth of the person. The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
	DateOfBirth *string `json:"dateOfBirth,omitempty"`
	// Key value pairs of document type and identify numbers
	DocumentData *[]PersonalDocumentData `json:"documentData,omitempty"`
	// The nationality of the person represented by a two-character country code. >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
	Nationality *string `json:"nationality,omitempty"`
}

// NewViasPersonalData instantiates a new ViasPersonalData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViasPersonalData() *ViasPersonalData {
	this := ViasPersonalData{}
	return &this
}

// NewViasPersonalDataWithDefaults instantiates a new ViasPersonalData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViasPersonalDataWithDefaults() *ViasPersonalData {
	this := ViasPersonalData{}
	return &this
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *ViasPersonalData) GetDateOfBirth() string {
	if o == nil || o.DateOfBirth == nil {
		var ret string
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViasPersonalData) GetDateOfBirthOk() (*string, bool) {
	if o == nil || o.DateOfBirth == nil {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *ViasPersonalData) HasDateOfBirth() bool {
	if o != nil && o.DateOfBirth != nil {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given string and assigns it to the DateOfBirth field.
func (o *ViasPersonalData) SetDateOfBirth(v string) {
	o.DateOfBirth = &v
}

// GetDocumentData returns the DocumentData field value if set, zero value otherwise.
func (o *ViasPersonalData) GetDocumentData() []PersonalDocumentData {
	if o == nil || o.DocumentData == nil {
		var ret []PersonalDocumentData
		return ret
	}
	return *o.DocumentData
}

// GetDocumentDataOk returns a tuple with the DocumentData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViasPersonalData) GetDocumentDataOk() (*[]PersonalDocumentData, bool) {
	if o == nil || o.DocumentData == nil {
		return nil, false
	}
	return o.DocumentData, true
}

// HasDocumentData returns a boolean if a field has been set.
func (o *ViasPersonalData) HasDocumentData() bool {
	if o != nil && o.DocumentData != nil {
		return true
	}

	return false
}

// SetDocumentData gets a reference to the given []PersonalDocumentData and assigns it to the DocumentData field.
func (o *ViasPersonalData) SetDocumentData(v []PersonalDocumentData) {
	o.DocumentData = &v
}

// GetNationality returns the Nationality field value if set, zero value otherwise.
func (o *ViasPersonalData) GetNationality() string {
	if o == nil || o.Nationality == nil {
		var ret string
		return ret
	}
	return *o.Nationality
}

// GetNationalityOk returns a tuple with the Nationality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViasPersonalData) GetNationalityOk() (*string, bool) {
	if o == nil || o.Nationality == nil {
		return nil, false
	}
	return o.Nationality, true
}

// HasNationality returns a boolean if a field has been set.
func (o *ViasPersonalData) HasNationality() bool {
	if o != nil && o.Nationality != nil {
		return true
	}

	return false
}

// SetNationality gets a reference to the given string and assigns it to the Nationality field.
func (o *ViasPersonalData) SetNationality(v string) {
	o.Nationality = &v
}

func (o ViasPersonalData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DateOfBirth != nil {
		toSerialize["dateOfBirth"] = o.DateOfBirth
	}
	if o.DocumentData != nil {
		toSerialize["documentData"] = o.DocumentData
	}
	if o.Nationality != nil {
		toSerialize["nationality"] = o.Nationality
	}
	return json.Marshal(toSerialize)
}

type NullableViasPersonalData struct {
	value *ViasPersonalData
	isSet bool
}

func (v NullableViasPersonalData) Get() *ViasPersonalData {
	return v.value
}

func (v *NullableViasPersonalData) Set(val *ViasPersonalData) {
	v.value = val
	v.isSet = true
}

func (v NullableViasPersonalData) IsSet() bool {
	return v.isSet
}

func (v *NullableViasPersonalData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViasPersonalData(val *ViasPersonalData) *NullableViasPersonalData {
	return &NullableViasPersonalData{value: val, isSet: true}
}

func (v NullableViasPersonalData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViasPersonalData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
