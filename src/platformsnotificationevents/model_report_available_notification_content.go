/*
 * Adyen for Platforms: Notifications
 *
 * The Notification API sends notifications to the endpoints specified in a given subscription. Subscriptions are managed through the Notification Configuration API. The API specifications listed here detail the format of each notification.  For more information, refer to our [documentation](https://docs.adyen.com/platforms/notifications).
 *
 * API version: 6
 * Contact: support@adyen.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformsnotificationevents

import (
	"encoding/json"
	"time"
)

// ReportAvailableNotificationContent struct for ReportAvailableNotificationContent
type ReportAvailableNotificationContent struct {
	// The code of the Account to which the report applies.
	AccountCode *string `json:"accountCode,omitempty"`
	// The type of Account to which the report applies.
	AccountType *string `json:"accountType,omitempty"`
	// The date of the event to which the report applies.
	EventDate *time.Time `json:"eventDate,omitempty"`
	// The URL at which the report can be accessed.
	RemoteAccessUrl *string `json:"remoteAccessUrl,omitempty"`
	// Indicates whether the event resulted in a success.
	Success *bool `json:"success,omitempty"`
}

// NewReportAvailableNotificationContent instantiates a new ReportAvailableNotificationContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportAvailableNotificationContent() *ReportAvailableNotificationContent {
	this := ReportAvailableNotificationContent{}
	return &this
}

// NewReportAvailableNotificationContentWithDefaults instantiates a new ReportAvailableNotificationContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportAvailableNotificationContentWithDefaults() *ReportAvailableNotificationContent {
	this := ReportAvailableNotificationContent{}
	return &this
}

// GetAccountCode returns the AccountCode field value if set, zero value otherwise.
func (o *ReportAvailableNotificationContent) GetAccountCode() string {
	if o == nil || o.AccountCode == nil {
		var ret string
		return ret
	}
	return *o.AccountCode
}

// GetAccountCodeOk returns a tuple with the AccountCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportAvailableNotificationContent) GetAccountCodeOk() (*string, bool) {
	if o == nil || o.AccountCode == nil {
		return nil, false
	}
	return o.AccountCode, true
}

// HasAccountCode returns a boolean if a field has been set.
func (o *ReportAvailableNotificationContent) HasAccountCode() bool {
	if o != nil && o.AccountCode != nil {
		return true
	}

	return false
}

// SetAccountCode gets a reference to the given string and assigns it to the AccountCode field.
func (o *ReportAvailableNotificationContent) SetAccountCode(v string) {
	o.AccountCode = &v
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *ReportAvailableNotificationContent) GetAccountType() string {
	if o == nil || o.AccountType == nil {
		var ret string
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportAvailableNotificationContent) GetAccountTypeOk() (*string, bool) {
	if o == nil || o.AccountType == nil {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *ReportAvailableNotificationContent) HasAccountType() bool {
	if o != nil && o.AccountType != nil {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given string and assigns it to the AccountType field.
func (o *ReportAvailableNotificationContent) SetAccountType(v string) {
	o.AccountType = &v
}

// GetEventDate returns the EventDate field value if set, zero value otherwise.
func (o *ReportAvailableNotificationContent) GetEventDate() time.Time {
	if o == nil || o.EventDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EventDate
}

// GetEventDateOk returns a tuple with the EventDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportAvailableNotificationContent) GetEventDateOk() (*time.Time, bool) {
	if o == nil || o.EventDate == nil {
		return nil, false
	}
	return o.EventDate, true
}

// HasEventDate returns a boolean if a field has been set.
func (o *ReportAvailableNotificationContent) HasEventDate() bool {
	if o != nil && o.EventDate != nil {
		return true
	}

	return false
}

// SetEventDate gets a reference to the given time.Time and assigns it to the EventDate field.
func (o *ReportAvailableNotificationContent) SetEventDate(v time.Time) {
	o.EventDate = &v
}

// GetRemoteAccessUrl returns the RemoteAccessUrl field value if set, zero value otherwise.
func (o *ReportAvailableNotificationContent) GetRemoteAccessUrl() string {
	if o == nil || o.RemoteAccessUrl == nil {
		var ret string
		return ret
	}
	return *o.RemoteAccessUrl
}

// GetRemoteAccessUrlOk returns a tuple with the RemoteAccessUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportAvailableNotificationContent) GetRemoteAccessUrlOk() (*string, bool) {
	if o == nil || o.RemoteAccessUrl == nil {
		return nil, false
	}
	return o.RemoteAccessUrl, true
}

// HasRemoteAccessUrl returns a boolean if a field has been set.
func (o *ReportAvailableNotificationContent) HasRemoteAccessUrl() bool {
	if o != nil && o.RemoteAccessUrl != nil {
		return true
	}

	return false
}

// SetRemoteAccessUrl gets a reference to the given string and assigns it to the RemoteAccessUrl field.
func (o *ReportAvailableNotificationContent) SetRemoteAccessUrl(v string) {
	o.RemoteAccessUrl = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ReportAvailableNotificationContent) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportAvailableNotificationContent) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *ReportAvailableNotificationContent) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *ReportAvailableNotificationContent) SetSuccess(v bool) {
	o.Success = &v
}

func (o ReportAvailableNotificationContent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountCode != nil {
		toSerialize["accountCode"] = o.AccountCode
	}
	if o.AccountType != nil {
		toSerialize["accountType"] = o.AccountType
	}
	if o.EventDate != nil {
		toSerialize["eventDate"] = o.EventDate
	}
	if o.RemoteAccessUrl != nil {
		toSerialize["remoteAccessUrl"] = o.RemoteAccessUrl
	}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	return json.Marshal(toSerialize)
}

type NullableReportAvailableNotificationContent struct {
	value *ReportAvailableNotificationContent
	isSet bool
}

func (v NullableReportAvailableNotificationContent) Get() *ReportAvailableNotificationContent {
	return v.value
}

func (v *NullableReportAvailableNotificationContent) Set(val *ReportAvailableNotificationContent) {
	v.value = val
	v.isSet = true
}

func (v NullableReportAvailableNotificationContent) IsSet() bool {
	return v.isSet
}

func (v *NullableReportAvailableNotificationContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportAvailableNotificationContent(val *ReportAvailableNotificationContent) *NullableReportAvailableNotificationContent {
	return &NullableReportAvailableNotificationContent{value: val, isSet: true}
}

func (v NullableReportAvailableNotificationContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportAvailableNotificationContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
