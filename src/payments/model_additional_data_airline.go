/*
Adyen Payment API

API version: 68
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package payments

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v8/src/common"
)

// checks if the AdditionalDataAirline type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &AdditionalDataAirline{}

// AdditionalDataAirline struct for AdditionalDataAirline
type AdditionalDataAirline struct {
	// The reference number for the invoice, issued by the agency. * Encoding: ASCII * minLength: 1 character * maxLength: 6 characters
	AirlineAgencyInvoiceNumber *string `json:"airline.agency_invoice_number,omitempty"`
	// The two-letter agency plan identifier. * Encoding: ASCII * minLength: 2 characters * maxLength: 2 characters
	AirlineAgencyPlanName *string `json:"airline.agency_plan_name,omitempty"`
	// The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM = 074 * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.
	AirlineAirlineCode *string `json:"airline.airline_code,omitempty"`
	// The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM = KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces *Must not be all zeros.
	AirlineAirlineDesignatorCode *string `json:"airline.airline_designator_code,omitempty"`
	// The amount charged for boarding the plane, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 character * maxLength: 18 characters
	AirlineBoardingFee *string `json:"airline.boarding_fee,omitempty"`
	// The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket. * Encoding: ASCII * minLength: 4 characters * maxLength: 4 characters
	AirlineComputerizedReservationSystem *string `json:"airline.computerized_reservation_system,omitempty"`
	// The alphanumeric customer reference number. * Encoding: ASCII * maxLength: 20 characters * If you send more than 20 characters, the customer reference number is truncated * Must not be all spaces
	AirlineCustomerReferenceNumber *string `json:"airline.customer_reference_number,omitempty"`
	// A code that identifies the type of item bought. The description of the code can appear on credit card statements. * Encoding: ASCII * Example: Passenger ticket = 01 * minLength: 2 characters * maxLength: 2 characters
	AirlineDocumentType *string `json:"airline.document_type,omitempty"`
	// The flight departure date. Local time `(HH:mm)` is optional. * Date format: `yyyy-MM-dd` * Date and time format: `yyyy-MM-dd HH:mm` * minLength: 10 characters * maxLength: 16 characters
	AirlineFlightDate *string `json:"airline.flight_date,omitempty"`
	// The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM = KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces *Must not be all zeros.
	AirlineLegCarrierCode *string `json:"airline.leg.carrier_code,omitempty"`
	// A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not be all spaces *Must not be all zeros.
	AirlineLegClassOfTravel *string `json:"airline.leg.class_of_travel,omitempty"`
	//   Date and time of travel in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format `yyyy-MM-dd HH:mm`. * Encoding: ASCII * minLength: 16 characters * maxLength: 16 characters
	AirlineLegDateOfTravel *string `json:"airline.leg.date_of_travel,omitempty"`
	// The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam = AMS * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.
	AirlineLegDepartAirport *string `json:"airline.leg.depart_airport,omitempty"`
	// The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 12 *Must not be all zeros.
	AirlineLegDepartTax *string `json:"airline.leg.depart_tax,omitempty"`
	// The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam = AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.
	AirlineLegDestinationCode *string `json:"airline.leg.destination_code,omitempty"`
	// The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not be all spaces *Must not be all zeros.
	AirlineLegFareBaseCode *string `json:"airline.leg.fare_base_code,omitempty"`
	// The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not be all spaces *Must not be all zeros.
	AirlineLegFlightNumber *string `json:"airline.leg.flight_number,omitempty"`
	// A one-letter code that indicates whether the passenger is entitled to make a stopover. Can be a space, O if the passenger is entitled to make a stopover, or X if they are not. * Encoding: ASCII * minLength: 1 character * maxLength: 1 character
	AirlineLegStopOverCode *string `json:"airline.leg.stop_over_code,omitempty"`
	// The passenger's date of birth.  Date format: `yyyy-MM-dd` * minLength: 10 * maxLength: 10
	AirlinePassengerDateOfBirth *string `json:"airline.passenger.date_of_birth,omitempty"`
	// The passenger's first name. > This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII
	AirlinePassengerFirstName *string `json:"airline.passenger.first_name,omitempty"`
	// The passenger's last name. > This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII
	AirlinePassengerLastName *string `json:"airline.passenger.last_name,omitempty"`
	// The passenger's telephone number, including country code. This is an alphanumeric field that can include the '+' and '-' signs. * Encoding: ASCII * minLength: 3 characters * maxLength: 30 characters
	AirlinePassengerTelephoneNumber *string `json:"airline.passenger.telephone_number,omitempty"`
	// The IATA passenger type code (PTC). * Encoding: ASCII * minLength: 3 characters * maxLength: 6 characters
	AirlinePassengerTravellerType *string `json:"airline.passenger.traveller_type,omitempty"`
	// The passenger's name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not be all spaces  *Must not be all zeros.
	AirlinePassengerName string `json:"airline.passenger_name"`
	// The address of the organization that issued the ticket. * minLength: 0 characters * maxLength: 16 characters
	AirlineTicketIssueAddress *string `json:"airline.ticket_issue_address,omitempty"`
	// The ticket's unique identifier. * minLength: 1 character * maxLength: 15 characters * Must not be all spaces *Must not be all zeros.
	AirlineTicketNumber *string `json:"airline.ticket_number,omitempty"`
	// The unique identifier from IATA or ARC for the travel agency that issues the ticket. * Encoding: ASCII * minLength: 1 character * maxLength: 8 characters * Must not be all spaces *Must not be all zeros.
	AirlineTravelAgencyCode *string `json:"airline.travel_agency_code,omitempty"`
	// The name of the travel agency.  * Encoding: ASCII * minLength: 1 character * maxLength: 25 characters * Must not be all spaces *Must not be all zeros.
	AirlineTravelAgencyName *string `json:"airline.travel_agency_name,omitempty"`
}

// NewAdditionalDataAirline instantiates a new AdditionalDataAirline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdditionalDataAirline(airlinePassengerName string) *AdditionalDataAirline {
	this := AdditionalDataAirline{}
	this.AirlinePassengerName = airlinePassengerName
	return &this
}

// NewAdditionalDataAirlineWithDefaults instantiates a new AdditionalDataAirline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdditionalDataAirlineWithDefaults() *AdditionalDataAirline {
	this := AdditionalDataAirline{}
	return &this
}

// GetAirlineAgencyInvoiceNumber returns the AirlineAgencyInvoiceNumber field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineAgencyInvoiceNumber() string {
	if o == nil || common.IsNil(o.AirlineAgencyInvoiceNumber) {
		var ret string
		return ret
	}
	return *o.AirlineAgencyInvoiceNumber
}

// GetAirlineAgencyInvoiceNumberOk returns a tuple with the AirlineAgencyInvoiceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineAgencyInvoiceNumberOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineAgencyInvoiceNumber) {
		return nil, false
	}
	return o.AirlineAgencyInvoiceNumber, true
}

// HasAirlineAgencyInvoiceNumber returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineAgencyInvoiceNumber() bool {
	if o != nil && !common.IsNil(o.AirlineAgencyInvoiceNumber) {
		return true
	}

	return false
}

// SetAirlineAgencyInvoiceNumber gets a reference to the given string and assigns it to the AirlineAgencyInvoiceNumber field.
func (o *AdditionalDataAirline) SetAirlineAgencyInvoiceNumber(v string) {
	o.AirlineAgencyInvoiceNumber = &v
}

// GetAirlineAgencyPlanName returns the AirlineAgencyPlanName field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineAgencyPlanName() string {
	if o == nil || common.IsNil(o.AirlineAgencyPlanName) {
		var ret string
		return ret
	}
	return *o.AirlineAgencyPlanName
}

// GetAirlineAgencyPlanNameOk returns a tuple with the AirlineAgencyPlanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineAgencyPlanNameOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineAgencyPlanName) {
		return nil, false
	}
	return o.AirlineAgencyPlanName, true
}

// HasAirlineAgencyPlanName returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineAgencyPlanName() bool {
	if o != nil && !common.IsNil(o.AirlineAgencyPlanName) {
		return true
	}

	return false
}

// SetAirlineAgencyPlanName gets a reference to the given string and assigns it to the AirlineAgencyPlanName field.
func (o *AdditionalDataAirline) SetAirlineAgencyPlanName(v string) {
	o.AirlineAgencyPlanName = &v
}

// GetAirlineAirlineCode returns the AirlineAirlineCode field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineAirlineCode() string {
	if o == nil || common.IsNil(o.AirlineAirlineCode) {
		var ret string
		return ret
	}
	return *o.AirlineAirlineCode
}

// GetAirlineAirlineCodeOk returns a tuple with the AirlineAirlineCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineAirlineCodeOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineAirlineCode) {
		return nil, false
	}
	return o.AirlineAirlineCode, true
}

// HasAirlineAirlineCode returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineAirlineCode() bool {
	if o != nil && !common.IsNil(o.AirlineAirlineCode) {
		return true
	}

	return false
}

// SetAirlineAirlineCode gets a reference to the given string and assigns it to the AirlineAirlineCode field.
func (o *AdditionalDataAirline) SetAirlineAirlineCode(v string) {
	o.AirlineAirlineCode = &v
}

// GetAirlineAirlineDesignatorCode returns the AirlineAirlineDesignatorCode field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineAirlineDesignatorCode() string {
	if o == nil || common.IsNil(o.AirlineAirlineDesignatorCode) {
		var ret string
		return ret
	}
	return *o.AirlineAirlineDesignatorCode
}

// GetAirlineAirlineDesignatorCodeOk returns a tuple with the AirlineAirlineDesignatorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineAirlineDesignatorCodeOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineAirlineDesignatorCode) {
		return nil, false
	}
	return o.AirlineAirlineDesignatorCode, true
}

// HasAirlineAirlineDesignatorCode returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineAirlineDesignatorCode() bool {
	if o != nil && !common.IsNil(o.AirlineAirlineDesignatorCode) {
		return true
	}

	return false
}

// SetAirlineAirlineDesignatorCode gets a reference to the given string and assigns it to the AirlineAirlineDesignatorCode field.
func (o *AdditionalDataAirline) SetAirlineAirlineDesignatorCode(v string) {
	o.AirlineAirlineDesignatorCode = &v
}

// GetAirlineBoardingFee returns the AirlineBoardingFee field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineBoardingFee() string {
	if o == nil || common.IsNil(o.AirlineBoardingFee) {
		var ret string
		return ret
	}
	return *o.AirlineBoardingFee
}

// GetAirlineBoardingFeeOk returns a tuple with the AirlineBoardingFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineBoardingFeeOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineBoardingFee) {
		return nil, false
	}
	return o.AirlineBoardingFee, true
}

// HasAirlineBoardingFee returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineBoardingFee() bool {
	if o != nil && !common.IsNil(o.AirlineBoardingFee) {
		return true
	}

	return false
}

// SetAirlineBoardingFee gets a reference to the given string and assigns it to the AirlineBoardingFee field.
func (o *AdditionalDataAirline) SetAirlineBoardingFee(v string) {
	o.AirlineBoardingFee = &v
}

// GetAirlineComputerizedReservationSystem returns the AirlineComputerizedReservationSystem field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineComputerizedReservationSystem() string {
	if o == nil || common.IsNil(o.AirlineComputerizedReservationSystem) {
		var ret string
		return ret
	}
	return *o.AirlineComputerizedReservationSystem
}

// GetAirlineComputerizedReservationSystemOk returns a tuple with the AirlineComputerizedReservationSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineComputerizedReservationSystemOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineComputerizedReservationSystem) {
		return nil, false
	}
	return o.AirlineComputerizedReservationSystem, true
}

// HasAirlineComputerizedReservationSystem returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineComputerizedReservationSystem() bool {
	if o != nil && !common.IsNil(o.AirlineComputerizedReservationSystem) {
		return true
	}

	return false
}

// SetAirlineComputerizedReservationSystem gets a reference to the given string and assigns it to the AirlineComputerizedReservationSystem field.
func (o *AdditionalDataAirline) SetAirlineComputerizedReservationSystem(v string) {
	o.AirlineComputerizedReservationSystem = &v
}

// GetAirlineCustomerReferenceNumber returns the AirlineCustomerReferenceNumber field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineCustomerReferenceNumber() string {
	if o == nil || common.IsNil(o.AirlineCustomerReferenceNumber) {
		var ret string
		return ret
	}
	return *o.AirlineCustomerReferenceNumber
}

// GetAirlineCustomerReferenceNumberOk returns a tuple with the AirlineCustomerReferenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineCustomerReferenceNumberOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineCustomerReferenceNumber) {
		return nil, false
	}
	return o.AirlineCustomerReferenceNumber, true
}

// HasAirlineCustomerReferenceNumber returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineCustomerReferenceNumber() bool {
	if o != nil && !common.IsNil(o.AirlineCustomerReferenceNumber) {
		return true
	}

	return false
}

// SetAirlineCustomerReferenceNumber gets a reference to the given string and assigns it to the AirlineCustomerReferenceNumber field.
func (o *AdditionalDataAirline) SetAirlineCustomerReferenceNumber(v string) {
	o.AirlineCustomerReferenceNumber = &v
}

// GetAirlineDocumentType returns the AirlineDocumentType field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineDocumentType() string {
	if o == nil || common.IsNil(o.AirlineDocumentType) {
		var ret string
		return ret
	}
	return *o.AirlineDocumentType
}

// GetAirlineDocumentTypeOk returns a tuple with the AirlineDocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineDocumentTypeOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineDocumentType) {
		return nil, false
	}
	return o.AirlineDocumentType, true
}

// HasAirlineDocumentType returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineDocumentType() bool {
	if o != nil && !common.IsNil(o.AirlineDocumentType) {
		return true
	}

	return false
}

// SetAirlineDocumentType gets a reference to the given string and assigns it to the AirlineDocumentType field.
func (o *AdditionalDataAirline) SetAirlineDocumentType(v string) {
	o.AirlineDocumentType = &v
}

// GetAirlineFlightDate returns the AirlineFlightDate field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineFlightDate() string {
	if o == nil || common.IsNil(o.AirlineFlightDate) {
		var ret string
		return ret
	}
	return *o.AirlineFlightDate
}

// GetAirlineFlightDateOk returns a tuple with the AirlineFlightDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineFlightDateOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineFlightDate) {
		return nil, false
	}
	return o.AirlineFlightDate, true
}

// HasAirlineFlightDate returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineFlightDate() bool {
	if o != nil && !common.IsNil(o.AirlineFlightDate) {
		return true
	}

	return false
}

// SetAirlineFlightDate gets a reference to the given string and assigns it to the AirlineFlightDate field.
func (o *AdditionalDataAirline) SetAirlineFlightDate(v string) {
	o.AirlineFlightDate = &v
}

// GetAirlineLegCarrierCode returns the AirlineLegCarrierCode field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineLegCarrierCode() string {
	if o == nil || common.IsNil(o.AirlineLegCarrierCode) {
		var ret string
		return ret
	}
	return *o.AirlineLegCarrierCode
}

// GetAirlineLegCarrierCodeOk returns a tuple with the AirlineLegCarrierCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineLegCarrierCodeOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineLegCarrierCode) {
		return nil, false
	}
	return o.AirlineLegCarrierCode, true
}

// HasAirlineLegCarrierCode returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineLegCarrierCode() bool {
	if o != nil && !common.IsNil(o.AirlineLegCarrierCode) {
		return true
	}

	return false
}

// SetAirlineLegCarrierCode gets a reference to the given string and assigns it to the AirlineLegCarrierCode field.
func (o *AdditionalDataAirline) SetAirlineLegCarrierCode(v string) {
	o.AirlineLegCarrierCode = &v
}

// GetAirlineLegClassOfTravel returns the AirlineLegClassOfTravel field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineLegClassOfTravel() string {
	if o == nil || common.IsNil(o.AirlineLegClassOfTravel) {
		var ret string
		return ret
	}
	return *o.AirlineLegClassOfTravel
}

// GetAirlineLegClassOfTravelOk returns a tuple with the AirlineLegClassOfTravel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineLegClassOfTravelOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineLegClassOfTravel) {
		return nil, false
	}
	return o.AirlineLegClassOfTravel, true
}

// HasAirlineLegClassOfTravel returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineLegClassOfTravel() bool {
	if o != nil && !common.IsNil(o.AirlineLegClassOfTravel) {
		return true
	}

	return false
}

// SetAirlineLegClassOfTravel gets a reference to the given string and assigns it to the AirlineLegClassOfTravel field.
func (o *AdditionalDataAirline) SetAirlineLegClassOfTravel(v string) {
	o.AirlineLegClassOfTravel = &v
}

// GetAirlineLegDateOfTravel returns the AirlineLegDateOfTravel field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineLegDateOfTravel() string {
	if o == nil || common.IsNil(o.AirlineLegDateOfTravel) {
		var ret string
		return ret
	}
	return *o.AirlineLegDateOfTravel
}

// GetAirlineLegDateOfTravelOk returns a tuple with the AirlineLegDateOfTravel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineLegDateOfTravelOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineLegDateOfTravel) {
		return nil, false
	}
	return o.AirlineLegDateOfTravel, true
}

// HasAirlineLegDateOfTravel returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineLegDateOfTravel() bool {
	if o != nil && !common.IsNil(o.AirlineLegDateOfTravel) {
		return true
	}

	return false
}

// SetAirlineLegDateOfTravel gets a reference to the given string and assigns it to the AirlineLegDateOfTravel field.
func (o *AdditionalDataAirline) SetAirlineLegDateOfTravel(v string) {
	o.AirlineLegDateOfTravel = &v
}

// GetAirlineLegDepartAirport returns the AirlineLegDepartAirport field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineLegDepartAirport() string {
	if o == nil || common.IsNil(o.AirlineLegDepartAirport) {
		var ret string
		return ret
	}
	return *o.AirlineLegDepartAirport
}

// GetAirlineLegDepartAirportOk returns a tuple with the AirlineLegDepartAirport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineLegDepartAirportOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineLegDepartAirport) {
		return nil, false
	}
	return o.AirlineLegDepartAirport, true
}

// HasAirlineLegDepartAirport returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineLegDepartAirport() bool {
	if o != nil && !common.IsNil(o.AirlineLegDepartAirport) {
		return true
	}

	return false
}

// SetAirlineLegDepartAirport gets a reference to the given string and assigns it to the AirlineLegDepartAirport field.
func (o *AdditionalDataAirline) SetAirlineLegDepartAirport(v string) {
	o.AirlineLegDepartAirport = &v
}

// GetAirlineLegDepartTax returns the AirlineLegDepartTax field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineLegDepartTax() string {
	if o == nil || common.IsNil(o.AirlineLegDepartTax) {
		var ret string
		return ret
	}
	return *o.AirlineLegDepartTax
}

// GetAirlineLegDepartTaxOk returns a tuple with the AirlineLegDepartTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineLegDepartTaxOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineLegDepartTax) {
		return nil, false
	}
	return o.AirlineLegDepartTax, true
}

// HasAirlineLegDepartTax returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineLegDepartTax() bool {
	if o != nil && !common.IsNil(o.AirlineLegDepartTax) {
		return true
	}

	return false
}

// SetAirlineLegDepartTax gets a reference to the given string and assigns it to the AirlineLegDepartTax field.
func (o *AdditionalDataAirline) SetAirlineLegDepartTax(v string) {
	o.AirlineLegDepartTax = &v
}

// GetAirlineLegDestinationCode returns the AirlineLegDestinationCode field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineLegDestinationCode() string {
	if o == nil || common.IsNil(o.AirlineLegDestinationCode) {
		var ret string
		return ret
	}
	return *o.AirlineLegDestinationCode
}

// GetAirlineLegDestinationCodeOk returns a tuple with the AirlineLegDestinationCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineLegDestinationCodeOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineLegDestinationCode) {
		return nil, false
	}
	return o.AirlineLegDestinationCode, true
}

// HasAirlineLegDestinationCode returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineLegDestinationCode() bool {
	if o != nil && !common.IsNil(o.AirlineLegDestinationCode) {
		return true
	}

	return false
}

// SetAirlineLegDestinationCode gets a reference to the given string and assigns it to the AirlineLegDestinationCode field.
func (o *AdditionalDataAirline) SetAirlineLegDestinationCode(v string) {
	o.AirlineLegDestinationCode = &v
}

// GetAirlineLegFareBaseCode returns the AirlineLegFareBaseCode field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineLegFareBaseCode() string {
	if o == nil || common.IsNil(o.AirlineLegFareBaseCode) {
		var ret string
		return ret
	}
	return *o.AirlineLegFareBaseCode
}

// GetAirlineLegFareBaseCodeOk returns a tuple with the AirlineLegFareBaseCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineLegFareBaseCodeOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineLegFareBaseCode) {
		return nil, false
	}
	return o.AirlineLegFareBaseCode, true
}

// HasAirlineLegFareBaseCode returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineLegFareBaseCode() bool {
	if o != nil && !common.IsNil(o.AirlineLegFareBaseCode) {
		return true
	}

	return false
}

// SetAirlineLegFareBaseCode gets a reference to the given string and assigns it to the AirlineLegFareBaseCode field.
func (o *AdditionalDataAirline) SetAirlineLegFareBaseCode(v string) {
	o.AirlineLegFareBaseCode = &v
}

// GetAirlineLegFlightNumber returns the AirlineLegFlightNumber field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineLegFlightNumber() string {
	if o == nil || common.IsNil(o.AirlineLegFlightNumber) {
		var ret string
		return ret
	}
	return *o.AirlineLegFlightNumber
}

// GetAirlineLegFlightNumberOk returns a tuple with the AirlineLegFlightNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineLegFlightNumberOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineLegFlightNumber) {
		return nil, false
	}
	return o.AirlineLegFlightNumber, true
}

// HasAirlineLegFlightNumber returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineLegFlightNumber() bool {
	if o != nil && !common.IsNil(o.AirlineLegFlightNumber) {
		return true
	}

	return false
}

// SetAirlineLegFlightNumber gets a reference to the given string and assigns it to the AirlineLegFlightNumber field.
func (o *AdditionalDataAirline) SetAirlineLegFlightNumber(v string) {
	o.AirlineLegFlightNumber = &v
}

// GetAirlineLegStopOverCode returns the AirlineLegStopOverCode field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineLegStopOverCode() string {
	if o == nil || common.IsNil(o.AirlineLegStopOverCode) {
		var ret string
		return ret
	}
	return *o.AirlineLegStopOverCode
}

// GetAirlineLegStopOverCodeOk returns a tuple with the AirlineLegStopOverCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineLegStopOverCodeOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineLegStopOverCode) {
		return nil, false
	}
	return o.AirlineLegStopOverCode, true
}

// HasAirlineLegStopOverCode returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineLegStopOverCode() bool {
	if o != nil && !common.IsNil(o.AirlineLegStopOverCode) {
		return true
	}

	return false
}

// SetAirlineLegStopOverCode gets a reference to the given string and assigns it to the AirlineLegStopOverCode field.
func (o *AdditionalDataAirline) SetAirlineLegStopOverCode(v string) {
	o.AirlineLegStopOverCode = &v
}

// GetAirlinePassengerDateOfBirth returns the AirlinePassengerDateOfBirth field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlinePassengerDateOfBirth() string {
	if o == nil || common.IsNil(o.AirlinePassengerDateOfBirth) {
		var ret string
		return ret
	}
	return *o.AirlinePassengerDateOfBirth
}

// GetAirlinePassengerDateOfBirthOk returns a tuple with the AirlinePassengerDateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlinePassengerDateOfBirthOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlinePassengerDateOfBirth) {
		return nil, false
	}
	return o.AirlinePassengerDateOfBirth, true
}

// HasAirlinePassengerDateOfBirth returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlinePassengerDateOfBirth() bool {
	if o != nil && !common.IsNil(o.AirlinePassengerDateOfBirth) {
		return true
	}

	return false
}

// SetAirlinePassengerDateOfBirth gets a reference to the given string and assigns it to the AirlinePassengerDateOfBirth field.
func (o *AdditionalDataAirline) SetAirlinePassengerDateOfBirth(v string) {
	o.AirlinePassengerDateOfBirth = &v
}

// GetAirlinePassengerFirstName returns the AirlinePassengerFirstName field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlinePassengerFirstName() string {
	if o == nil || common.IsNil(o.AirlinePassengerFirstName) {
		var ret string
		return ret
	}
	return *o.AirlinePassengerFirstName
}

// GetAirlinePassengerFirstNameOk returns a tuple with the AirlinePassengerFirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlinePassengerFirstNameOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlinePassengerFirstName) {
		return nil, false
	}
	return o.AirlinePassengerFirstName, true
}

// HasAirlinePassengerFirstName returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlinePassengerFirstName() bool {
	if o != nil && !common.IsNil(o.AirlinePassengerFirstName) {
		return true
	}

	return false
}

// SetAirlinePassengerFirstName gets a reference to the given string and assigns it to the AirlinePassengerFirstName field.
func (o *AdditionalDataAirline) SetAirlinePassengerFirstName(v string) {
	o.AirlinePassengerFirstName = &v
}

// GetAirlinePassengerLastName returns the AirlinePassengerLastName field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlinePassengerLastName() string {
	if o == nil || common.IsNil(o.AirlinePassengerLastName) {
		var ret string
		return ret
	}
	return *o.AirlinePassengerLastName
}

// GetAirlinePassengerLastNameOk returns a tuple with the AirlinePassengerLastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlinePassengerLastNameOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlinePassengerLastName) {
		return nil, false
	}
	return o.AirlinePassengerLastName, true
}

// HasAirlinePassengerLastName returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlinePassengerLastName() bool {
	if o != nil && !common.IsNil(o.AirlinePassengerLastName) {
		return true
	}

	return false
}

// SetAirlinePassengerLastName gets a reference to the given string and assigns it to the AirlinePassengerLastName field.
func (o *AdditionalDataAirline) SetAirlinePassengerLastName(v string) {
	o.AirlinePassengerLastName = &v
}

// GetAirlinePassengerTelephoneNumber returns the AirlinePassengerTelephoneNumber field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlinePassengerTelephoneNumber() string {
	if o == nil || common.IsNil(o.AirlinePassengerTelephoneNumber) {
		var ret string
		return ret
	}
	return *o.AirlinePassengerTelephoneNumber
}

// GetAirlinePassengerTelephoneNumberOk returns a tuple with the AirlinePassengerTelephoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlinePassengerTelephoneNumberOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlinePassengerTelephoneNumber) {
		return nil, false
	}
	return o.AirlinePassengerTelephoneNumber, true
}

// HasAirlinePassengerTelephoneNumber returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlinePassengerTelephoneNumber() bool {
	if o != nil && !common.IsNil(o.AirlinePassengerTelephoneNumber) {
		return true
	}

	return false
}

// SetAirlinePassengerTelephoneNumber gets a reference to the given string and assigns it to the AirlinePassengerTelephoneNumber field.
func (o *AdditionalDataAirline) SetAirlinePassengerTelephoneNumber(v string) {
	o.AirlinePassengerTelephoneNumber = &v
}

// GetAirlinePassengerTravellerType returns the AirlinePassengerTravellerType field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlinePassengerTravellerType() string {
	if o == nil || common.IsNil(o.AirlinePassengerTravellerType) {
		var ret string
		return ret
	}
	return *o.AirlinePassengerTravellerType
}

// GetAirlinePassengerTravellerTypeOk returns a tuple with the AirlinePassengerTravellerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlinePassengerTravellerTypeOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlinePassengerTravellerType) {
		return nil, false
	}
	return o.AirlinePassengerTravellerType, true
}

// HasAirlinePassengerTravellerType returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlinePassengerTravellerType() bool {
	if o != nil && !common.IsNil(o.AirlinePassengerTravellerType) {
		return true
	}

	return false
}

// SetAirlinePassengerTravellerType gets a reference to the given string and assigns it to the AirlinePassengerTravellerType field.
func (o *AdditionalDataAirline) SetAirlinePassengerTravellerType(v string) {
	o.AirlinePassengerTravellerType = &v
}

// GetAirlinePassengerName returns the AirlinePassengerName field value
func (o *AdditionalDataAirline) GetAirlinePassengerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AirlinePassengerName
}

// GetAirlinePassengerNameOk returns a tuple with the AirlinePassengerName field value
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlinePassengerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AirlinePassengerName, true
}

// SetAirlinePassengerName sets field value
func (o *AdditionalDataAirline) SetAirlinePassengerName(v string) {
	o.AirlinePassengerName = v
}

// GetAirlineTicketIssueAddress returns the AirlineTicketIssueAddress field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineTicketIssueAddress() string {
	if o == nil || common.IsNil(o.AirlineTicketIssueAddress) {
		var ret string
		return ret
	}
	return *o.AirlineTicketIssueAddress
}

// GetAirlineTicketIssueAddressOk returns a tuple with the AirlineTicketIssueAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineTicketIssueAddressOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineTicketIssueAddress) {
		return nil, false
	}
	return o.AirlineTicketIssueAddress, true
}

// HasAirlineTicketIssueAddress returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineTicketIssueAddress() bool {
	if o != nil && !common.IsNil(o.AirlineTicketIssueAddress) {
		return true
	}

	return false
}

// SetAirlineTicketIssueAddress gets a reference to the given string and assigns it to the AirlineTicketIssueAddress field.
func (o *AdditionalDataAirline) SetAirlineTicketIssueAddress(v string) {
	o.AirlineTicketIssueAddress = &v
}

// GetAirlineTicketNumber returns the AirlineTicketNumber field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineTicketNumber() string {
	if o == nil || common.IsNil(o.AirlineTicketNumber) {
		var ret string
		return ret
	}
	return *o.AirlineTicketNumber
}

// GetAirlineTicketNumberOk returns a tuple with the AirlineTicketNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineTicketNumberOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineTicketNumber) {
		return nil, false
	}
	return o.AirlineTicketNumber, true
}

// HasAirlineTicketNumber returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineTicketNumber() bool {
	if o != nil && !common.IsNil(o.AirlineTicketNumber) {
		return true
	}

	return false
}

// SetAirlineTicketNumber gets a reference to the given string and assigns it to the AirlineTicketNumber field.
func (o *AdditionalDataAirline) SetAirlineTicketNumber(v string) {
	o.AirlineTicketNumber = &v
}

// GetAirlineTravelAgencyCode returns the AirlineTravelAgencyCode field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineTravelAgencyCode() string {
	if o == nil || common.IsNil(o.AirlineTravelAgencyCode) {
		var ret string
		return ret
	}
	return *o.AirlineTravelAgencyCode
}

// GetAirlineTravelAgencyCodeOk returns a tuple with the AirlineTravelAgencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineTravelAgencyCodeOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineTravelAgencyCode) {
		return nil, false
	}
	return o.AirlineTravelAgencyCode, true
}

// HasAirlineTravelAgencyCode returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineTravelAgencyCode() bool {
	if o != nil && !common.IsNil(o.AirlineTravelAgencyCode) {
		return true
	}

	return false
}

// SetAirlineTravelAgencyCode gets a reference to the given string and assigns it to the AirlineTravelAgencyCode field.
func (o *AdditionalDataAirline) SetAirlineTravelAgencyCode(v string) {
	o.AirlineTravelAgencyCode = &v
}

// GetAirlineTravelAgencyName returns the AirlineTravelAgencyName field value if set, zero value otherwise.
func (o *AdditionalDataAirline) GetAirlineTravelAgencyName() string {
	if o == nil || common.IsNil(o.AirlineTravelAgencyName) {
		var ret string
		return ret
	}
	return *o.AirlineTravelAgencyName
}

// GetAirlineTravelAgencyNameOk returns a tuple with the AirlineTravelAgencyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalDataAirline) GetAirlineTravelAgencyNameOk() (*string, bool) {
	if o == nil || common.IsNil(o.AirlineTravelAgencyName) {
		return nil, false
	}
	return o.AirlineTravelAgencyName, true
}

// HasAirlineTravelAgencyName returns a boolean if a field has been set.
func (o *AdditionalDataAirline) HasAirlineTravelAgencyName() bool {
	if o != nil && !common.IsNil(o.AirlineTravelAgencyName) {
		return true
	}

	return false
}

// SetAirlineTravelAgencyName gets a reference to the given string and assigns it to the AirlineTravelAgencyName field.
func (o *AdditionalDataAirline) SetAirlineTravelAgencyName(v string) {
	o.AirlineTravelAgencyName = &v
}

func (o AdditionalDataAirline) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdditionalDataAirline) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.AirlineAgencyInvoiceNumber) {
		toSerialize["airline.agency_invoice_number"] = o.AirlineAgencyInvoiceNumber
	}
	if !common.IsNil(o.AirlineAgencyPlanName) {
		toSerialize["airline.agency_plan_name"] = o.AirlineAgencyPlanName
	}
	if !common.IsNil(o.AirlineAirlineCode) {
		toSerialize["airline.airline_code"] = o.AirlineAirlineCode
	}
	if !common.IsNil(o.AirlineAirlineDesignatorCode) {
		toSerialize["airline.airline_designator_code"] = o.AirlineAirlineDesignatorCode
	}
	if !common.IsNil(o.AirlineBoardingFee) {
		toSerialize["airline.boarding_fee"] = o.AirlineBoardingFee
	}
	if !common.IsNil(o.AirlineComputerizedReservationSystem) {
		toSerialize["airline.computerized_reservation_system"] = o.AirlineComputerizedReservationSystem
	}
	if !common.IsNil(o.AirlineCustomerReferenceNumber) {
		toSerialize["airline.customer_reference_number"] = o.AirlineCustomerReferenceNumber
	}
	if !common.IsNil(o.AirlineDocumentType) {
		toSerialize["airline.document_type"] = o.AirlineDocumentType
	}
	if !common.IsNil(o.AirlineFlightDate) {
		toSerialize["airline.flight_date"] = o.AirlineFlightDate
	}
	if !common.IsNil(o.AirlineLegCarrierCode) {
		toSerialize["airline.leg.carrier_code"] = o.AirlineLegCarrierCode
	}
	if !common.IsNil(o.AirlineLegClassOfTravel) {
		toSerialize["airline.leg.class_of_travel"] = o.AirlineLegClassOfTravel
	}
	if !common.IsNil(o.AirlineLegDateOfTravel) {
		toSerialize["airline.leg.date_of_travel"] = o.AirlineLegDateOfTravel
	}
	if !common.IsNil(o.AirlineLegDepartAirport) {
		toSerialize["airline.leg.depart_airport"] = o.AirlineLegDepartAirport
	}
	if !common.IsNil(o.AirlineLegDepartTax) {
		toSerialize["airline.leg.depart_tax"] = o.AirlineLegDepartTax
	}
	if !common.IsNil(o.AirlineLegDestinationCode) {
		toSerialize["airline.leg.destination_code"] = o.AirlineLegDestinationCode
	}
	if !common.IsNil(o.AirlineLegFareBaseCode) {
		toSerialize["airline.leg.fare_base_code"] = o.AirlineLegFareBaseCode
	}
	if !common.IsNil(o.AirlineLegFlightNumber) {
		toSerialize["airline.leg.flight_number"] = o.AirlineLegFlightNumber
	}
	if !common.IsNil(o.AirlineLegStopOverCode) {
		toSerialize["airline.leg.stop_over_code"] = o.AirlineLegStopOverCode
	}
	if !common.IsNil(o.AirlinePassengerDateOfBirth) {
		toSerialize["airline.passenger.date_of_birth"] = o.AirlinePassengerDateOfBirth
	}
	if !common.IsNil(o.AirlinePassengerFirstName) {
		toSerialize["airline.passenger.first_name"] = o.AirlinePassengerFirstName
	}
	if !common.IsNil(o.AirlinePassengerLastName) {
		toSerialize["airline.passenger.last_name"] = o.AirlinePassengerLastName
	}
	if !common.IsNil(o.AirlinePassengerTelephoneNumber) {
		toSerialize["airline.passenger.telephone_number"] = o.AirlinePassengerTelephoneNumber
	}
	if !common.IsNil(o.AirlinePassengerTravellerType) {
		toSerialize["airline.passenger.traveller_type"] = o.AirlinePassengerTravellerType
	}
	toSerialize["airline.passenger_name"] = o.AirlinePassengerName
	if !common.IsNil(o.AirlineTicketIssueAddress) {
		toSerialize["airline.ticket_issue_address"] = o.AirlineTicketIssueAddress
	}
	if !common.IsNil(o.AirlineTicketNumber) {
		toSerialize["airline.ticket_number"] = o.AirlineTicketNumber
	}
	if !common.IsNil(o.AirlineTravelAgencyCode) {
		toSerialize["airline.travel_agency_code"] = o.AirlineTravelAgencyCode
	}
	if !common.IsNil(o.AirlineTravelAgencyName) {
		toSerialize["airline.travel_agency_name"] = o.AirlineTravelAgencyName
	}
	return toSerialize, nil
}

type NullableAdditionalDataAirline struct {
	value *AdditionalDataAirline
	isSet bool
}

func (v NullableAdditionalDataAirline) Get() *AdditionalDataAirline {
	return v.value
}

func (v *NullableAdditionalDataAirline) Set(val *AdditionalDataAirline) {
	v.value = val
	v.isSet = true
}

func (v NullableAdditionalDataAirline) IsSet() bool {
	return v.isSet
}

func (v *NullableAdditionalDataAirline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdditionalDataAirline(val *AdditionalDataAirline) *NullableAdditionalDataAirline {
	return &NullableAdditionalDataAirline{value: val, isSet: true}
}

func (v NullableAdditionalDataAirline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdditionalDataAirline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
