/*
Adyen Payment API

API version: 68
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package payments

import (
	"context"
	_nethttp "net/http"
	"net/url"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// GeneralApi GeneralApi service
type GeneralApi common.Service

type GeneralApiAuthoriseConfig struct {
	ctx            context.Context
	paymentRequest *PaymentRequest
}

func (r GeneralApiAuthoriseConfig) PaymentRequest(paymentRequest PaymentRequest) GeneralApiAuthoriseConfig {
	r.paymentRequest = &paymentRequest
	return r
}

/*
Authorise Create an authorisation

Creates a payment with a unique reference (`pspReference`) and attempts to obtain an authorisation hold. For cards, this amount can be captured or cancelled later. Non-card payment methods typically don't support this and will automatically capture as part of the authorisation.
> This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce). If using a [newer integration](https://docs.adyen.com/online-payments), use the [`/payments`](https://docs.adyen.com/api-explorer/#/CheckoutService/payments) endpoint under Checkout API instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GeneralApiAuthoriseConfig
*/
func (a *GeneralApi) AuthoriseConfig(ctx context.Context) GeneralApiAuthoriseConfig {
	return GeneralApiAuthoriseConfig{
		ctx: ctx,
	}
}

/*
Create an authorisation
Creates a payment with a unique reference (&#x60;pspReference&#x60;) and attempts to obtain an authorisation hold. For cards, this amount can be captured or cancelled later. Non-card payment methods typically don&#39;t support this and will automatically capture as part of the authorisation. &gt; This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce). If using a [newer integration](https://docs.adyen.com/online-payments), use the [&#x60;/payments&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/payments) endpoint under Checkout API instead.
 * @param req PaymentRequest - reference of PaymentRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentResult
*/

func (a *GeneralApi) Authorise(r GeneralApiAuthoriseConfig) (PaymentResult, *_nethttp.Response, error) {
	res := &PaymentResult{}
	path := "/authorise"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.paymentRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}

type GeneralApiAuthorise3dConfig struct {
	ctx              context.Context
	paymentRequest3d *PaymentRequest3d
}

func (r GeneralApiAuthorise3dConfig) PaymentRequest3d(paymentRequest3d PaymentRequest3d) GeneralApiAuthorise3dConfig {
	r.paymentRequest3d = &paymentRequest3d
	return r
}

/*
Authorise3d Complete a 3DS authorisation

For an authenticated 3D Secure session, completes the payment authorisation. This endpoint must receive the `md` and `paResponse` parameters that you get from the card issuer after a shopper pays via 3D Secure.

> This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce/3d-secure). If using a [newer integration](https://docs.adyen.com/online-payments), use the [`/payments/details`](https://docs.adyen.com/api-explorer/#/CheckoutService/payments/details) endpoint under Checkout API instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GeneralApiAuthorise3dConfig
*/
func (a *GeneralApi) Authorise3dConfig(ctx context.Context) GeneralApiAuthorise3dConfig {
	return GeneralApiAuthorise3dConfig{
		ctx: ctx,
	}
}

/*
Complete a 3DS authorisation
For an authenticated 3D Secure session, completes the payment authorisation. This endpoint must receive the &#x60;md&#x60; and &#x60;paResponse&#x60; parameters that you get from the card issuer after a shopper pays via 3D Secure.  &gt; This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce/3d-secure). If using a [newer integration](https://docs.adyen.com/online-payments), use the [&#x60;/payments/details&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/payments/details) endpoint under Checkout API instead.
 * @param req PaymentRequest3d - reference of PaymentRequest3d).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentResult
*/

func (a *GeneralApi) Authorise3d(r GeneralApiAuthorise3dConfig) (PaymentResult, *_nethttp.Response, error) {
	res := &PaymentResult{}
	path := "/authorise3d"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.paymentRequest3d,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}

type GeneralApiAuthorise3ds2Config struct {
	ctx                context.Context
	paymentRequest3ds2 *PaymentRequest3ds2
}

func (r GeneralApiAuthorise3ds2Config) PaymentRequest3ds2(paymentRequest3ds2 PaymentRequest3ds2) GeneralApiAuthorise3ds2Config {
	r.paymentRequest3ds2 = &paymentRequest3ds2
	return r
}

/*
Authorise3ds2 Complete a 3DS2 authorisation

For an authenticated 3D Secure 2 session, completes the payment authorisation. This endpoint must receive the `threeDS2Token` and `threeDS2Result` parameters.

> This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce/3d-secure). If using a [newer integration](https://docs.adyen.com/online-payments), use the [`/payments/details`](https://docs.adyen.com/api-explorer/#/CheckoutService/payments/details) endpoint under Checkout API instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GeneralApiAuthorise3ds2Config
*/
func (a *GeneralApi) Authorise3ds2Config(ctx context.Context) GeneralApiAuthorise3ds2Config {
	return GeneralApiAuthorise3ds2Config{
		ctx: ctx,
	}
}

/*
Complete a 3DS2 authorisation
For an authenticated 3D Secure 2 session, completes the payment authorisation. This endpoint must receive the &#x60;threeDS2Token&#x60; and &#x60;threeDS2Result&#x60; parameters.  &gt; This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce/3d-secure). If using a [newer integration](https://docs.adyen.com/online-payments), use the [&#x60;/payments/details&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/payments/details) endpoint under Checkout API instead.
 * @param req PaymentRequest3ds2 - reference of PaymentRequest3ds2).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentResult
*/

func (a *GeneralApi) Authorise3ds2(r GeneralApiAuthorise3ds2Config) (PaymentResult, *_nethttp.Response, error) {
	res := &PaymentResult{}
	path := "/authorise3ds2"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.paymentRequest3ds2,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}

type GeneralApiGetAuthenticationResultConfig struct {
	ctx                         context.Context
	authenticationResultRequest *AuthenticationResultRequest
}

func (r GeneralApiGetAuthenticationResultConfig) AuthenticationResultRequest(authenticationResultRequest AuthenticationResultRequest) GeneralApiGetAuthenticationResultConfig {
	r.authenticationResultRequest = &authenticationResultRequest
	return r
}

/*
GetAuthenticationResult Get the 3DS authentication result

Return the authentication result after doing a 3D Secure authentication only.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GeneralApiGetAuthenticationResultConfig
*/
func (a *GeneralApi) GetAuthenticationResultConfig(ctx context.Context) GeneralApiGetAuthenticationResultConfig {
	return GeneralApiGetAuthenticationResultConfig{
		ctx: ctx,
	}
}

/*
Get the 3DS authentication result
Return the authentication result after doing a 3D Secure authentication only.
 * @param req AuthenticationResultRequest - reference of AuthenticationResultRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return AuthenticationResultResponse
*/

func (a *GeneralApi) GetAuthenticationResult(r GeneralApiGetAuthenticationResultConfig) (AuthenticationResultResponse, *_nethttp.Response, error) {
	res := &AuthenticationResultResponse{}
	path := "/getAuthenticationResult"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.authenticationResultRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}

type GeneralApiRetrieve3ds2ResultConfig struct {
	ctx                   context.Context
	threeDS2ResultRequest *ThreeDS2ResultRequest
}

func (r GeneralApiRetrieve3ds2ResultConfig) ThreeDS2ResultRequest(threeDS2ResultRequest ThreeDS2ResultRequest) GeneralApiRetrieve3ds2ResultConfig {
	r.threeDS2ResultRequest = &threeDS2ResultRequest
	return r
}

/*
Retrieve3ds2Result Get the 3DS2 authentication result

Retrieves the `threeDS2Result` after doing a 3D Secure 2 authentication only.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GeneralApiRetrieve3ds2ResultConfig
*/
func (a *GeneralApi) Retrieve3ds2ResultConfig(ctx context.Context) GeneralApiRetrieve3ds2ResultConfig {
	return GeneralApiRetrieve3ds2ResultConfig{
		ctx: ctx,
	}
}

/*
Get the 3DS2 authentication result
Retrieves the &#x60;threeDS2Result&#x60; after doing a 3D Secure 2 authentication only.
 * @param req ThreeDS2ResultRequest - reference of ThreeDS2ResultRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ThreeDS2ResultResponse
*/

func (a *GeneralApi) Retrieve3ds2Result(r GeneralApiRetrieve3ds2ResultConfig) (ThreeDS2ResultResponse, *_nethttp.Response, error) {
	res := &ThreeDS2ResultResponse{}
	path := "/retrieve3ds2Result"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.threeDS2ResultRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}
