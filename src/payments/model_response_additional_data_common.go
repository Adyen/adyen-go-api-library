/*
Adyen Payment API

API version: 68
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package payments

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v8/src/common"
)

// checks if the ResponseAdditionalDataCommon type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &ResponseAdditionalDataCommon{}

// ResponseAdditionalDataCommon struct for ResponseAdditionalDataCommon
type ResponseAdditionalDataCommon struct {
	// The name of the Adyen acquirer account.  Example: PayPalSandbox_TestAcquirer  > Only relevant for PayPal transactions.
	AcquirerAccountCode *string `json:"acquirerAccountCode,omitempty"`
	// The name of the acquirer processing the payment request.  Example: TestPmmAcquirer
	AcquirerCode *string `json:"acquirerCode,omitempty"`
	// The reference number that can be used for reconciliation in case a non-Adyen acquirer is used for settlement.  Example: 7C9N3FNBKT9
	AcquirerReference *string `json:"acquirerReference,omitempty"`
	// The Adyen alias of the card.  Example: H167852639363479
	Alias *string `json:"alias,omitempty"`
	// The type of the card alias.  Example: Default
	AliasType *string `json:"aliasType,omitempty"`
	// Authorisation code: * When the payment is authorised successfully, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.  Example: 58747
	AuthCode *string `json:"authCode,omitempty"`
	// Merchant ID known by the acquirer.
	AuthorisationMid *string `json:"authorisationMid,omitempty"`
	// The currency of the authorised amount, as a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
	AuthorisedAmountCurrency *string `json:"authorisedAmountCurrency,omitempty"`
	// Value of the amount authorised.  This amount is represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).
	AuthorisedAmountValue *string `json:"authorisedAmountValue,omitempty"`
	// The AVS result code of the payment, which provides information about the outcome of the AVS check.  For possible values, see [AVS](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#billing-address-does-not-match-cardholder-address-avs).
	AvsResult *string `json:"avsResult,omitempty"`
	// Raw AVS result received from the acquirer, where available.  Example: D
	AvsResultRaw *string `json:"avsResultRaw,omitempty"`
	// BIC of a bank account.  Example: TESTNL01  > Only relevant for SEPA Direct Debit transactions.
	Bic *string `json:"bic,omitempty"`
	// Includes the co-branded card information.
	CoBrandedWith *string `json:"coBrandedWith,omitempty"`
	// The result of CVC verification.
	CvcResult *string `json:"cvcResult,omitempty"`
	// The raw result of CVC verification.
	CvcResultRaw *string `json:"cvcResultRaw,omitempty"`
	// Supported for 3D Secure 2. The unique transaction identifier assigned by the DS to identify a single transaction.
	DsTransID *string `json:"dsTransID,omitempty"`
	// The Electronic Commerce Indicator returned from the schemes for the 3DS payment session.  Example: 02
	Eci *string `json:"eci,omitempty"`
	// The expiry date on the card.  Example: 6/2016  > Returned only in case of a card payment.
	ExpiryDate *string `json:"expiryDate,omitempty"`
	// The currency of the extra amount charged due to additional amounts set in the skin used in the HPP payment request.  Example: EUR
	ExtraCostsCurrency *string `json:"extraCostsCurrency,omitempty"`
	// The value of the extra amount charged due to additional amounts set in the skin used in the HPP payment request. The amount is in minor units.
	ExtraCostsValue *string `json:"extraCostsValue,omitempty"`
	// The fraud score due to a particular fraud check. The fraud check name is found in the key of the key-value pair.
	FraudCheckItemNrFraudCheckname *string `json:"fraudCheck-[itemNr]-[FraudCheckname],omitempty"`
	// Indicates if the payment is sent to manual review.
	FraudManualReview *string `json:"fraudManualReview,omitempty"`
	// The fraud result properties of the payment.
	FraudResultType *string `json:"fraudResultType,omitempty"`
	// Information regarding the funding type of the card. The possible return values are: * CHARGE * CREDIT * DEBIT * PREPAID * PREPAID_RELOADABLE  * PREPAID_NONRELOADABLE * DEFFERED_DEBIT  > This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.  For receiving this field in the notification, enable **Include Funding Source** in **Notifications** > **Additional settings**.
	FundingSource *string `json:"fundingSource,omitempty"`
	// Indicates availability of funds.  Visa: * \"I\" (fast funds are supported) * \"N\" (otherwise)  Mastercard: * \"I\" (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \"N\" (otherwise)  > Returned when you verify a card BIN or estimate costs, and only if payoutEligible is \"Y\" or \"D\".
	FundsAvailability *string `json:"fundsAvailability,omitempty"`
	// Provides the more granular indication of why a transaction was refused. When a transaction fails with either \"Refused\", \"Restricted Card\", \"Transaction Not Permitted\", \"Not supported\" or \"DeclinedNon Generic\" refusalReason from the issuer, Adyen cross references its PSP-wide data for extra insight into the refusal reason. If an inferred refusal reason is available, the `inferredRefusalReason`, field is populated and the `refusalReason`, is set to \"Not Supported\".  Possible values:  * 3D Secure Mandated * Closed Account * ContAuth Not Supported * CVC Mandated * Ecommerce Not Allowed * Crossborder Not Supported * Card Updated  * Low Authrate Bin * Non-reloadable prepaid card
	InferredRefusalReason *string `json:"inferredRefusalReason,omitempty"`
	// Indicates if the card is used for business purposes only.
	IsCardCommercial *string `json:"isCardCommercial,omitempty"`
	// The issuing country of the card based on the BIN list that Adyen maintains.  Example: JP
	IssuerCountry *string `json:"issuerCountry,omitempty"`
	// A Boolean value indicating whether a liability shift was offered for this payment.
	LiabilityShift *string `json:"liabilityShift,omitempty"`
	// The `mcBankNetReferenceNumber`, is a minimum of six characters and a maximum of nine characters long.  > Contact Support Team to enable this field.
	McBankNetReferenceNumber *string `json:"mcBankNetReferenceNumber,omitempty"`
	// The Merchant Advice Code (MAC) can be returned by Mastercard issuers for refused payments. If present, the MAC contains information about why the payment failed, and whether it can be retried.  For more information see [Mastercard Merchant Advice Codes](https://docs.adyen.com/development-resources/raw-acquirer-responses#mastercard-merchant-advice-codes).
	MerchantAdviceCode *string `json:"merchantAdviceCode,omitempty"`
	// The reference provided for the transaction.
	MerchantReference *string `json:"merchantReference,omitempty"`
	// Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.
	NetworkTxReference *string `json:"networkTxReference,omitempty"`
	// The owner name of a bank account.  Only relevant for SEPA Direct Debit transactions.
	OwnerName *string `json:"ownerName,omitempty"`
	// The Payment Account Reference (PAR) value links a network token with the underlying primary account number (PAN). The PAR value consists of 29 uppercase alphanumeric characters.
	PaymentAccountReference *string `json:"paymentAccountReference,omitempty"`
	// The payment method used in the transaction.
	PaymentMethod *string `json:"paymentMethod,omitempty"`
	// The Adyen sub-variant of the payment method used for the payment request.  For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).  Example: mcpro
	PaymentMethodVariant *string `json:"paymentMethodVariant,omitempty"`
	// Indicates whether a payout is eligible or not for this card.  Visa: * \"Y\" * \"N\"  Mastercard: * \"Y\" (domestic and cross-border)  * \"D\" (only domestic) * \"N\" (no MoneySend) * \"U\" (unknown)
	PayoutEligible *string `json:"payoutEligible,omitempty"`
	// The response code from the Real Time Account Updater service.  Possible return values are: * CardChanged * CardExpiryChanged * CloseAccount  * ContactCardAccountHolder
	RealtimeAccountUpdaterStatus *string `json:"realtimeAccountUpdaterStatus,omitempty"`
	// Message to be displayed on the terminal.
	ReceiptFreeText *string `json:"receiptFreeText,omitempty"`
	// The recurring contract types applicable to the transaction.
	RecurringContractTypes *string `json:"recurring.contractTypes,omitempty"`
	// The `pspReference`, of the first recurring payment that created the recurring detail.  This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.
	RecurringFirstPspReference *string `json:"recurring.firstPspReference,omitempty"`
	// The reference that uniquely identifies the recurring transaction.
	RecurringRecurringDetailReference *string `json:"recurring.recurringDetailReference,omitempty"`
	// The provided reference of the shopper for a recurring transaction.
	RecurringShopperReference *string `json:"recurring.shopperReference,omitempty"`
	// The processing model used for the recurring transaction.
	RecurringProcessingModel *string `json:"recurringProcessingModel,omitempty"`
	// If the payment is referred, this field is set to true.  This field is unavailable if the payment is referred and is usually not returned with ecommerce transactions.  Example: true
	Referred *string `json:"referred,omitempty"`
	// Raw refusal reason received from the acquirer, where available.  Example: AUTHORISED
	RefusalReasonRaw *string `json:"refusalReasonRaw,omitempty"`
	// The amount of the payment request.
	RequestAmount *string `json:"requestAmount,omitempty"`
	// The currency of the payment request.
	RequestCurrencyCode *string `json:"requestCurrencyCode,omitempty"`
	// The shopper interaction type of the payment request.  Example: Ecommerce
	ShopperInteraction *string `json:"shopperInteraction,omitempty"`
	// The shopperReference passed in the payment request.  Example: AdyenTestShopperXX
	ShopperReference *string `json:"shopperReference,omitempty"`
	// The terminal ID used in a point-of-sale payment.  Example: 06022622
	TerminalId *string `json:"terminalId,omitempty"`
	// A Boolean value indicating whether 3DS authentication was completed on this payment.  Example: true
	ThreeDAuthenticated *string `json:"threeDAuthenticated,omitempty"`
	// The raw 3DS authentication result from the card issuer.  Example: N
	ThreeDAuthenticatedResponse *string `json:"threeDAuthenticatedResponse,omitempty"`
	// A Boolean value indicating whether 3DS was offered for this payment.  Example: true
	ThreeDOffered *string `json:"threeDOffered,omitempty"`
	// The raw enrollment result from the 3DS directory services of the card schemes.  Example: Y
	ThreeDOfferedResponse *string `json:"threeDOfferedResponse,omitempty"`
	// The 3D Secure 2 version.
	ThreeDSVersion *string `json:"threeDSVersion,omitempty"`
	// The `visaTransactionId`, has a fixed length of 15 numeric characters.  > Contact Support Team to enable this field.
	VisaTransactionId *string `json:"visaTransactionId,omitempty"`
	// The 3DS transaction ID of the 3DS session sent in notifications. The value is Base64-encoded and is returned for transactions with directoryResponse 'N' or 'Y'. If you want to submit the xid in your 3D Secure 1 request, use the `mpiData.xid`, field.  Example: ODgxNDc2MDg2MDExODk5MAAAAAA=
	Xid *string `json:"xid,omitempty"`
}

// NewResponseAdditionalDataCommon instantiates a new ResponseAdditionalDataCommon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseAdditionalDataCommon() *ResponseAdditionalDataCommon {
	this := ResponseAdditionalDataCommon{}
	return &this
}

// NewResponseAdditionalDataCommonWithDefaults instantiates a new ResponseAdditionalDataCommon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseAdditionalDataCommonWithDefaults() *ResponseAdditionalDataCommon {
	this := ResponseAdditionalDataCommon{}
	return &this
}

// GetAcquirerAccountCode returns the AcquirerAccountCode field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetAcquirerAccountCode() string {
	if o == nil || common.IsNil(o.AcquirerAccountCode) {
		var ret string
		return ret
	}
	return *o.AcquirerAccountCode
}

// GetAcquirerAccountCodeOk returns a tuple with the AcquirerAccountCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetAcquirerAccountCodeOk() (*string, bool) {
	if o == nil || common.IsNil(o.AcquirerAccountCode) {
		return nil, false
	}
	return o.AcquirerAccountCode, true
}

// HasAcquirerAccountCode returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasAcquirerAccountCode() bool {
	if o != nil && !common.IsNil(o.AcquirerAccountCode) {
		return true
	}

	return false
}

// SetAcquirerAccountCode gets a reference to the given string and assigns it to the AcquirerAccountCode field.
func (o *ResponseAdditionalDataCommon) SetAcquirerAccountCode(v string) {
	o.AcquirerAccountCode = &v
}

// GetAcquirerCode returns the AcquirerCode field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetAcquirerCode() string {
	if o == nil || common.IsNil(o.AcquirerCode) {
		var ret string
		return ret
	}
	return *o.AcquirerCode
}

// GetAcquirerCodeOk returns a tuple with the AcquirerCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetAcquirerCodeOk() (*string, bool) {
	if o == nil || common.IsNil(o.AcquirerCode) {
		return nil, false
	}
	return o.AcquirerCode, true
}

// HasAcquirerCode returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasAcquirerCode() bool {
	if o != nil && !common.IsNil(o.AcquirerCode) {
		return true
	}

	return false
}

// SetAcquirerCode gets a reference to the given string and assigns it to the AcquirerCode field.
func (o *ResponseAdditionalDataCommon) SetAcquirerCode(v string) {
	o.AcquirerCode = &v
}

// GetAcquirerReference returns the AcquirerReference field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetAcquirerReference() string {
	if o == nil || common.IsNil(o.AcquirerReference) {
		var ret string
		return ret
	}
	return *o.AcquirerReference
}

// GetAcquirerReferenceOk returns a tuple with the AcquirerReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetAcquirerReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.AcquirerReference) {
		return nil, false
	}
	return o.AcquirerReference, true
}

// HasAcquirerReference returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasAcquirerReference() bool {
	if o != nil && !common.IsNil(o.AcquirerReference) {
		return true
	}

	return false
}

// SetAcquirerReference gets a reference to the given string and assigns it to the AcquirerReference field.
func (o *ResponseAdditionalDataCommon) SetAcquirerReference(v string) {
	o.AcquirerReference = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetAlias() string {
	if o == nil || common.IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetAliasOk() (*string, bool) {
	if o == nil || common.IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasAlias() bool {
	if o != nil && !common.IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *ResponseAdditionalDataCommon) SetAlias(v string) {
	o.Alias = &v
}

// GetAliasType returns the AliasType field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetAliasType() string {
	if o == nil || common.IsNil(o.AliasType) {
		var ret string
		return ret
	}
	return *o.AliasType
}

// GetAliasTypeOk returns a tuple with the AliasType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetAliasTypeOk() (*string, bool) {
	if o == nil || common.IsNil(o.AliasType) {
		return nil, false
	}
	return o.AliasType, true
}

// HasAliasType returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasAliasType() bool {
	if o != nil && !common.IsNil(o.AliasType) {
		return true
	}

	return false
}

// SetAliasType gets a reference to the given string and assigns it to the AliasType field.
func (o *ResponseAdditionalDataCommon) SetAliasType(v string) {
	o.AliasType = &v
}

// GetAuthCode returns the AuthCode field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetAuthCode() string {
	if o == nil || common.IsNil(o.AuthCode) {
		var ret string
		return ret
	}
	return *o.AuthCode
}

// GetAuthCodeOk returns a tuple with the AuthCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetAuthCodeOk() (*string, bool) {
	if o == nil || common.IsNil(o.AuthCode) {
		return nil, false
	}
	return o.AuthCode, true
}

// HasAuthCode returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasAuthCode() bool {
	if o != nil && !common.IsNil(o.AuthCode) {
		return true
	}

	return false
}

// SetAuthCode gets a reference to the given string and assigns it to the AuthCode field.
func (o *ResponseAdditionalDataCommon) SetAuthCode(v string) {
	o.AuthCode = &v
}

// GetAuthorisationMid returns the AuthorisationMid field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetAuthorisationMid() string {
	if o == nil || common.IsNil(o.AuthorisationMid) {
		var ret string
		return ret
	}
	return *o.AuthorisationMid
}

// GetAuthorisationMidOk returns a tuple with the AuthorisationMid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetAuthorisationMidOk() (*string, bool) {
	if o == nil || common.IsNil(o.AuthorisationMid) {
		return nil, false
	}
	return o.AuthorisationMid, true
}

// HasAuthorisationMid returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasAuthorisationMid() bool {
	if o != nil && !common.IsNil(o.AuthorisationMid) {
		return true
	}

	return false
}

// SetAuthorisationMid gets a reference to the given string and assigns it to the AuthorisationMid field.
func (o *ResponseAdditionalDataCommon) SetAuthorisationMid(v string) {
	o.AuthorisationMid = &v
}

// GetAuthorisedAmountCurrency returns the AuthorisedAmountCurrency field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetAuthorisedAmountCurrency() string {
	if o == nil || common.IsNil(o.AuthorisedAmountCurrency) {
		var ret string
		return ret
	}
	return *o.AuthorisedAmountCurrency
}

// GetAuthorisedAmountCurrencyOk returns a tuple with the AuthorisedAmountCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetAuthorisedAmountCurrencyOk() (*string, bool) {
	if o == nil || common.IsNil(o.AuthorisedAmountCurrency) {
		return nil, false
	}
	return o.AuthorisedAmountCurrency, true
}

// HasAuthorisedAmountCurrency returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasAuthorisedAmountCurrency() bool {
	if o != nil && !common.IsNil(o.AuthorisedAmountCurrency) {
		return true
	}

	return false
}

// SetAuthorisedAmountCurrency gets a reference to the given string and assigns it to the AuthorisedAmountCurrency field.
func (o *ResponseAdditionalDataCommon) SetAuthorisedAmountCurrency(v string) {
	o.AuthorisedAmountCurrency = &v
}

// GetAuthorisedAmountValue returns the AuthorisedAmountValue field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetAuthorisedAmountValue() string {
	if o == nil || common.IsNil(o.AuthorisedAmountValue) {
		var ret string
		return ret
	}
	return *o.AuthorisedAmountValue
}

// GetAuthorisedAmountValueOk returns a tuple with the AuthorisedAmountValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetAuthorisedAmountValueOk() (*string, bool) {
	if o == nil || common.IsNil(o.AuthorisedAmountValue) {
		return nil, false
	}
	return o.AuthorisedAmountValue, true
}

// HasAuthorisedAmountValue returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasAuthorisedAmountValue() bool {
	if o != nil && !common.IsNil(o.AuthorisedAmountValue) {
		return true
	}

	return false
}

// SetAuthorisedAmountValue gets a reference to the given string and assigns it to the AuthorisedAmountValue field.
func (o *ResponseAdditionalDataCommon) SetAuthorisedAmountValue(v string) {
	o.AuthorisedAmountValue = &v
}

// GetAvsResult returns the AvsResult field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetAvsResult() string {
	if o == nil || common.IsNil(o.AvsResult) {
		var ret string
		return ret
	}
	return *o.AvsResult
}

// GetAvsResultOk returns a tuple with the AvsResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetAvsResultOk() (*string, bool) {
	if o == nil || common.IsNil(o.AvsResult) {
		return nil, false
	}
	return o.AvsResult, true
}

// HasAvsResult returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasAvsResult() bool {
	if o != nil && !common.IsNil(o.AvsResult) {
		return true
	}

	return false
}

// SetAvsResult gets a reference to the given string and assigns it to the AvsResult field.
func (o *ResponseAdditionalDataCommon) SetAvsResult(v string) {
	o.AvsResult = &v
}

// GetAvsResultRaw returns the AvsResultRaw field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetAvsResultRaw() string {
	if o == nil || common.IsNil(o.AvsResultRaw) {
		var ret string
		return ret
	}
	return *o.AvsResultRaw
}

// GetAvsResultRawOk returns a tuple with the AvsResultRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetAvsResultRawOk() (*string, bool) {
	if o == nil || common.IsNil(o.AvsResultRaw) {
		return nil, false
	}
	return o.AvsResultRaw, true
}

// HasAvsResultRaw returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasAvsResultRaw() bool {
	if o != nil && !common.IsNil(o.AvsResultRaw) {
		return true
	}

	return false
}

// SetAvsResultRaw gets a reference to the given string and assigns it to the AvsResultRaw field.
func (o *ResponseAdditionalDataCommon) SetAvsResultRaw(v string) {
	o.AvsResultRaw = &v
}

// GetBic returns the Bic field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetBic() string {
	if o == nil || common.IsNil(o.Bic) {
		var ret string
		return ret
	}
	return *o.Bic
}

// GetBicOk returns a tuple with the Bic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetBicOk() (*string, bool) {
	if o == nil || common.IsNil(o.Bic) {
		return nil, false
	}
	return o.Bic, true
}

// HasBic returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasBic() bool {
	if o != nil && !common.IsNil(o.Bic) {
		return true
	}

	return false
}

// SetBic gets a reference to the given string and assigns it to the Bic field.
func (o *ResponseAdditionalDataCommon) SetBic(v string) {
	o.Bic = &v
}

// GetCoBrandedWith returns the CoBrandedWith field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetCoBrandedWith() string {
	if o == nil || common.IsNil(o.CoBrandedWith) {
		var ret string
		return ret
	}
	return *o.CoBrandedWith
}

// GetCoBrandedWithOk returns a tuple with the CoBrandedWith field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetCoBrandedWithOk() (*string, bool) {
	if o == nil || common.IsNil(o.CoBrandedWith) {
		return nil, false
	}
	return o.CoBrandedWith, true
}

// HasCoBrandedWith returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasCoBrandedWith() bool {
	if o != nil && !common.IsNil(o.CoBrandedWith) {
		return true
	}

	return false
}

// SetCoBrandedWith gets a reference to the given string and assigns it to the CoBrandedWith field.
func (o *ResponseAdditionalDataCommon) SetCoBrandedWith(v string) {
	o.CoBrandedWith = &v
}

// GetCvcResult returns the CvcResult field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetCvcResult() string {
	if o == nil || common.IsNil(o.CvcResult) {
		var ret string
		return ret
	}
	return *o.CvcResult
}

// GetCvcResultOk returns a tuple with the CvcResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetCvcResultOk() (*string, bool) {
	if o == nil || common.IsNil(o.CvcResult) {
		return nil, false
	}
	return o.CvcResult, true
}

// HasCvcResult returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasCvcResult() bool {
	if o != nil && !common.IsNil(o.CvcResult) {
		return true
	}

	return false
}

// SetCvcResult gets a reference to the given string and assigns it to the CvcResult field.
func (o *ResponseAdditionalDataCommon) SetCvcResult(v string) {
	o.CvcResult = &v
}

// GetCvcResultRaw returns the CvcResultRaw field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetCvcResultRaw() string {
	if o == nil || common.IsNil(o.CvcResultRaw) {
		var ret string
		return ret
	}
	return *o.CvcResultRaw
}

// GetCvcResultRawOk returns a tuple with the CvcResultRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetCvcResultRawOk() (*string, bool) {
	if o == nil || common.IsNil(o.CvcResultRaw) {
		return nil, false
	}
	return o.CvcResultRaw, true
}

// HasCvcResultRaw returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasCvcResultRaw() bool {
	if o != nil && !common.IsNil(o.CvcResultRaw) {
		return true
	}

	return false
}

// SetCvcResultRaw gets a reference to the given string and assigns it to the CvcResultRaw field.
func (o *ResponseAdditionalDataCommon) SetCvcResultRaw(v string) {
	o.CvcResultRaw = &v
}

// GetDsTransID returns the DsTransID field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetDsTransID() string {
	if o == nil || common.IsNil(o.DsTransID) {
		var ret string
		return ret
	}
	return *o.DsTransID
}

// GetDsTransIDOk returns a tuple with the DsTransID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetDsTransIDOk() (*string, bool) {
	if o == nil || common.IsNil(o.DsTransID) {
		return nil, false
	}
	return o.DsTransID, true
}

// HasDsTransID returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasDsTransID() bool {
	if o != nil && !common.IsNil(o.DsTransID) {
		return true
	}

	return false
}

// SetDsTransID gets a reference to the given string and assigns it to the DsTransID field.
func (o *ResponseAdditionalDataCommon) SetDsTransID(v string) {
	o.DsTransID = &v
}

// GetEci returns the Eci field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetEci() string {
	if o == nil || common.IsNil(o.Eci) {
		var ret string
		return ret
	}
	return *o.Eci
}

// GetEciOk returns a tuple with the Eci field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetEciOk() (*string, bool) {
	if o == nil || common.IsNil(o.Eci) {
		return nil, false
	}
	return o.Eci, true
}

// HasEci returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasEci() bool {
	if o != nil && !common.IsNil(o.Eci) {
		return true
	}

	return false
}

// SetEci gets a reference to the given string and assigns it to the Eci field.
func (o *ResponseAdditionalDataCommon) SetEci(v string) {
	o.Eci = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetExpiryDate() string {
	if o == nil || common.IsNil(o.ExpiryDate) {
		var ret string
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetExpiryDateOk() (*string, bool) {
	if o == nil || common.IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasExpiryDate() bool {
	if o != nil && !common.IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given string and assigns it to the ExpiryDate field.
func (o *ResponseAdditionalDataCommon) SetExpiryDate(v string) {
	o.ExpiryDate = &v
}

// GetExtraCostsCurrency returns the ExtraCostsCurrency field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetExtraCostsCurrency() string {
	if o == nil || common.IsNil(o.ExtraCostsCurrency) {
		var ret string
		return ret
	}
	return *o.ExtraCostsCurrency
}

// GetExtraCostsCurrencyOk returns a tuple with the ExtraCostsCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetExtraCostsCurrencyOk() (*string, bool) {
	if o == nil || common.IsNil(o.ExtraCostsCurrency) {
		return nil, false
	}
	return o.ExtraCostsCurrency, true
}

// HasExtraCostsCurrency returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasExtraCostsCurrency() bool {
	if o != nil && !common.IsNil(o.ExtraCostsCurrency) {
		return true
	}

	return false
}

// SetExtraCostsCurrency gets a reference to the given string and assigns it to the ExtraCostsCurrency field.
func (o *ResponseAdditionalDataCommon) SetExtraCostsCurrency(v string) {
	o.ExtraCostsCurrency = &v
}

// GetExtraCostsValue returns the ExtraCostsValue field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetExtraCostsValue() string {
	if o == nil || common.IsNil(o.ExtraCostsValue) {
		var ret string
		return ret
	}
	return *o.ExtraCostsValue
}

// GetExtraCostsValueOk returns a tuple with the ExtraCostsValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetExtraCostsValueOk() (*string, bool) {
	if o == nil || common.IsNil(o.ExtraCostsValue) {
		return nil, false
	}
	return o.ExtraCostsValue, true
}

// HasExtraCostsValue returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasExtraCostsValue() bool {
	if o != nil && !common.IsNil(o.ExtraCostsValue) {
		return true
	}

	return false
}

// SetExtraCostsValue gets a reference to the given string and assigns it to the ExtraCostsValue field.
func (o *ResponseAdditionalDataCommon) SetExtraCostsValue(v string) {
	o.ExtraCostsValue = &v
}

// GetFraudCheckItemNrFraudCheckname returns the FraudCheckItemNrFraudCheckname field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetFraudCheckItemNrFraudCheckname() string {
	if o == nil || common.IsNil(o.FraudCheckItemNrFraudCheckname) {
		var ret string
		return ret
	}
	return *o.FraudCheckItemNrFraudCheckname
}

// GetFraudCheckItemNrFraudChecknameOk returns a tuple with the FraudCheckItemNrFraudCheckname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetFraudCheckItemNrFraudChecknameOk() (*string, bool) {
	if o == nil || common.IsNil(o.FraudCheckItemNrFraudCheckname) {
		return nil, false
	}
	return o.FraudCheckItemNrFraudCheckname, true
}

// HasFraudCheckItemNrFraudCheckname returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasFraudCheckItemNrFraudCheckname() bool {
	if o != nil && !common.IsNil(o.FraudCheckItemNrFraudCheckname) {
		return true
	}

	return false
}

// SetFraudCheckItemNrFraudCheckname gets a reference to the given string and assigns it to the FraudCheckItemNrFraudCheckname field.
func (o *ResponseAdditionalDataCommon) SetFraudCheckItemNrFraudCheckname(v string) {
	o.FraudCheckItemNrFraudCheckname = &v
}

// GetFraudManualReview returns the FraudManualReview field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetFraudManualReview() string {
	if o == nil || common.IsNil(o.FraudManualReview) {
		var ret string
		return ret
	}
	return *o.FraudManualReview
}

// GetFraudManualReviewOk returns a tuple with the FraudManualReview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetFraudManualReviewOk() (*string, bool) {
	if o == nil || common.IsNil(o.FraudManualReview) {
		return nil, false
	}
	return o.FraudManualReview, true
}

// HasFraudManualReview returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasFraudManualReview() bool {
	if o != nil && !common.IsNil(o.FraudManualReview) {
		return true
	}

	return false
}

// SetFraudManualReview gets a reference to the given string and assigns it to the FraudManualReview field.
func (o *ResponseAdditionalDataCommon) SetFraudManualReview(v string) {
	o.FraudManualReview = &v
}

// GetFraudResultType returns the FraudResultType field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetFraudResultType() string {
	if o == nil || common.IsNil(o.FraudResultType) {
		var ret string
		return ret
	}
	return *o.FraudResultType
}

// GetFraudResultTypeOk returns a tuple with the FraudResultType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetFraudResultTypeOk() (*string, bool) {
	if o == nil || common.IsNil(o.FraudResultType) {
		return nil, false
	}
	return o.FraudResultType, true
}

// HasFraudResultType returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasFraudResultType() bool {
	if o != nil && !common.IsNil(o.FraudResultType) {
		return true
	}

	return false
}

// SetFraudResultType gets a reference to the given string and assigns it to the FraudResultType field.
func (o *ResponseAdditionalDataCommon) SetFraudResultType(v string) {
	o.FraudResultType = &v
}

// GetFundingSource returns the FundingSource field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetFundingSource() string {
	if o == nil || common.IsNil(o.FundingSource) {
		var ret string
		return ret
	}
	return *o.FundingSource
}

// GetFundingSourceOk returns a tuple with the FundingSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetFundingSourceOk() (*string, bool) {
	if o == nil || common.IsNil(o.FundingSource) {
		return nil, false
	}
	return o.FundingSource, true
}

// HasFundingSource returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasFundingSource() bool {
	if o != nil && !common.IsNil(o.FundingSource) {
		return true
	}

	return false
}

// SetFundingSource gets a reference to the given string and assigns it to the FundingSource field.
func (o *ResponseAdditionalDataCommon) SetFundingSource(v string) {
	o.FundingSource = &v
}

// GetFundsAvailability returns the FundsAvailability field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetFundsAvailability() string {
	if o == nil || common.IsNil(o.FundsAvailability) {
		var ret string
		return ret
	}
	return *o.FundsAvailability
}

// GetFundsAvailabilityOk returns a tuple with the FundsAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetFundsAvailabilityOk() (*string, bool) {
	if o == nil || common.IsNil(o.FundsAvailability) {
		return nil, false
	}
	return o.FundsAvailability, true
}

// HasFundsAvailability returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasFundsAvailability() bool {
	if o != nil && !common.IsNil(o.FundsAvailability) {
		return true
	}

	return false
}

// SetFundsAvailability gets a reference to the given string and assigns it to the FundsAvailability field.
func (o *ResponseAdditionalDataCommon) SetFundsAvailability(v string) {
	o.FundsAvailability = &v
}

// GetInferredRefusalReason returns the InferredRefusalReason field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetInferredRefusalReason() string {
	if o == nil || common.IsNil(o.InferredRefusalReason) {
		var ret string
		return ret
	}
	return *o.InferredRefusalReason
}

// GetInferredRefusalReasonOk returns a tuple with the InferredRefusalReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetInferredRefusalReasonOk() (*string, bool) {
	if o == nil || common.IsNil(o.InferredRefusalReason) {
		return nil, false
	}
	return o.InferredRefusalReason, true
}

// HasInferredRefusalReason returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasInferredRefusalReason() bool {
	if o != nil && !common.IsNil(o.InferredRefusalReason) {
		return true
	}

	return false
}

// SetInferredRefusalReason gets a reference to the given string and assigns it to the InferredRefusalReason field.
func (o *ResponseAdditionalDataCommon) SetInferredRefusalReason(v string) {
	o.InferredRefusalReason = &v
}

// GetIsCardCommercial returns the IsCardCommercial field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetIsCardCommercial() string {
	if o == nil || common.IsNil(o.IsCardCommercial) {
		var ret string
		return ret
	}
	return *o.IsCardCommercial
}

// GetIsCardCommercialOk returns a tuple with the IsCardCommercial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetIsCardCommercialOk() (*string, bool) {
	if o == nil || common.IsNil(o.IsCardCommercial) {
		return nil, false
	}
	return o.IsCardCommercial, true
}

// HasIsCardCommercial returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasIsCardCommercial() bool {
	if o != nil && !common.IsNil(o.IsCardCommercial) {
		return true
	}

	return false
}

// SetIsCardCommercial gets a reference to the given string and assigns it to the IsCardCommercial field.
func (o *ResponseAdditionalDataCommon) SetIsCardCommercial(v string) {
	o.IsCardCommercial = &v
}

// GetIssuerCountry returns the IssuerCountry field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetIssuerCountry() string {
	if o == nil || common.IsNil(o.IssuerCountry) {
		var ret string
		return ret
	}
	return *o.IssuerCountry
}

// GetIssuerCountryOk returns a tuple with the IssuerCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetIssuerCountryOk() (*string, bool) {
	if o == nil || common.IsNil(o.IssuerCountry) {
		return nil, false
	}
	return o.IssuerCountry, true
}

// HasIssuerCountry returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasIssuerCountry() bool {
	if o != nil && !common.IsNil(o.IssuerCountry) {
		return true
	}

	return false
}

// SetIssuerCountry gets a reference to the given string and assigns it to the IssuerCountry field.
func (o *ResponseAdditionalDataCommon) SetIssuerCountry(v string) {
	o.IssuerCountry = &v
}

// GetLiabilityShift returns the LiabilityShift field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetLiabilityShift() string {
	if o == nil || common.IsNil(o.LiabilityShift) {
		var ret string
		return ret
	}
	return *o.LiabilityShift
}

// GetLiabilityShiftOk returns a tuple with the LiabilityShift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetLiabilityShiftOk() (*string, bool) {
	if o == nil || common.IsNil(o.LiabilityShift) {
		return nil, false
	}
	return o.LiabilityShift, true
}

// HasLiabilityShift returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasLiabilityShift() bool {
	if o != nil && !common.IsNil(o.LiabilityShift) {
		return true
	}

	return false
}

// SetLiabilityShift gets a reference to the given string and assigns it to the LiabilityShift field.
func (o *ResponseAdditionalDataCommon) SetLiabilityShift(v string) {
	o.LiabilityShift = &v
}

// GetMcBankNetReferenceNumber returns the McBankNetReferenceNumber field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetMcBankNetReferenceNumber() string {
	if o == nil || common.IsNil(o.McBankNetReferenceNumber) {
		var ret string
		return ret
	}
	return *o.McBankNetReferenceNumber
}

// GetMcBankNetReferenceNumberOk returns a tuple with the McBankNetReferenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetMcBankNetReferenceNumberOk() (*string, bool) {
	if o == nil || common.IsNil(o.McBankNetReferenceNumber) {
		return nil, false
	}
	return o.McBankNetReferenceNumber, true
}

// HasMcBankNetReferenceNumber returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasMcBankNetReferenceNumber() bool {
	if o != nil && !common.IsNil(o.McBankNetReferenceNumber) {
		return true
	}

	return false
}

// SetMcBankNetReferenceNumber gets a reference to the given string and assigns it to the McBankNetReferenceNumber field.
func (o *ResponseAdditionalDataCommon) SetMcBankNetReferenceNumber(v string) {
	o.McBankNetReferenceNumber = &v
}

// GetMerchantAdviceCode returns the MerchantAdviceCode field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetMerchantAdviceCode() string {
	if o == nil || common.IsNil(o.MerchantAdviceCode) {
		var ret string
		return ret
	}
	return *o.MerchantAdviceCode
}

// GetMerchantAdviceCodeOk returns a tuple with the MerchantAdviceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetMerchantAdviceCodeOk() (*string, bool) {
	if o == nil || common.IsNil(o.MerchantAdviceCode) {
		return nil, false
	}
	return o.MerchantAdviceCode, true
}

// HasMerchantAdviceCode returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasMerchantAdviceCode() bool {
	if o != nil && !common.IsNil(o.MerchantAdviceCode) {
		return true
	}

	return false
}

// SetMerchantAdviceCode gets a reference to the given string and assigns it to the MerchantAdviceCode field.
func (o *ResponseAdditionalDataCommon) SetMerchantAdviceCode(v string) {
	o.MerchantAdviceCode = &v
}

// GetMerchantReference returns the MerchantReference field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetMerchantReference() string {
	if o == nil || common.IsNil(o.MerchantReference) {
		var ret string
		return ret
	}
	return *o.MerchantReference
}

// GetMerchantReferenceOk returns a tuple with the MerchantReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetMerchantReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.MerchantReference) {
		return nil, false
	}
	return o.MerchantReference, true
}

// HasMerchantReference returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasMerchantReference() bool {
	if o != nil && !common.IsNil(o.MerchantReference) {
		return true
	}

	return false
}

// SetMerchantReference gets a reference to the given string and assigns it to the MerchantReference field.
func (o *ResponseAdditionalDataCommon) SetMerchantReference(v string) {
	o.MerchantReference = &v
}

// GetNetworkTxReference returns the NetworkTxReference field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetNetworkTxReference() string {
	if o == nil || common.IsNil(o.NetworkTxReference) {
		var ret string
		return ret
	}
	return *o.NetworkTxReference
}

// GetNetworkTxReferenceOk returns a tuple with the NetworkTxReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetNetworkTxReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.NetworkTxReference) {
		return nil, false
	}
	return o.NetworkTxReference, true
}

// HasNetworkTxReference returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasNetworkTxReference() bool {
	if o != nil && !common.IsNil(o.NetworkTxReference) {
		return true
	}

	return false
}

// SetNetworkTxReference gets a reference to the given string and assigns it to the NetworkTxReference field.
func (o *ResponseAdditionalDataCommon) SetNetworkTxReference(v string) {
	o.NetworkTxReference = &v
}

// GetOwnerName returns the OwnerName field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetOwnerName() string {
	if o == nil || common.IsNil(o.OwnerName) {
		var ret string
		return ret
	}
	return *o.OwnerName
}

// GetOwnerNameOk returns a tuple with the OwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetOwnerNameOk() (*string, bool) {
	if o == nil || common.IsNil(o.OwnerName) {
		return nil, false
	}
	return o.OwnerName, true
}

// HasOwnerName returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasOwnerName() bool {
	if o != nil && !common.IsNil(o.OwnerName) {
		return true
	}

	return false
}

// SetOwnerName gets a reference to the given string and assigns it to the OwnerName field.
func (o *ResponseAdditionalDataCommon) SetOwnerName(v string) {
	o.OwnerName = &v
}

// GetPaymentAccountReference returns the PaymentAccountReference field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetPaymentAccountReference() string {
	if o == nil || common.IsNil(o.PaymentAccountReference) {
		var ret string
		return ret
	}
	return *o.PaymentAccountReference
}

// GetPaymentAccountReferenceOk returns a tuple with the PaymentAccountReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetPaymentAccountReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.PaymentAccountReference) {
		return nil, false
	}
	return o.PaymentAccountReference, true
}

// HasPaymentAccountReference returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasPaymentAccountReference() bool {
	if o != nil && !common.IsNil(o.PaymentAccountReference) {
		return true
	}

	return false
}

// SetPaymentAccountReference gets a reference to the given string and assigns it to the PaymentAccountReference field.
func (o *ResponseAdditionalDataCommon) SetPaymentAccountReference(v string) {
	o.PaymentAccountReference = &v
}

// GetPaymentMethod returns the PaymentMethod field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetPaymentMethod() string {
	if o == nil || common.IsNil(o.PaymentMethod) {
		var ret string
		return ret
	}
	return *o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetPaymentMethodOk() (*string, bool) {
	if o == nil || common.IsNil(o.PaymentMethod) {
		return nil, false
	}
	return o.PaymentMethod, true
}

// HasPaymentMethod returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasPaymentMethod() bool {
	if o != nil && !common.IsNil(o.PaymentMethod) {
		return true
	}

	return false
}

// SetPaymentMethod gets a reference to the given string and assigns it to the PaymentMethod field.
func (o *ResponseAdditionalDataCommon) SetPaymentMethod(v string) {
	o.PaymentMethod = &v
}

// GetPaymentMethodVariant returns the PaymentMethodVariant field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetPaymentMethodVariant() string {
	if o == nil || common.IsNil(o.PaymentMethodVariant) {
		var ret string
		return ret
	}
	return *o.PaymentMethodVariant
}

// GetPaymentMethodVariantOk returns a tuple with the PaymentMethodVariant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetPaymentMethodVariantOk() (*string, bool) {
	if o == nil || common.IsNil(o.PaymentMethodVariant) {
		return nil, false
	}
	return o.PaymentMethodVariant, true
}

// HasPaymentMethodVariant returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasPaymentMethodVariant() bool {
	if o != nil && !common.IsNil(o.PaymentMethodVariant) {
		return true
	}

	return false
}

// SetPaymentMethodVariant gets a reference to the given string and assigns it to the PaymentMethodVariant field.
func (o *ResponseAdditionalDataCommon) SetPaymentMethodVariant(v string) {
	o.PaymentMethodVariant = &v
}

// GetPayoutEligible returns the PayoutEligible field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetPayoutEligible() string {
	if o == nil || common.IsNil(o.PayoutEligible) {
		var ret string
		return ret
	}
	return *o.PayoutEligible
}

// GetPayoutEligibleOk returns a tuple with the PayoutEligible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetPayoutEligibleOk() (*string, bool) {
	if o == nil || common.IsNil(o.PayoutEligible) {
		return nil, false
	}
	return o.PayoutEligible, true
}

// HasPayoutEligible returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasPayoutEligible() bool {
	if o != nil && !common.IsNil(o.PayoutEligible) {
		return true
	}

	return false
}

// SetPayoutEligible gets a reference to the given string and assigns it to the PayoutEligible field.
func (o *ResponseAdditionalDataCommon) SetPayoutEligible(v string) {
	o.PayoutEligible = &v
}

// GetRealtimeAccountUpdaterStatus returns the RealtimeAccountUpdaterStatus field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetRealtimeAccountUpdaterStatus() string {
	if o == nil || common.IsNil(o.RealtimeAccountUpdaterStatus) {
		var ret string
		return ret
	}
	return *o.RealtimeAccountUpdaterStatus
}

// GetRealtimeAccountUpdaterStatusOk returns a tuple with the RealtimeAccountUpdaterStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetRealtimeAccountUpdaterStatusOk() (*string, bool) {
	if o == nil || common.IsNil(o.RealtimeAccountUpdaterStatus) {
		return nil, false
	}
	return o.RealtimeAccountUpdaterStatus, true
}

// HasRealtimeAccountUpdaterStatus returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasRealtimeAccountUpdaterStatus() bool {
	if o != nil && !common.IsNil(o.RealtimeAccountUpdaterStatus) {
		return true
	}

	return false
}

// SetRealtimeAccountUpdaterStatus gets a reference to the given string and assigns it to the RealtimeAccountUpdaterStatus field.
func (o *ResponseAdditionalDataCommon) SetRealtimeAccountUpdaterStatus(v string) {
	o.RealtimeAccountUpdaterStatus = &v
}

// GetReceiptFreeText returns the ReceiptFreeText field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetReceiptFreeText() string {
	if o == nil || common.IsNil(o.ReceiptFreeText) {
		var ret string
		return ret
	}
	return *o.ReceiptFreeText
}

// GetReceiptFreeTextOk returns a tuple with the ReceiptFreeText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetReceiptFreeTextOk() (*string, bool) {
	if o == nil || common.IsNil(o.ReceiptFreeText) {
		return nil, false
	}
	return o.ReceiptFreeText, true
}

// HasReceiptFreeText returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasReceiptFreeText() bool {
	if o != nil && !common.IsNil(o.ReceiptFreeText) {
		return true
	}

	return false
}

// SetReceiptFreeText gets a reference to the given string and assigns it to the ReceiptFreeText field.
func (o *ResponseAdditionalDataCommon) SetReceiptFreeText(v string) {
	o.ReceiptFreeText = &v
}

// GetRecurringContractTypes returns the RecurringContractTypes field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetRecurringContractTypes() string {
	if o == nil || common.IsNil(o.RecurringContractTypes) {
		var ret string
		return ret
	}
	return *o.RecurringContractTypes
}

// GetRecurringContractTypesOk returns a tuple with the RecurringContractTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetRecurringContractTypesOk() (*string, bool) {
	if o == nil || common.IsNil(o.RecurringContractTypes) {
		return nil, false
	}
	return o.RecurringContractTypes, true
}

// HasRecurringContractTypes returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasRecurringContractTypes() bool {
	if o != nil && !common.IsNil(o.RecurringContractTypes) {
		return true
	}

	return false
}

// SetRecurringContractTypes gets a reference to the given string and assigns it to the RecurringContractTypes field.
func (o *ResponseAdditionalDataCommon) SetRecurringContractTypes(v string) {
	o.RecurringContractTypes = &v
}

// GetRecurringFirstPspReference returns the RecurringFirstPspReference field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetRecurringFirstPspReference() string {
	if o == nil || common.IsNil(o.RecurringFirstPspReference) {
		var ret string
		return ret
	}
	return *o.RecurringFirstPspReference
}

// GetRecurringFirstPspReferenceOk returns a tuple with the RecurringFirstPspReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetRecurringFirstPspReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.RecurringFirstPspReference) {
		return nil, false
	}
	return o.RecurringFirstPspReference, true
}

// HasRecurringFirstPspReference returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasRecurringFirstPspReference() bool {
	if o != nil && !common.IsNil(o.RecurringFirstPspReference) {
		return true
	}

	return false
}

// SetRecurringFirstPspReference gets a reference to the given string and assigns it to the RecurringFirstPspReference field.
func (o *ResponseAdditionalDataCommon) SetRecurringFirstPspReference(v string) {
	o.RecurringFirstPspReference = &v
}

// GetRecurringRecurringDetailReference returns the RecurringRecurringDetailReference field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetRecurringRecurringDetailReference() string {
	if o == nil || common.IsNil(o.RecurringRecurringDetailReference) {
		var ret string
		return ret
	}
	return *o.RecurringRecurringDetailReference
}

// GetRecurringRecurringDetailReferenceOk returns a tuple with the RecurringRecurringDetailReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetRecurringRecurringDetailReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.RecurringRecurringDetailReference) {
		return nil, false
	}
	return o.RecurringRecurringDetailReference, true
}

// HasRecurringRecurringDetailReference returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasRecurringRecurringDetailReference() bool {
	if o != nil && !common.IsNil(o.RecurringRecurringDetailReference) {
		return true
	}

	return false
}

// SetRecurringRecurringDetailReference gets a reference to the given string and assigns it to the RecurringRecurringDetailReference field.
func (o *ResponseAdditionalDataCommon) SetRecurringRecurringDetailReference(v string) {
	o.RecurringRecurringDetailReference = &v
}

// GetRecurringShopperReference returns the RecurringShopperReference field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetRecurringShopperReference() string {
	if o == nil || common.IsNil(o.RecurringShopperReference) {
		var ret string
		return ret
	}
	return *o.RecurringShopperReference
}

// GetRecurringShopperReferenceOk returns a tuple with the RecurringShopperReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetRecurringShopperReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.RecurringShopperReference) {
		return nil, false
	}
	return o.RecurringShopperReference, true
}

// HasRecurringShopperReference returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasRecurringShopperReference() bool {
	if o != nil && !common.IsNil(o.RecurringShopperReference) {
		return true
	}

	return false
}

// SetRecurringShopperReference gets a reference to the given string and assigns it to the RecurringShopperReference field.
func (o *ResponseAdditionalDataCommon) SetRecurringShopperReference(v string) {
	o.RecurringShopperReference = &v
}

// GetRecurringProcessingModel returns the RecurringProcessingModel field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetRecurringProcessingModel() string {
	if o == nil || common.IsNil(o.RecurringProcessingModel) {
		var ret string
		return ret
	}
	return *o.RecurringProcessingModel
}

// GetRecurringProcessingModelOk returns a tuple with the RecurringProcessingModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetRecurringProcessingModelOk() (*string, bool) {
	if o == nil || common.IsNil(o.RecurringProcessingModel) {
		return nil, false
	}
	return o.RecurringProcessingModel, true
}

// HasRecurringProcessingModel returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasRecurringProcessingModel() bool {
	if o != nil && !common.IsNil(o.RecurringProcessingModel) {
		return true
	}

	return false
}

// SetRecurringProcessingModel gets a reference to the given string and assigns it to the RecurringProcessingModel field.
func (o *ResponseAdditionalDataCommon) SetRecurringProcessingModel(v string) {
	o.RecurringProcessingModel = &v
}

// GetReferred returns the Referred field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetReferred() string {
	if o == nil || common.IsNil(o.Referred) {
		var ret string
		return ret
	}
	return *o.Referred
}

// GetReferredOk returns a tuple with the Referred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetReferredOk() (*string, bool) {
	if o == nil || common.IsNil(o.Referred) {
		return nil, false
	}
	return o.Referred, true
}

// HasReferred returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasReferred() bool {
	if o != nil && !common.IsNil(o.Referred) {
		return true
	}

	return false
}

// SetReferred gets a reference to the given string and assigns it to the Referred field.
func (o *ResponseAdditionalDataCommon) SetReferred(v string) {
	o.Referred = &v
}

// GetRefusalReasonRaw returns the RefusalReasonRaw field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetRefusalReasonRaw() string {
	if o == nil || common.IsNil(o.RefusalReasonRaw) {
		var ret string
		return ret
	}
	return *o.RefusalReasonRaw
}

// GetRefusalReasonRawOk returns a tuple with the RefusalReasonRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetRefusalReasonRawOk() (*string, bool) {
	if o == nil || common.IsNil(o.RefusalReasonRaw) {
		return nil, false
	}
	return o.RefusalReasonRaw, true
}

// HasRefusalReasonRaw returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasRefusalReasonRaw() bool {
	if o != nil && !common.IsNil(o.RefusalReasonRaw) {
		return true
	}

	return false
}

// SetRefusalReasonRaw gets a reference to the given string and assigns it to the RefusalReasonRaw field.
func (o *ResponseAdditionalDataCommon) SetRefusalReasonRaw(v string) {
	o.RefusalReasonRaw = &v
}

// GetRequestAmount returns the RequestAmount field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetRequestAmount() string {
	if o == nil || common.IsNil(o.RequestAmount) {
		var ret string
		return ret
	}
	return *o.RequestAmount
}

// GetRequestAmountOk returns a tuple with the RequestAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetRequestAmountOk() (*string, bool) {
	if o == nil || common.IsNil(o.RequestAmount) {
		return nil, false
	}
	return o.RequestAmount, true
}

// HasRequestAmount returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasRequestAmount() bool {
	if o != nil && !common.IsNil(o.RequestAmount) {
		return true
	}

	return false
}

// SetRequestAmount gets a reference to the given string and assigns it to the RequestAmount field.
func (o *ResponseAdditionalDataCommon) SetRequestAmount(v string) {
	o.RequestAmount = &v
}

// GetRequestCurrencyCode returns the RequestCurrencyCode field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetRequestCurrencyCode() string {
	if o == nil || common.IsNil(o.RequestCurrencyCode) {
		var ret string
		return ret
	}
	return *o.RequestCurrencyCode
}

// GetRequestCurrencyCodeOk returns a tuple with the RequestCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetRequestCurrencyCodeOk() (*string, bool) {
	if o == nil || common.IsNil(o.RequestCurrencyCode) {
		return nil, false
	}
	return o.RequestCurrencyCode, true
}

// HasRequestCurrencyCode returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasRequestCurrencyCode() bool {
	if o != nil && !common.IsNil(o.RequestCurrencyCode) {
		return true
	}

	return false
}

// SetRequestCurrencyCode gets a reference to the given string and assigns it to the RequestCurrencyCode field.
func (o *ResponseAdditionalDataCommon) SetRequestCurrencyCode(v string) {
	o.RequestCurrencyCode = &v
}

// GetShopperInteraction returns the ShopperInteraction field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetShopperInteraction() string {
	if o == nil || common.IsNil(o.ShopperInteraction) {
		var ret string
		return ret
	}
	return *o.ShopperInteraction
}

// GetShopperInteractionOk returns a tuple with the ShopperInteraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetShopperInteractionOk() (*string, bool) {
	if o == nil || common.IsNil(o.ShopperInteraction) {
		return nil, false
	}
	return o.ShopperInteraction, true
}

// HasShopperInteraction returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasShopperInteraction() bool {
	if o != nil && !common.IsNil(o.ShopperInteraction) {
		return true
	}

	return false
}

// SetShopperInteraction gets a reference to the given string and assigns it to the ShopperInteraction field.
func (o *ResponseAdditionalDataCommon) SetShopperInteraction(v string) {
	o.ShopperInteraction = &v
}

// GetShopperReference returns the ShopperReference field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetShopperReference() string {
	if o == nil || common.IsNil(o.ShopperReference) {
		var ret string
		return ret
	}
	return *o.ShopperReference
}

// GetShopperReferenceOk returns a tuple with the ShopperReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetShopperReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.ShopperReference) {
		return nil, false
	}
	return o.ShopperReference, true
}

// HasShopperReference returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasShopperReference() bool {
	if o != nil && !common.IsNil(o.ShopperReference) {
		return true
	}

	return false
}

// SetShopperReference gets a reference to the given string and assigns it to the ShopperReference field.
func (o *ResponseAdditionalDataCommon) SetShopperReference(v string) {
	o.ShopperReference = &v
}

// GetTerminalId returns the TerminalId field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetTerminalId() string {
	if o == nil || common.IsNil(o.TerminalId) {
		var ret string
		return ret
	}
	return *o.TerminalId
}

// GetTerminalIdOk returns a tuple with the TerminalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetTerminalIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.TerminalId) {
		return nil, false
	}
	return o.TerminalId, true
}

// HasTerminalId returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasTerminalId() bool {
	if o != nil && !common.IsNil(o.TerminalId) {
		return true
	}

	return false
}

// SetTerminalId gets a reference to the given string and assigns it to the TerminalId field.
func (o *ResponseAdditionalDataCommon) SetTerminalId(v string) {
	o.TerminalId = &v
}

// GetThreeDAuthenticated returns the ThreeDAuthenticated field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetThreeDAuthenticated() string {
	if o == nil || common.IsNil(o.ThreeDAuthenticated) {
		var ret string
		return ret
	}
	return *o.ThreeDAuthenticated
}

// GetThreeDAuthenticatedOk returns a tuple with the ThreeDAuthenticated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetThreeDAuthenticatedOk() (*string, bool) {
	if o == nil || common.IsNil(o.ThreeDAuthenticated) {
		return nil, false
	}
	return o.ThreeDAuthenticated, true
}

// HasThreeDAuthenticated returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasThreeDAuthenticated() bool {
	if o != nil && !common.IsNil(o.ThreeDAuthenticated) {
		return true
	}

	return false
}

// SetThreeDAuthenticated gets a reference to the given string and assigns it to the ThreeDAuthenticated field.
func (o *ResponseAdditionalDataCommon) SetThreeDAuthenticated(v string) {
	o.ThreeDAuthenticated = &v
}

// GetThreeDAuthenticatedResponse returns the ThreeDAuthenticatedResponse field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetThreeDAuthenticatedResponse() string {
	if o == nil || common.IsNil(o.ThreeDAuthenticatedResponse) {
		var ret string
		return ret
	}
	return *o.ThreeDAuthenticatedResponse
}

// GetThreeDAuthenticatedResponseOk returns a tuple with the ThreeDAuthenticatedResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetThreeDAuthenticatedResponseOk() (*string, bool) {
	if o == nil || common.IsNil(o.ThreeDAuthenticatedResponse) {
		return nil, false
	}
	return o.ThreeDAuthenticatedResponse, true
}

// HasThreeDAuthenticatedResponse returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasThreeDAuthenticatedResponse() bool {
	if o != nil && !common.IsNil(o.ThreeDAuthenticatedResponse) {
		return true
	}

	return false
}

// SetThreeDAuthenticatedResponse gets a reference to the given string and assigns it to the ThreeDAuthenticatedResponse field.
func (o *ResponseAdditionalDataCommon) SetThreeDAuthenticatedResponse(v string) {
	o.ThreeDAuthenticatedResponse = &v
}

// GetThreeDOffered returns the ThreeDOffered field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetThreeDOffered() string {
	if o == nil || common.IsNil(o.ThreeDOffered) {
		var ret string
		return ret
	}
	return *o.ThreeDOffered
}

// GetThreeDOfferedOk returns a tuple with the ThreeDOffered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetThreeDOfferedOk() (*string, bool) {
	if o == nil || common.IsNil(o.ThreeDOffered) {
		return nil, false
	}
	return o.ThreeDOffered, true
}

// HasThreeDOffered returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasThreeDOffered() bool {
	if o != nil && !common.IsNil(o.ThreeDOffered) {
		return true
	}

	return false
}

// SetThreeDOffered gets a reference to the given string and assigns it to the ThreeDOffered field.
func (o *ResponseAdditionalDataCommon) SetThreeDOffered(v string) {
	o.ThreeDOffered = &v
}

// GetThreeDOfferedResponse returns the ThreeDOfferedResponse field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetThreeDOfferedResponse() string {
	if o == nil || common.IsNil(o.ThreeDOfferedResponse) {
		var ret string
		return ret
	}
	return *o.ThreeDOfferedResponse
}

// GetThreeDOfferedResponseOk returns a tuple with the ThreeDOfferedResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetThreeDOfferedResponseOk() (*string, bool) {
	if o == nil || common.IsNil(o.ThreeDOfferedResponse) {
		return nil, false
	}
	return o.ThreeDOfferedResponse, true
}

// HasThreeDOfferedResponse returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasThreeDOfferedResponse() bool {
	if o != nil && !common.IsNil(o.ThreeDOfferedResponse) {
		return true
	}

	return false
}

// SetThreeDOfferedResponse gets a reference to the given string and assigns it to the ThreeDOfferedResponse field.
func (o *ResponseAdditionalDataCommon) SetThreeDOfferedResponse(v string) {
	o.ThreeDOfferedResponse = &v
}

// GetThreeDSVersion returns the ThreeDSVersion field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetThreeDSVersion() string {
	if o == nil || common.IsNil(o.ThreeDSVersion) {
		var ret string
		return ret
	}
	return *o.ThreeDSVersion
}

// GetThreeDSVersionOk returns a tuple with the ThreeDSVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetThreeDSVersionOk() (*string, bool) {
	if o == nil || common.IsNil(o.ThreeDSVersion) {
		return nil, false
	}
	return o.ThreeDSVersion, true
}

// HasThreeDSVersion returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasThreeDSVersion() bool {
	if o != nil && !common.IsNil(o.ThreeDSVersion) {
		return true
	}

	return false
}

// SetThreeDSVersion gets a reference to the given string and assigns it to the ThreeDSVersion field.
func (o *ResponseAdditionalDataCommon) SetThreeDSVersion(v string) {
	o.ThreeDSVersion = &v
}

// GetVisaTransactionId returns the VisaTransactionId field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetVisaTransactionId() string {
	if o == nil || common.IsNil(o.VisaTransactionId) {
		var ret string
		return ret
	}
	return *o.VisaTransactionId
}

// GetVisaTransactionIdOk returns a tuple with the VisaTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetVisaTransactionIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.VisaTransactionId) {
		return nil, false
	}
	return o.VisaTransactionId, true
}

// HasVisaTransactionId returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasVisaTransactionId() bool {
	if o != nil && !common.IsNil(o.VisaTransactionId) {
		return true
	}

	return false
}

// SetVisaTransactionId gets a reference to the given string and assigns it to the VisaTransactionId field.
func (o *ResponseAdditionalDataCommon) SetVisaTransactionId(v string) {
	o.VisaTransactionId = &v
}

// GetXid returns the Xid field value if set, zero value otherwise.
func (o *ResponseAdditionalDataCommon) GetXid() string {
	if o == nil || common.IsNil(o.Xid) {
		var ret string
		return ret
	}
	return *o.Xid
}

// GetXidOk returns a tuple with the Xid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAdditionalDataCommon) GetXidOk() (*string, bool) {
	if o == nil || common.IsNil(o.Xid) {
		return nil, false
	}
	return o.Xid, true
}

// HasXid returns a boolean if a field has been set.
func (o *ResponseAdditionalDataCommon) HasXid() bool {
	if o != nil && !common.IsNil(o.Xid) {
		return true
	}

	return false
}

// SetXid gets a reference to the given string and assigns it to the Xid field.
func (o *ResponseAdditionalDataCommon) SetXid(v string) {
	o.Xid = &v
}

func (o ResponseAdditionalDataCommon) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseAdditionalDataCommon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.AcquirerAccountCode) {
		toSerialize["acquirerAccountCode"] = o.AcquirerAccountCode
	}
	if !common.IsNil(o.AcquirerCode) {
		toSerialize["acquirerCode"] = o.AcquirerCode
	}
	if !common.IsNil(o.AcquirerReference) {
		toSerialize["acquirerReference"] = o.AcquirerReference
	}
	if !common.IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !common.IsNil(o.AliasType) {
		toSerialize["aliasType"] = o.AliasType
	}
	if !common.IsNil(o.AuthCode) {
		toSerialize["authCode"] = o.AuthCode
	}
	if !common.IsNil(o.AuthorisationMid) {
		toSerialize["authorisationMid"] = o.AuthorisationMid
	}
	if !common.IsNil(o.AuthorisedAmountCurrency) {
		toSerialize["authorisedAmountCurrency"] = o.AuthorisedAmountCurrency
	}
	if !common.IsNil(o.AuthorisedAmountValue) {
		toSerialize["authorisedAmountValue"] = o.AuthorisedAmountValue
	}
	if !common.IsNil(o.AvsResult) {
		toSerialize["avsResult"] = o.AvsResult
	}
	if !common.IsNil(o.AvsResultRaw) {
		toSerialize["avsResultRaw"] = o.AvsResultRaw
	}
	if !common.IsNil(o.Bic) {
		toSerialize["bic"] = o.Bic
	}
	if !common.IsNil(o.CoBrandedWith) {
		toSerialize["coBrandedWith"] = o.CoBrandedWith
	}
	if !common.IsNil(o.CvcResult) {
		toSerialize["cvcResult"] = o.CvcResult
	}
	if !common.IsNil(o.CvcResultRaw) {
		toSerialize["cvcResultRaw"] = o.CvcResultRaw
	}
	if !common.IsNil(o.DsTransID) {
		toSerialize["dsTransID"] = o.DsTransID
	}
	if !common.IsNil(o.Eci) {
		toSerialize["eci"] = o.Eci
	}
	if !common.IsNil(o.ExpiryDate) {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	if !common.IsNil(o.ExtraCostsCurrency) {
		toSerialize["extraCostsCurrency"] = o.ExtraCostsCurrency
	}
	if !common.IsNil(o.ExtraCostsValue) {
		toSerialize["extraCostsValue"] = o.ExtraCostsValue
	}
	if !common.IsNil(o.FraudCheckItemNrFraudCheckname) {
		toSerialize["fraudCheck-[itemNr]-[FraudCheckname]"] = o.FraudCheckItemNrFraudCheckname
	}
	if !common.IsNil(o.FraudManualReview) {
		toSerialize["fraudManualReview"] = o.FraudManualReview
	}
	if !common.IsNil(o.FraudResultType) {
		toSerialize["fraudResultType"] = o.FraudResultType
	}
	if !common.IsNil(o.FundingSource) {
		toSerialize["fundingSource"] = o.FundingSource
	}
	if !common.IsNil(o.FundsAvailability) {
		toSerialize["fundsAvailability"] = o.FundsAvailability
	}
	if !common.IsNil(o.InferredRefusalReason) {
		toSerialize["inferredRefusalReason"] = o.InferredRefusalReason
	}
	if !common.IsNil(o.IsCardCommercial) {
		toSerialize["isCardCommercial"] = o.IsCardCommercial
	}
	if !common.IsNil(o.IssuerCountry) {
		toSerialize["issuerCountry"] = o.IssuerCountry
	}
	if !common.IsNil(o.LiabilityShift) {
		toSerialize["liabilityShift"] = o.LiabilityShift
	}
	if !common.IsNil(o.McBankNetReferenceNumber) {
		toSerialize["mcBankNetReferenceNumber"] = o.McBankNetReferenceNumber
	}
	if !common.IsNil(o.MerchantAdviceCode) {
		toSerialize["merchantAdviceCode"] = o.MerchantAdviceCode
	}
	if !common.IsNil(o.MerchantReference) {
		toSerialize["merchantReference"] = o.MerchantReference
	}
	if !common.IsNil(o.NetworkTxReference) {
		toSerialize["networkTxReference"] = o.NetworkTxReference
	}
	if !common.IsNil(o.OwnerName) {
		toSerialize["ownerName"] = o.OwnerName
	}
	if !common.IsNil(o.PaymentAccountReference) {
		toSerialize["paymentAccountReference"] = o.PaymentAccountReference
	}
	if !common.IsNil(o.PaymentMethod) {
		toSerialize["paymentMethod"] = o.PaymentMethod
	}
	if !common.IsNil(o.PaymentMethodVariant) {
		toSerialize["paymentMethodVariant"] = o.PaymentMethodVariant
	}
	if !common.IsNil(o.PayoutEligible) {
		toSerialize["payoutEligible"] = o.PayoutEligible
	}
	if !common.IsNil(o.RealtimeAccountUpdaterStatus) {
		toSerialize["realtimeAccountUpdaterStatus"] = o.RealtimeAccountUpdaterStatus
	}
	if !common.IsNil(o.ReceiptFreeText) {
		toSerialize["receiptFreeText"] = o.ReceiptFreeText
	}
	if !common.IsNil(o.RecurringContractTypes) {
		toSerialize["recurring.contractTypes"] = o.RecurringContractTypes
	}
	if !common.IsNil(o.RecurringFirstPspReference) {
		toSerialize["recurring.firstPspReference"] = o.RecurringFirstPspReference
	}
	if !common.IsNil(o.RecurringRecurringDetailReference) {
		toSerialize["recurring.recurringDetailReference"] = o.RecurringRecurringDetailReference
	}
	if !common.IsNil(o.RecurringShopperReference) {
		toSerialize["recurring.shopperReference"] = o.RecurringShopperReference
	}
	if !common.IsNil(o.RecurringProcessingModel) {
		toSerialize["recurringProcessingModel"] = o.RecurringProcessingModel
	}
	if !common.IsNil(o.Referred) {
		toSerialize["referred"] = o.Referred
	}
	if !common.IsNil(o.RefusalReasonRaw) {
		toSerialize["refusalReasonRaw"] = o.RefusalReasonRaw
	}
	if !common.IsNil(o.RequestAmount) {
		toSerialize["requestAmount"] = o.RequestAmount
	}
	if !common.IsNil(o.RequestCurrencyCode) {
		toSerialize["requestCurrencyCode"] = o.RequestCurrencyCode
	}
	if !common.IsNil(o.ShopperInteraction) {
		toSerialize["shopperInteraction"] = o.ShopperInteraction
	}
	if !common.IsNil(o.ShopperReference) {
		toSerialize["shopperReference"] = o.ShopperReference
	}
	if !common.IsNil(o.TerminalId) {
		toSerialize["terminalId"] = o.TerminalId
	}
	if !common.IsNil(o.ThreeDAuthenticated) {
		toSerialize["threeDAuthenticated"] = o.ThreeDAuthenticated
	}
	if !common.IsNil(o.ThreeDAuthenticatedResponse) {
		toSerialize["threeDAuthenticatedResponse"] = o.ThreeDAuthenticatedResponse
	}
	if !common.IsNil(o.ThreeDOffered) {
		toSerialize["threeDOffered"] = o.ThreeDOffered
	}
	if !common.IsNil(o.ThreeDOfferedResponse) {
		toSerialize["threeDOfferedResponse"] = o.ThreeDOfferedResponse
	}
	if !common.IsNil(o.ThreeDSVersion) {
		toSerialize["threeDSVersion"] = o.ThreeDSVersion
	}
	if !common.IsNil(o.VisaTransactionId) {
		toSerialize["visaTransactionId"] = o.VisaTransactionId
	}
	if !common.IsNil(o.Xid) {
		toSerialize["xid"] = o.Xid
	}
	return toSerialize, nil
}

type NullableResponseAdditionalDataCommon struct {
	value *ResponseAdditionalDataCommon
	isSet bool
}

func (v NullableResponseAdditionalDataCommon) Get() *ResponseAdditionalDataCommon {
	return v.value
}

func (v *NullableResponseAdditionalDataCommon) Set(val *ResponseAdditionalDataCommon) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseAdditionalDataCommon) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseAdditionalDataCommon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseAdditionalDataCommon(val *ResponseAdditionalDataCommon) *NullableResponseAdditionalDataCommon {
	return &NullableResponseAdditionalDataCommon{value: val, isSet: true}
}

func (v NullableResponseAdditionalDataCommon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseAdditionalDataCommon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func (o *ResponseAdditionalDataCommon) isValidFraudResultType() bool {
	var allowedEnumValues = []string{"GREEN", "FRAUD"}
	for _, allowed := range allowedEnumValues {
		if o.GetFraudResultType() == allowed {
			return true
		}
	}
	return false
}
func (o *ResponseAdditionalDataCommon) isValidRecurringProcessingModel() bool {
	var allowedEnumValues = []string{"CardOnFile", "Subscription", "UnscheduledCardOnFile"}
	for _, allowed := range allowedEnumValues {
		if o.GetRecurringProcessingModel() == allowed {
			return true
		}
	}
	return false
}
