/*
Management API

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v8/src/common"
)

// checks if the TerminalConnectivityBluetooth type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &TerminalConnectivityBluetooth{}

// TerminalConnectivityBluetooth struct for TerminalConnectivityBluetooth
type TerminalConnectivityBluetooth struct {
	// The terminal's Bluetooth IP address.
	IpAddress *string `json:"ipAddress,omitempty"`
	// The terminal's Bluetooth MAC address.
	MacAddress *string `json:"macAddress,omitempty"`
}

// NewTerminalConnectivityBluetooth instantiates a new TerminalConnectivityBluetooth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerminalConnectivityBluetooth() *TerminalConnectivityBluetooth {
	this := TerminalConnectivityBluetooth{}
	return &this
}

// NewTerminalConnectivityBluetoothWithDefaults instantiates a new TerminalConnectivityBluetooth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerminalConnectivityBluetoothWithDefaults() *TerminalConnectivityBluetooth {
	this := TerminalConnectivityBluetooth{}
	return &this
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *TerminalConnectivityBluetooth) GetIpAddress() string {
	if o == nil || common.IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminalConnectivityBluetooth) GetIpAddressOk() (*string, bool) {
	if o == nil || common.IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *TerminalConnectivityBluetooth) HasIpAddress() bool {
	if o != nil && !common.IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *TerminalConnectivityBluetooth) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *TerminalConnectivityBluetooth) GetMacAddress() string {
	if o == nil || common.IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminalConnectivityBluetooth) GetMacAddressOk() (*string, bool) {
	if o == nil || common.IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *TerminalConnectivityBluetooth) HasMacAddress() bool {
	if o != nil && !common.IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *TerminalConnectivityBluetooth) SetMacAddress(v string) {
	o.MacAddress = &v
}

func (o TerminalConnectivityBluetooth) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerminalConnectivityBluetooth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if !common.IsNil(o.MacAddress) {
		toSerialize["macAddress"] = o.MacAddress
	}
	return toSerialize, nil
}

type NullableTerminalConnectivityBluetooth struct {
	value *TerminalConnectivityBluetooth
	isSet bool
}

func (v NullableTerminalConnectivityBluetooth) Get() *TerminalConnectivityBluetooth {
	return v.value
}

func (v *NullableTerminalConnectivityBluetooth) Set(val *TerminalConnectivityBluetooth) {
	v.value = val
	v.isSet = true
}

func (v NullableTerminalConnectivityBluetooth) IsSet() bool {
	return v.isSet
}

func (v *NullableTerminalConnectivityBluetooth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerminalConnectivityBluetooth(val *TerminalConnectivityBluetooth) *NullableTerminalConnectivityBluetooth {
	return &NullableTerminalConnectivityBluetooth{value: val, isSet: true}
}

func (v NullableTerminalConnectivityBluetooth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerminalConnectivityBluetooth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
