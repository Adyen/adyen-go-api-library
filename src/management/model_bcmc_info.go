/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// BcmcInfo struct for BcmcInfo
type BcmcInfo struct {
	// Indicates if [Bancontact mobile](https://docs.adyen.com/payment-methods/bancontact/bancontact-mobile) is enabled.
	EnableBcmcMobile *bool `json:"enableBcmcMobile,omitempty"`
}

// NewBcmcInfo instantiates a new BcmcInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBcmcInfo() *BcmcInfo {
	this := BcmcInfo{}
	return &this
}

// NewBcmcInfoWithDefaults instantiates a new BcmcInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBcmcInfoWithDefaults() *BcmcInfo {
	this := BcmcInfo{}
	return &this
}

// GetEnableBcmcMobile returns the EnableBcmcMobile field value if set, zero value otherwise.
func (o *BcmcInfo) GetEnableBcmcMobile() bool {
	if o == nil || isNil(o.EnableBcmcMobile) {
		var ret bool
		return ret
	}
	return *o.EnableBcmcMobile
}

// GetEnableBcmcMobileOk returns a tuple with the EnableBcmcMobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BcmcInfo) GetEnableBcmcMobileOk() (*bool, bool) {
	if o == nil || isNil(o.EnableBcmcMobile) {
		return nil, false
	}
	return o.EnableBcmcMobile, true
}

// HasEnableBcmcMobile returns a boolean if a field has been set.
func (o *BcmcInfo) HasEnableBcmcMobile() bool {
	if o != nil && !isNil(o.EnableBcmcMobile) {
		return true
	}

	return false
}

// SetEnableBcmcMobile gets a reference to the given bool and assigns it to the EnableBcmcMobile field.
func (o *BcmcInfo) SetEnableBcmcMobile(v bool) {
	o.EnableBcmcMobile = &v
}

func (o BcmcInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EnableBcmcMobile) {
		toSerialize["enableBcmcMobile"] = o.EnableBcmcMobile
	}
	return json.Marshal(toSerialize)
}

type NullableBcmcInfo struct {
	value *BcmcInfo
	isSet bool
}

func (v NullableBcmcInfo) Get() *BcmcInfo {
	return v.value
}

func (v *NullableBcmcInfo) Set(val *BcmcInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBcmcInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBcmcInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBcmcInfo(val *BcmcInfo) *NullableBcmcInfo {
	return &NullableBcmcInfo{value: val, isSet: true}
}

func (v NullableBcmcInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBcmcInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


