/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// TerminalProduct struct for TerminalProduct
type TerminalProduct struct {
	// Information about items included and integration options.
	Description *string `json:"description,omitempty"`
	// The unique identifier of the product.
	Id *string `json:"id,omitempty"`
	// A list of parts included in the terminal package.
	ItemsIncluded []string `json:"itemsIncluded,omitempty"`
	// The descriptive name of the product.
	Name *string `json:"name,omitempty"`
	Price *Amount `json:"price,omitempty"`
}

// NewTerminalProduct instantiates a new TerminalProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerminalProduct() *TerminalProduct {
	this := TerminalProduct{}
	return &this
}

// NewTerminalProductWithDefaults instantiates a new TerminalProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerminalProductWithDefaults() *TerminalProduct {
	this := TerminalProduct{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TerminalProduct) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminalProduct) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TerminalProduct) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TerminalProduct) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TerminalProduct) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminalProduct) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TerminalProduct) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TerminalProduct) SetId(v string) {
	o.Id = &v
}

// GetItemsIncluded returns the ItemsIncluded field value if set, zero value otherwise.
func (o *TerminalProduct) GetItemsIncluded() []string {
	if o == nil || o.ItemsIncluded == nil {
		var ret []string
		return ret
	}
	return o.ItemsIncluded
}

// GetItemsIncludedOk returns a tuple with the ItemsIncluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminalProduct) GetItemsIncludedOk() ([]string, bool) {
	if o == nil || o.ItemsIncluded == nil {
		return nil, false
	}
	return o.ItemsIncluded, true
}

// HasItemsIncluded returns a boolean if a field has been set.
func (o *TerminalProduct) HasItemsIncluded() bool {
	if o != nil && o.ItemsIncluded != nil {
		return true
	}

	return false
}

// SetItemsIncluded gets a reference to the given []string and assigns it to the ItemsIncluded field.
func (o *TerminalProduct) SetItemsIncluded(v []string) {
	o.ItemsIncluded = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TerminalProduct) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminalProduct) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TerminalProduct) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TerminalProduct) SetName(v string) {
	o.Name = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *TerminalProduct) GetPrice() Amount {
	if o == nil || o.Price == nil {
		var ret Amount
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerminalProduct) GetPriceOk() (*Amount, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *TerminalProduct) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given Amount and assigns it to the Price field.
func (o *TerminalProduct) SetPrice(v Amount) {
	o.Price = &v
}

func (o TerminalProduct) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ItemsIncluded != nil {
		toSerialize["itemsIncluded"] = o.ItemsIncluded
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	return json.Marshal(toSerialize)
}

type NullableTerminalProduct struct {
	value *TerminalProduct
	isSet bool
}

func (v NullableTerminalProduct) Get() *TerminalProduct {
	return v.value
}

func (v *NullableTerminalProduct) Set(val *TerminalProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableTerminalProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableTerminalProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerminalProduct(val *TerminalProduct) *NullableTerminalProduct {
	return &NullableTerminalProduct{value: val, isSet: true}
}

func (v NullableTerminalProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerminalProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


