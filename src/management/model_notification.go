/*
Management API

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v8/src/common"
)

// checks if the Notification type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &Notification{}

// Notification struct for Notification
type Notification struct {
	// Shows or hides the event notification button on the terminal screen.
	ShowButton *bool `json:"showButton,omitempty"`
}

// NewNotification instantiates a new Notification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotification() *Notification {
	this := Notification{}
	return &this
}

// NewNotificationWithDefaults instantiates a new Notification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationWithDefaults() *Notification {
	this := Notification{}
	return &this
}

// GetShowButton returns the ShowButton field value if set, zero value otherwise.
func (o *Notification) GetShowButton() bool {
	if o == nil || common.IsNil(o.ShowButton) {
		var ret bool
		return ret
	}
	return *o.ShowButton
}

// GetShowButtonOk returns a tuple with the ShowButton field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetShowButtonOk() (*bool, bool) {
	if o == nil || common.IsNil(o.ShowButton) {
		return nil, false
	}
	return o.ShowButton, true
}

// HasShowButton returns a boolean if a field has been set.
func (o *Notification) HasShowButton() bool {
	if o != nil && !common.IsNil(o.ShowButton) {
		return true
	}

	return false
}

// SetShowButton gets a reference to the given bool and assigns it to the ShowButton field.
func (o *Notification) SetShowButton(v bool) {
	o.ShowButton = &v
}

func (o Notification) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Notification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.ShowButton) {
		toSerialize["showButton"] = o.ShowButton
	}
	return toSerialize, nil
}

type NullableNotification struct {
	value *Notification
	isSet bool
}

func (v NullableNotification) Get() *Notification {
	return v.value
}

func (v *NullableNotification) Set(val *Notification) {
	v.value = val
	v.isSet = true
}

func (v NullableNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotification(val *Notification) *NullableNotification {
	return &NullableNotification{value: val, isSet: true}
}

func (v NullableNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
