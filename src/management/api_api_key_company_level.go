/*
Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"context"
	"encoding/json"
	"io/ioutil"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v6/src/common"
)

// APIKeyCompanyLevelApi APIKeyCompanyLevelApi service
type APIKeyCompanyLevelApi common.Service

type APIKeyCompanyLevelApiGenerateNewApiKeyConfig struct {
	ctx             context.Context
	companyId       string
	apiCredentialId string
}

/*
GenerateNewApiKey Generate new API key

Returns a new API key for the API credential. You can use the new API key a few minutes after generating it. The old API key stops working 24 hours after generating a new one.

To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—API credentials read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param companyId The unique identifier of the company account.
	@param apiCredentialId Unique identifier of the API credential.
	@return APIKeyCompanyLevelApiGenerateNewApiKeyConfig
*/
func (a *APIKeyCompanyLevelApi) GenerateNewApiKeyConfig(ctx context.Context, companyId string, apiCredentialId string) APIKeyCompanyLevelApiGenerateNewApiKeyConfig {
	return APIKeyCompanyLevelApiGenerateNewApiKeyConfig{
		ctx:             ctx,
		companyId:       companyId,
		apiCredentialId: apiCredentialId,
	}
}

/*
Generate new API key
Returns a new API key for the API credential. You can use the new API key a few minutes after generating it. The old API key stops working 24 hours after generating a new one.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write
 * @param companyId The unique identifier of the company account.
 * @param apiCredentialId Unique identifier of the API credential.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return GenerateApiKeyResponse
*/

func (a *APIKeyCompanyLevelApi) GenerateNewApiKey(r APIKeyCompanyLevelApiGenerateNewApiKeyConfig) (GenerateApiKeyResponse, *_nethttp.Response, RestServiceError) {
	var v RestServiceError
	res := &GenerateApiKeyResponse{}
	path := "/companies/{companyId}/apiCredentials/{apiCredentialId}/generateApiKey"
	path = strings.Replace(path, "{"+"companyId"+"}", url.PathEscape(common.ParameterValueToString(r.companyId, "companyId")), -1)
	path = strings.Replace(path, "{"+"apiCredentialId"+"}", url.PathEscape(common.ParameterValueToString(r.apiCredentialId, "apiCredentialId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, _ := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}
	return *res, httpRes, v
}
