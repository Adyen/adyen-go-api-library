/*
Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"context"
	"encoding/json"
	"io/ioutil"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// MyAPICredentialApi MyAPICredentialApi service
type MyAPICredentialApi common.Service

type MyAPICredentialApiAddAllowedOriginConfig struct {
	ctx                        context.Context
	createAllowedOriginRequest *CreateAllowedOriginRequest
}

func (r MyAPICredentialApiAddAllowedOriginConfig) CreateAllowedOriginRequest(createAllowedOriginRequest CreateAllowedOriginRequest) MyAPICredentialApiAddAllowedOriginConfig {
	r.createAllowedOriginRequest = &createAllowedOriginRequest
	return r
}

/*
AddAllowedOrigin Add allowed origin

Adds an allowed origin to the list of [allowed origins](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) of your API credential.
The API key from the request is used to identify the [API credential](https://docs.adyen.com/development-resources/api-credentials).

You can make this request with any of the Management API roles.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MyAPICredentialApiAddAllowedOriginConfig
*/
func (a *MyAPICredentialApi) AddAllowedOriginConfig(ctx context.Context) MyAPICredentialApiAddAllowedOriginConfig {
	return MyAPICredentialApiAddAllowedOriginConfig{
		ctx: ctx,
	}
}

/*
Add allowed origin
Adds an allowed origin to the list of [allowed origins](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) of your API credential. The API key from the request is used to identify the [API credential](https://docs.adyen.com/development-resources/api-credentials).  You can make this request with any of the Management API roles.
 * @param req CreateAllowedOriginRequest - reference of CreateAllowedOriginRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return AllowedOrigin
*/

func (a *MyAPICredentialApi) AddAllowedOrigin(r MyAPICredentialApiAddAllowedOriginConfig) (AllowedOrigin, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &AllowedOrigin{}
	path := "/me/allowedOrigins"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.createAllowedOriginRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type MyAPICredentialApiGetAllowedOriginDetailsConfig struct {
	ctx      context.Context
	originId string
}

/*
GetAllowedOriginDetails Get allowed origin details

Returns the details of the [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) specified in the path.
The API key from the request is used to identify the [API credential](https://docs.adyen.com/development-resources/api-credentials).

You can make this request with any of the Management API roles.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param originId Unique identifier of the allowed origin.
	@return MyAPICredentialApiGetAllowedOriginDetailsConfig
*/
func (a *MyAPICredentialApi) GetAllowedOriginDetailsConfig(ctx context.Context, originId string) MyAPICredentialApiGetAllowedOriginDetailsConfig {
	return MyAPICredentialApiGetAllowedOriginDetailsConfig{
		ctx:      ctx,
		originId: originId,
	}
}

/*
Get allowed origin details
Returns the details of the [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) specified in the path. The API key from the request is used to identify the [API credential](https://docs.adyen.com/development-resources/api-credentials).  You can make this request with any of the Management API roles.
 * @param originId Unique identifier of the allowed origin.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return AllowedOrigin
*/

func (a *MyAPICredentialApi) GetAllowedOriginDetails(r MyAPICredentialApiGetAllowedOriginDetailsConfig) (AllowedOrigin, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &AllowedOrigin{}
	path := "/me/allowedOrigins/{originId}"
	path = strings.Replace(path, "{"+"originId"+"}", url.PathEscape(common.ParameterValueToString(r.originId, "originId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type MyAPICredentialApiGetAllowedOriginsConfig struct {
	ctx context.Context
}

/*
GetAllowedOrigins Get allowed origins

Returns the list of [allowed origins](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) of your [API credential](https://docs.adyen.com/development-resources/api-credentials) based on the API key you used in the request.

You can make this request with any of the Management API roles.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MyAPICredentialApiGetAllowedOriginsConfig
*/
func (a *MyAPICredentialApi) GetAllowedOriginsConfig(ctx context.Context) MyAPICredentialApiGetAllowedOriginsConfig {
	return MyAPICredentialApiGetAllowedOriginsConfig{
		ctx: ctx,
	}
}

/*
Get allowed origins
Returns the list of [allowed origins](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) of your [API credential](https://docs.adyen.com/development-resources/api-credentials) based on the API key you used in the request.  You can make this request with any of the Management API roles.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return AllowedOriginsResponse
*/

func (a *MyAPICredentialApi) GetAllowedOrigins(r MyAPICredentialApiGetAllowedOriginsConfig) (AllowedOriginsResponse, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &AllowedOriginsResponse{}
	path := "/me/allowedOrigins"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type MyAPICredentialApiGetApiCredentialDetailsConfig struct {
	ctx context.Context
}

/*
GetApiCredentialDetails Get API credential details

Returns your [API credential](https://docs.adyen.com/development-resources/api-credentials) details based on the API Key you used in the request.

You can make this request with any of the Management API roles.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return MyAPICredentialApiGetApiCredentialDetailsConfig
*/
func (a *MyAPICredentialApi) GetApiCredentialDetailsConfig(ctx context.Context) MyAPICredentialApiGetApiCredentialDetailsConfig {
	return MyAPICredentialApiGetApiCredentialDetailsConfig{
		ctx: ctx,
	}
}

/*
Get API credential details
Returns your [API credential](https://docs.adyen.com/development-resources/api-credentials) details based on the API Key you used in the request.  You can make this request with any of the Management API roles.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return MeApiCredential
*/

func (a *MyAPICredentialApi) GetApiCredentialDetails(r MyAPICredentialApiGetApiCredentialDetailsConfig) (MeApiCredential, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &MeApiCredential{}
	path := "/me"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type MyAPICredentialApiRemoveAllowedOriginConfig struct {
	ctx      context.Context
	originId string
}

/*
RemoveAllowedOrigin Remove allowed origin

Removes the [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) specified in the path.
The API key from the request is used to identify the [API credential](https://docs.adyen.com/development-resources/api-credentials).

You can make this request with any of the Management API roles.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param originId Unique identifier of the allowed origin.
	@return MyAPICredentialApiRemoveAllowedOriginConfig
*/
func (a *MyAPICredentialApi) RemoveAllowedOriginConfig(ctx context.Context, originId string) MyAPICredentialApiRemoveAllowedOriginConfig {
	return MyAPICredentialApiRemoveAllowedOriginConfig{
		ctx:      ctx,
		originId: originId,
	}
}

/*
Remove allowed origin
Removes the [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) specified in the path. The API key from the request is used to identify the [API credential](https://docs.adyen.com/development-resources/api-credentials).  You can make this request with any of the Management API roles.
 * @param originId Unique identifier of the allowed origin.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
*/

func (a *MyAPICredentialApi) RemoveAllowedOrigin(r MyAPICredentialApiRemoveAllowedOriginConfig) (*_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	var res interface{}
	path := "/me/allowedOrigins/{originId}"
	path = strings.Replace(path, "{"+"originId"+"}", url.PathEscape(common.ParameterValueToString(r.originId, "originId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodDelete,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return httpRes, serviceError, err
	}
	return httpRes, serviceError, err
}
