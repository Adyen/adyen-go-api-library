/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// PaymentMethodSetupInfo struct for PaymentMethodSetupInfo
type PaymentMethodSetupInfo struct {
	ApplePay *ApplePayInfo `json:"applePay,omitempty"`
	Bcmc *BcmcInfo `json:"bcmc,omitempty"`
	// The unique identifier of the business line.
	BusinessLineId *string `json:"businessLineId,omitempty"`
	// The list of countries where a payment method is available. By default, all countries supported by the payment method.
	Countries []string `json:"countries,omitempty"`
	// The list of currencies that a payment method supports. By default, all currencies supported by the payment method.
	Currencies []string `json:"currencies,omitempty"`
	GiroPay *GiroPayInfo `json:"giroPay,omitempty"`
	Klarna *KlarnaInfo `json:"klarna,omitempty"`
	Paypal *PayPalInfo `json:"paypal,omitempty"`
	Sofort *SofortInfo `json:"sofort,omitempty"`
	// The ID of the [store](https://docs.adyen.com/api-explorer/#/ManagementService/latest/post/stores__resParam_id), if any.
	StoreId *string `json:"storeId,omitempty"`
	Swish *SwishInfo `json:"swish,omitempty"`
	// Payment method [variant](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api).
	Type string `json:"type"`
}

// NewPaymentMethodSetupInfo instantiates a new PaymentMethodSetupInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMethodSetupInfo(type_ string) *PaymentMethodSetupInfo {
	this := PaymentMethodSetupInfo{}
	this.Type = type_
	return &this
}

// NewPaymentMethodSetupInfoWithDefaults instantiates a new PaymentMethodSetupInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMethodSetupInfoWithDefaults() *PaymentMethodSetupInfo {
	this := PaymentMethodSetupInfo{}
	return &this
}

// GetApplePay returns the ApplePay field value if set, zero value otherwise.
func (o *PaymentMethodSetupInfo) GetApplePay() ApplePayInfo {
	if o == nil || o.ApplePay == nil {
		var ret ApplePayInfo
		return ret
	}
	return *o.ApplePay
}

// GetApplePayOk returns a tuple with the ApplePay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodSetupInfo) GetApplePayOk() (*ApplePayInfo, bool) {
	if o == nil || o.ApplePay == nil {
		return nil, false
	}
	return o.ApplePay, true
}

// HasApplePay returns a boolean if a field has been set.
func (o *PaymentMethodSetupInfo) HasApplePay() bool {
	if o != nil && o.ApplePay != nil {
		return true
	}

	return false
}

// SetApplePay gets a reference to the given ApplePayInfo and assigns it to the ApplePay field.
func (o *PaymentMethodSetupInfo) SetApplePay(v ApplePayInfo) {
	o.ApplePay = &v
}

// GetBcmc returns the Bcmc field value if set, zero value otherwise.
func (o *PaymentMethodSetupInfo) GetBcmc() BcmcInfo {
	if o == nil || o.Bcmc == nil {
		var ret BcmcInfo
		return ret
	}
	return *o.Bcmc
}

// GetBcmcOk returns a tuple with the Bcmc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodSetupInfo) GetBcmcOk() (*BcmcInfo, bool) {
	if o == nil || o.Bcmc == nil {
		return nil, false
	}
	return o.Bcmc, true
}

// HasBcmc returns a boolean if a field has been set.
func (o *PaymentMethodSetupInfo) HasBcmc() bool {
	if o != nil && o.Bcmc != nil {
		return true
	}

	return false
}

// SetBcmc gets a reference to the given BcmcInfo and assigns it to the Bcmc field.
func (o *PaymentMethodSetupInfo) SetBcmc(v BcmcInfo) {
	o.Bcmc = &v
}

// GetBusinessLineId returns the BusinessLineId field value if set, zero value otherwise.
func (o *PaymentMethodSetupInfo) GetBusinessLineId() string {
	if o == nil || o.BusinessLineId == nil {
		var ret string
		return ret
	}
	return *o.BusinessLineId
}

// GetBusinessLineIdOk returns a tuple with the BusinessLineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodSetupInfo) GetBusinessLineIdOk() (*string, bool) {
	if o == nil || o.BusinessLineId == nil {
		return nil, false
	}
	return o.BusinessLineId, true
}

// HasBusinessLineId returns a boolean if a field has been set.
func (o *PaymentMethodSetupInfo) HasBusinessLineId() bool {
	if o != nil && o.BusinessLineId != nil {
		return true
	}

	return false
}

// SetBusinessLineId gets a reference to the given string and assigns it to the BusinessLineId field.
func (o *PaymentMethodSetupInfo) SetBusinessLineId(v string) {
	o.BusinessLineId = &v
}

// GetCountries returns the Countries field value if set, zero value otherwise.
func (o *PaymentMethodSetupInfo) GetCountries() []string {
	if o == nil || o.Countries == nil {
		var ret []string
		return ret
	}
	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodSetupInfo) GetCountriesOk() ([]string, bool) {
	if o == nil || o.Countries == nil {
		return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *PaymentMethodSetupInfo) HasCountries() bool {
	if o != nil && o.Countries != nil {
		return true
	}

	return false
}

// SetCountries gets a reference to the given []string and assigns it to the Countries field.
func (o *PaymentMethodSetupInfo) SetCountries(v []string) {
	o.Countries = v
}

// GetCurrencies returns the Currencies field value if set, zero value otherwise.
func (o *PaymentMethodSetupInfo) GetCurrencies() []string {
	if o == nil || o.Currencies == nil {
		var ret []string
		return ret
	}
	return o.Currencies
}

// GetCurrenciesOk returns a tuple with the Currencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodSetupInfo) GetCurrenciesOk() ([]string, bool) {
	if o == nil || o.Currencies == nil {
		return nil, false
	}
	return o.Currencies, true
}

// HasCurrencies returns a boolean if a field has been set.
func (o *PaymentMethodSetupInfo) HasCurrencies() bool {
	if o != nil && o.Currencies != nil {
		return true
	}

	return false
}

// SetCurrencies gets a reference to the given []string and assigns it to the Currencies field.
func (o *PaymentMethodSetupInfo) SetCurrencies(v []string) {
	o.Currencies = v
}

// GetGiroPay returns the GiroPay field value if set, zero value otherwise.
func (o *PaymentMethodSetupInfo) GetGiroPay() GiroPayInfo {
	if o == nil || o.GiroPay == nil {
		var ret GiroPayInfo
		return ret
	}
	return *o.GiroPay
}

// GetGiroPayOk returns a tuple with the GiroPay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodSetupInfo) GetGiroPayOk() (*GiroPayInfo, bool) {
	if o == nil || o.GiroPay == nil {
		return nil, false
	}
	return o.GiroPay, true
}

// HasGiroPay returns a boolean if a field has been set.
func (o *PaymentMethodSetupInfo) HasGiroPay() bool {
	if o != nil && o.GiroPay != nil {
		return true
	}

	return false
}

// SetGiroPay gets a reference to the given GiroPayInfo and assigns it to the GiroPay field.
func (o *PaymentMethodSetupInfo) SetGiroPay(v GiroPayInfo) {
	o.GiroPay = &v
}

// GetKlarna returns the Klarna field value if set, zero value otherwise.
func (o *PaymentMethodSetupInfo) GetKlarna() KlarnaInfo {
	if o == nil || o.Klarna == nil {
		var ret KlarnaInfo
		return ret
	}
	return *o.Klarna
}

// GetKlarnaOk returns a tuple with the Klarna field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodSetupInfo) GetKlarnaOk() (*KlarnaInfo, bool) {
	if o == nil || o.Klarna == nil {
		return nil, false
	}
	return o.Klarna, true
}

// HasKlarna returns a boolean if a field has been set.
func (o *PaymentMethodSetupInfo) HasKlarna() bool {
	if o != nil && o.Klarna != nil {
		return true
	}

	return false
}

// SetKlarna gets a reference to the given KlarnaInfo and assigns it to the Klarna field.
func (o *PaymentMethodSetupInfo) SetKlarna(v KlarnaInfo) {
	o.Klarna = &v
}

// GetPaypal returns the Paypal field value if set, zero value otherwise.
func (o *PaymentMethodSetupInfo) GetPaypal() PayPalInfo {
	if o == nil || o.Paypal == nil {
		var ret PayPalInfo
		return ret
	}
	return *o.Paypal
}

// GetPaypalOk returns a tuple with the Paypal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodSetupInfo) GetPaypalOk() (*PayPalInfo, bool) {
	if o == nil || o.Paypal == nil {
		return nil, false
	}
	return o.Paypal, true
}

// HasPaypal returns a boolean if a field has been set.
func (o *PaymentMethodSetupInfo) HasPaypal() bool {
	if o != nil && o.Paypal != nil {
		return true
	}

	return false
}

// SetPaypal gets a reference to the given PayPalInfo and assigns it to the Paypal field.
func (o *PaymentMethodSetupInfo) SetPaypal(v PayPalInfo) {
	o.Paypal = &v
}

// GetSofort returns the Sofort field value if set, zero value otherwise.
func (o *PaymentMethodSetupInfo) GetSofort() SofortInfo {
	if o == nil || o.Sofort == nil {
		var ret SofortInfo
		return ret
	}
	return *o.Sofort
}

// GetSofortOk returns a tuple with the Sofort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodSetupInfo) GetSofortOk() (*SofortInfo, bool) {
	if o == nil || o.Sofort == nil {
		return nil, false
	}
	return o.Sofort, true
}

// HasSofort returns a boolean if a field has been set.
func (o *PaymentMethodSetupInfo) HasSofort() bool {
	if o != nil && o.Sofort != nil {
		return true
	}

	return false
}

// SetSofort gets a reference to the given SofortInfo and assigns it to the Sofort field.
func (o *PaymentMethodSetupInfo) SetSofort(v SofortInfo) {
	o.Sofort = &v
}

// GetStoreId returns the StoreId field value if set, zero value otherwise.
func (o *PaymentMethodSetupInfo) GetStoreId() string {
	if o == nil || o.StoreId == nil {
		var ret string
		return ret
	}
	return *o.StoreId
}

// GetStoreIdOk returns a tuple with the StoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodSetupInfo) GetStoreIdOk() (*string, bool) {
	if o == nil || o.StoreId == nil {
		return nil, false
	}
	return o.StoreId, true
}

// HasStoreId returns a boolean if a field has been set.
func (o *PaymentMethodSetupInfo) HasStoreId() bool {
	if o != nil && o.StoreId != nil {
		return true
	}

	return false
}

// SetStoreId gets a reference to the given string and assigns it to the StoreId field.
func (o *PaymentMethodSetupInfo) SetStoreId(v string) {
	o.StoreId = &v
}

// GetSwish returns the Swish field value if set, zero value otherwise.
func (o *PaymentMethodSetupInfo) GetSwish() SwishInfo {
	if o == nil || o.Swish == nil {
		var ret SwishInfo
		return ret
	}
	return *o.Swish
}

// GetSwishOk returns a tuple with the Swish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodSetupInfo) GetSwishOk() (*SwishInfo, bool) {
	if o == nil || o.Swish == nil {
		return nil, false
	}
	return o.Swish, true
}

// HasSwish returns a boolean if a field has been set.
func (o *PaymentMethodSetupInfo) HasSwish() bool {
	if o != nil && o.Swish != nil {
		return true
	}

	return false
}

// SetSwish gets a reference to the given SwishInfo and assigns it to the Swish field.
func (o *PaymentMethodSetupInfo) SetSwish(v SwishInfo) {
	o.Swish = &v
}

// GetType returns the Type field value
func (o *PaymentMethodSetupInfo) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PaymentMethodSetupInfo) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PaymentMethodSetupInfo) SetType(v string) {
	o.Type = v
}

func (o PaymentMethodSetupInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApplePay != nil {
		toSerialize["applePay"] = o.ApplePay
	}
	if o.Bcmc != nil {
		toSerialize["bcmc"] = o.Bcmc
	}
	if o.BusinessLineId != nil {
		toSerialize["businessLineId"] = o.BusinessLineId
	}
	if o.Countries != nil {
		toSerialize["countries"] = o.Countries
	}
	if o.Currencies != nil {
		toSerialize["currencies"] = o.Currencies
	}
	if o.GiroPay != nil {
		toSerialize["giroPay"] = o.GiroPay
	}
	if o.Klarna != nil {
		toSerialize["klarna"] = o.Klarna
	}
	if o.Paypal != nil {
		toSerialize["paypal"] = o.Paypal
	}
	if o.Sofort != nil {
		toSerialize["sofort"] = o.Sofort
	}
	if o.StoreId != nil {
		toSerialize["storeId"] = o.StoreId
	}
	if o.Swish != nil {
		toSerialize["swish"] = o.Swish
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentMethodSetupInfo struct {
	value *PaymentMethodSetupInfo
	isSet bool
}

func (v NullablePaymentMethodSetupInfo) Get() *PaymentMethodSetupInfo {
	return v.value
}

func (v *NullablePaymentMethodSetupInfo) Set(val *PaymentMethodSetupInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethodSetupInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethodSetupInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethodSetupInfo(val *PaymentMethodSetupInfo) *NullablePaymentMethodSetupInfo {
	return &NullablePaymentMethodSetupInfo{value: val, isSet: true}
}

func (v NullablePaymentMethodSetupInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethodSetupInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


