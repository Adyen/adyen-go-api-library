/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// ReceiptOptions struct for ReceiptOptions
type ReceiptOptions struct {
	// The receipt logo converted to a Base64-encoded string. The image must be a .bmp file of < 256 KB, dimensions 240 (H) x 384 (W) px.
	Logo *string `json:"logo,omitempty"`
	// Data to print on the receipt as a QR code. This can include static text and the following variables:  - `${merchantreference}`: the merchant reference of the transaction. - `${pspreference}`: the PSP reference of the transaction.   For example, **http://www.example.com/order/${pspreference}/${merchantreference}**.
	QrCodeData *string `json:"qrCodeData,omitempty"`
}

// NewReceiptOptions instantiates a new ReceiptOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReceiptOptions() *ReceiptOptions {
	this := ReceiptOptions{}
	return &this
}

// NewReceiptOptionsWithDefaults instantiates a new ReceiptOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReceiptOptionsWithDefaults() *ReceiptOptions {
	this := ReceiptOptions{}
	return &this
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *ReceiptOptions) GetLogo() string {
	if o == nil || isNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiptOptions) GetLogoOk() (*string, bool) {
	if o == nil || isNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *ReceiptOptions) HasLogo() bool {
	if o != nil && !isNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *ReceiptOptions) SetLogo(v string) {
	o.Logo = &v
}

// GetQrCodeData returns the QrCodeData field value if set, zero value otherwise.
func (o *ReceiptOptions) GetQrCodeData() string {
	if o == nil || isNil(o.QrCodeData) {
		var ret string
		return ret
	}
	return *o.QrCodeData
}

// GetQrCodeDataOk returns a tuple with the QrCodeData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiptOptions) GetQrCodeDataOk() (*string, bool) {
	if o == nil || isNil(o.QrCodeData) {
		return nil, false
	}
	return o.QrCodeData, true
}

// HasQrCodeData returns a boolean if a field has been set.
func (o *ReceiptOptions) HasQrCodeData() bool {
	if o != nil && !isNil(o.QrCodeData) {
		return true
	}

	return false
}

// SetQrCodeData gets a reference to the given string and assigns it to the QrCodeData field.
func (o *ReceiptOptions) SetQrCodeData(v string) {
	o.QrCodeData = &v
}

func (o ReceiptOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	if !isNil(o.QrCodeData) {
		toSerialize["qrCodeData"] = o.QrCodeData
	}
	return json.Marshal(toSerialize)
}

type NullableReceiptOptions struct {
	value *ReceiptOptions
	isSet bool
}

func (v NullableReceiptOptions) Get() *ReceiptOptions {
	return v.value
}

func (v *NullableReceiptOptions) Set(val *ReceiptOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableReceiptOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableReceiptOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReceiptOptions(val *ReceiptOptions) *NullableReceiptOptions {
	return &NullableReceiptOptions{value: val, isSet: true}
}

func (v NullableReceiptOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReceiptOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


