/*
Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// checks if the JSONPathWrapper type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &JSONPathWrapper{}

// JSONPathWrapper struct for JSONPathWrapper
type JSONPathWrapper struct {
	JSONPath *JSONPath `json:"JSONPath,omitempty"`
}

// NewJSONPathWrapper instantiates a new JSONPathWrapper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONPathWrapper() *JSONPathWrapper {
	this := JSONPathWrapper{}
	return &this
}

// NewJSONPathWrapperWithDefaults instantiates a new JSONPathWrapper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONPathWrapperWithDefaults() *JSONPathWrapper {
	this := JSONPathWrapper{}
	return &this
}

// GetJSONPath returns the JSONPath field value if set, zero value otherwise.
func (o *JSONPathWrapper) GetJSONPath() JSONPath {
	if o == nil || common.IsNil(o.JSONPath) {
		var ret JSONPath
		return ret
	}
	return *o.JSONPath
}

// GetJSONPathOk returns a tuple with the JSONPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONPathWrapper) GetJSONPathOk() (*JSONPath, bool) {
	if o == nil || common.IsNil(o.JSONPath) {
		return nil, false
	}
	return o.JSONPath, true
}

// HasJSONPath returns a boolean if a field has been set.
func (o *JSONPathWrapper) HasJSONPath() bool {
	if o != nil && !common.IsNil(o.JSONPath) {
		return true
	}

	return false
}

// SetJSONPath gets a reference to the given JSONPath and assigns it to the JSONPath field.
func (o *JSONPathWrapper) SetJSONPath(v JSONPath) {
	o.JSONPath = &v
}

func (o JSONPathWrapper) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONPathWrapper) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.JSONPath) {
		toSerialize["JSONPath"] = o.JSONPath
	}
	return toSerialize, nil
}

type NullableJSONPathWrapper struct {
	value *JSONPathWrapper
	isSet bool
}

func (v NullableJSONPathWrapper) Get() *JSONPathWrapper {
	return v.value
}

func (v *NullableJSONPathWrapper) Set(val *JSONPathWrapper) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONPathWrapper) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONPathWrapper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONPathWrapper(val *JSONPathWrapper) *NullableJSONPathWrapper {
	return &NullableJSONPathWrapper{value: val, isSet: true}
}

func (v NullableJSONPathWrapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONPathWrapper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
