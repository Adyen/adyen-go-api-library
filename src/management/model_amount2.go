/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// Amount2 struct for Amount2
type Amount2 struct {
	// The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
	Currency string `json:"currency"`
	// The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
	Value int64 `json:"value"`
}

// NewAmount2 instantiates a new Amount2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmount2(currency string, value int64) *Amount2 {
	this := Amount2{}
	this.Currency = currency
	this.Value = value
	return &this
}

// NewAmount2WithDefaults instantiates a new Amount2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmount2WithDefaults() *Amount2 {
	this := Amount2{}
	return &this
}

// GetCurrency returns the Currency field value
func (o *Amount2) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Amount2) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Amount2) SetCurrency(v string) {
	o.Currency = v
}

// GetValue returns the Value field value
func (o *Amount2) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Amount2) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Amount2) SetValue(v int64) {
	o.Value = v
}

func (o Amount2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableAmount2 struct {
	value *Amount2
	isSet bool
}

func (v NullableAmount2) Get() *Amount2 {
	return v.value
}

func (v *NullableAmount2) Set(val *Amount2) {
	v.value = val
	v.isSet = true
}

func (v NullableAmount2) IsSet() bool {
	return v.isSet
}

func (v *NullableAmount2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmount2(val *Amount2) *NullableAmount2 {
	return &NullableAmount2{value: val, isSet: true}
}

func (v NullableAmount2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmount2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


