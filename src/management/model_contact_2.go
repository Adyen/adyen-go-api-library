/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// Contact2 struct for Contact2
type Contact2 struct {
	// Contact type
	ContactType *string `json:"contactType,omitempty"`
	// Email address
	Email *string `json:"email,omitempty"`
	// Phone
	Phone *string `json:"phone,omitempty"`
}

// NewContact2 instantiates a new Contact2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContact2() *Contact2 {
	this := Contact2{}
	return &this
}

// NewContact2WithDefaults instantiates a new Contact2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContact2WithDefaults() *Contact2 {
	this := Contact2{}
	return &this
}

// GetContactType returns the ContactType field value if set, zero value otherwise.
func (o *Contact2) GetContactType() string {
	if o == nil || isNil(o.ContactType) {
		var ret string
		return ret
	}
	return *o.ContactType
}

// GetContactTypeOk returns a tuple with the ContactType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact2) GetContactTypeOk() (*string, bool) {
	if o == nil || isNil(o.ContactType) {
		return nil, false
	}
	return o.ContactType, true
}

// HasContactType returns a boolean if a field has been set.
func (o *Contact2) HasContactType() bool {
	if o != nil && !isNil(o.ContactType) {
		return true
	}

	return false
}

// SetContactType gets a reference to the given string and assigns it to the ContactType field.
func (o *Contact2) SetContactType(v string) {
	o.ContactType = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Contact2) GetEmail() string {
	if o == nil || isNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact2) GetEmailOk() (*string, bool) {
	if o == nil || isNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Contact2) HasEmail() bool {
	if o != nil && !isNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Contact2) SetEmail(v string) {
	o.Email = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *Contact2) GetPhone() string {
	if o == nil || isNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contact2) GetPhoneOk() (*string, bool) {
	if o == nil || isNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *Contact2) HasPhone() bool {
	if o != nil && !isNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *Contact2) SetPhone(v string) {
	o.Phone = &v
}

func (o Contact2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ContactType) {
		toSerialize["contactType"] = o.ContactType
	}
	if !isNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !isNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	return json.Marshal(toSerialize)
}

type NullableContact2 struct {
	value *Contact2
	isSet bool
}

func (v NullableContact2) Get() *Contact2 {
	return v.value
}

func (v *NullableContact2) Set(val *Contact2) {
	v.value = val
	v.isSet = true
}

func (v NullableContact2) IsSet() bool {
	return v.isSet
}

func (v *NullableContact2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContact2(val *Contact2) *NullableContact2 {
	return &NullableContact2{value: val, isSet: true}
}

func (v NullableContact2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContact2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


