/*
Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"context"
	"encoding/json"
	"io/ioutil"
	_nethttp "net/http"
	"net/url"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// TerminalActionsTerminalLevelApi TerminalActionsTerminalLevelApi service
type TerminalActionsTerminalLevelApi common.Service

type TerminalActionsTerminalLevelApiCreateTerminalActionConfig struct {
	ctx                            context.Context
	scheduleTerminalActionsRequest *ScheduleTerminalActionsRequest
}

func (r TerminalActionsTerminalLevelApiCreateTerminalActionConfig) ScheduleTerminalActionsRequest(scheduleTerminalActionsRequest ScheduleTerminalActionsRequest) TerminalActionsTerminalLevelApiCreateTerminalActionConfig {
	r.scheduleTerminalActionsRequest = &scheduleTerminalActionsRequest
	return r
}

/*
CreateTerminalAction Create a terminal action

Schedules a [terminal action](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api) by specifying the action and the terminals that the action must be applied to.

The following restrictions apply:
* You can schedule only one action at a time. For example, to install a new app version and remove an old app version, you have to make two API requests.
* The maximum number of terminals in a request is **100**. For example, to apply an action to 250 terminals, you have to divide the terminals over three API requests.
* If there is an error with one or more terminal IDs in the request, the action is scheduled for none of the terminals. You need to fix the error and try again.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Terminal actions read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return TerminalActionsTerminalLevelApiCreateTerminalActionConfig
*/
func (a *TerminalActionsTerminalLevelApi) CreateTerminalActionConfig(ctx context.Context) TerminalActionsTerminalLevelApiCreateTerminalActionConfig {
	return TerminalActionsTerminalLevelApiCreateTerminalActionConfig{
		ctx: ctx,
	}
}

/*
Create a terminal action
Schedules a [terminal action](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api) by specifying the action and the terminals that the action must be applied to.   The following restrictions apply: * You can schedule only one action at a time. For example, to install a new app version and remove an old app version, you have to make two API requests.  * The maximum number of terminals in a request is **100**. For example, to apply an action to 250 terminals, you have to divide the terminals over three API requests.  * If there is an error with one or more terminal IDs in the request, the action is scheduled for none of the terminals. You need to fix the error and try again.   To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal actions read and write
 * @param req ScheduleTerminalActionsRequest - reference of ScheduleTerminalActionsRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ScheduleTerminalActionsResponse
*/

func (a *TerminalActionsTerminalLevelApi) CreateTerminalAction(r TerminalActionsTerminalLevelApiCreateTerminalActionConfig) (ScheduleTerminalActionsResponse, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &ScheduleTerminalActionsResponse{}
	path := "/terminals/scheduleActions"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.scheduleTerminalActionsRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}
