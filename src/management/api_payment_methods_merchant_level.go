/*
Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"context"
	"encoding/json"
	"io/ioutil"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v6/src/common"
)

// PaymentMethodsMerchantLevelApi PaymentMethodsMerchantLevelApi service
type PaymentMethodsMerchantLevelApi common.Service

type PaymentMethodsMerchantLevelApiAddApplePayDomainConfig struct {
	ctx             context.Context
	merchantId      string
	paymentMethodId string
	applePayInfo    *ApplePayInfo
}

func (r PaymentMethodsMerchantLevelApiAddApplePayDomainConfig) ApplePayInfo(applePayInfo ApplePayInfo) PaymentMethodsMerchantLevelApiAddApplePayDomainConfig {
	r.applePayInfo = &applePayInfo
	return r
}

/*
AddApplePayDomain Add an Apple Pay domain

Adds the new domain to the list of Apple Pay domains that are registered with the merchant account and the payment method identified in the path. For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/enable-apple-pay#register-merchant-domain).

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Payment methods read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param paymentMethodId The unique identifier of the payment method.
	@return PaymentMethodsMerchantLevelApiAddApplePayDomainConfig
*/
func (a *PaymentMethodsMerchantLevelApi) AddApplePayDomainConfig(ctx context.Context, merchantId string, paymentMethodId string) PaymentMethodsMerchantLevelApiAddApplePayDomainConfig {
	return PaymentMethodsMerchantLevelApiAddApplePayDomainConfig{
		ctx:             ctx,
		merchantId:      merchantId,
		paymentMethodId: paymentMethodId,
	}
}

/*
Add an Apple Pay domain
Adds the new domain to the list of Apple Pay domains that are registered with the merchant account and the payment method identified in the path. For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/enable-apple-pay#register-merchant-domain).  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param paymentMethodId The unique identifier of the payment method.
 * @param req ApplePayInfo - reference of ApplePayInfo).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
*/

func (a *PaymentMethodsMerchantLevelApi) AddApplePayDomain(r PaymentMethodsMerchantLevelApiAddApplePayDomainConfig) (*_nethttp.Response, RestServiceError) {
	var v RestServiceError
	var res interface{}
	path := "/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/addApplePayDomains"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"paymentMethodId"+"}", url.PathEscape(common.ParameterValueToString(r.paymentMethodId, "paymentMethodId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, _ := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.applePayInfo,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return httpRes, v
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return httpRes, v
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return httpRes, v
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return httpRes, v
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return httpRes, v
	}
	return httpRes, v
}

type PaymentMethodsMerchantLevelApiGetAllPaymentMethodsConfig struct {
	ctx            context.Context
	merchantId     string
	storeId        *string
	businessLineId *string
	pageSize       *int32
	pageNumber     *int32
}

// The unique identifier of the store for which to return the payment methods.
func (r PaymentMethodsMerchantLevelApiGetAllPaymentMethodsConfig) StoreId(storeId string) PaymentMethodsMerchantLevelApiGetAllPaymentMethodsConfig {
	r.storeId = &storeId
	return r
}

// The unique identifier of the Business Line for which to return the payment methods.
func (r PaymentMethodsMerchantLevelApiGetAllPaymentMethodsConfig) BusinessLineId(businessLineId string) PaymentMethodsMerchantLevelApiGetAllPaymentMethodsConfig {
	r.businessLineId = &businessLineId
	return r
}

// The number of items to have on a page, maximum 100. The default is 10 items on a page.
func (r PaymentMethodsMerchantLevelApiGetAllPaymentMethodsConfig) PageSize(pageSize int32) PaymentMethodsMerchantLevelApiGetAllPaymentMethodsConfig {
	r.pageSize = &pageSize
	return r
}

// The number of the page to fetch.
func (r PaymentMethodsMerchantLevelApiGetAllPaymentMethodsConfig) PageNumber(pageNumber int32) PaymentMethodsMerchantLevelApiGetAllPaymentMethodsConfig {
	r.pageNumber = &pageNumber
	return r
}

/*
GetAllPaymentMethods Get all payment methods

Returns details for all payment methods of the merchant account identified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Payment methods read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@return PaymentMethodsMerchantLevelApiGetAllPaymentMethodsConfig
*/
func (a *PaymentMethodsMerchantLevelApi) GetAllPaymentMethodsConfig(ctx context.Context, merchantId string) PaymentMethodsMerchantLevelApiGetAllPaymentMethodsConfig {
	return PaymentMethodsMerchantLevelApiGetAllPaymentMethodsConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Get all payment methods
Returns details for all payment methods of the merchant account identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read
 * @param merchantId The unique identifier of the merchant account.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentMethodResponse
*/

func (a *PaymentMethodsMerchantLevelApi) GetAllPaymentMethods(r PaymentMethodsMerchantLevelApiGetAllPaymentMethodsConfig) (PaymentMethodResponse, *_nethttp.Response, RestServiceError) {
	var v RestServiceError
	res := &PaymentMethodResponse{}
	path := "/merchants/{merchantId}/paymentMethodSettings"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.storeId != nil {
		common.ParameterAddToQuery(queryParams, "storeId", r.storeId, "")
	}
	if r.businessLineId != nil {
		common.ParameterAddToQuery(queryParams, "businessLineId", r.businessLineId, "")
	}
	if r.pageSize != nil {
		common.ParameterAddToQuery(queryParams, "pageSize", r.pageSize, "")
	}
	if r.pageNumber != nil {
		common.ParameterAddToQuery(queryParams, "pageNumber", r.pageNumber, "")
	}
	httpRes, _ := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}
	return *res, httpRes, v
}

type PaymentMethodsMerchantLevelApiGetApplePayDomainsConfig struct {
	ctx             context.Context
	merchantId      string
	paymentMethodId string
}

/*
GetApplePayDomains Get Apple Pay domains

Returns all Apple Pay domains that are registered with the merchant account and the payment method identified in the path. For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/enable-apple-pay#register-merchant-domain).

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Payment methods read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param paymentMethodId The unique identifier of the payment method.
	@return PaymentMethodsMerchantLevelApiGetApplePayDomainsConfig
*/
func (a *PaymentMethodsMerchantLevelApi) GetApplePayDomainsConfig(ctx context.Context, merchantId string, paymentMethodId string) PaymentMethodsMerchantLevelApiGetApplePayDomainsConfig {
	return PaymentMethodsMerchantLevelApiGetApplePayDomainsConfig{
		ctx:             ctx,
		merchantId:      merchantId,
		paymentMethodId: paymentMethodId,
	}
}

/*
Get Apple Pay domains
Returns all Apple Pay domains that are registered with the merchant account and the payment method identified in the path. For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/enable-apple-pay#register-merchant-domain).  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read
 * @param merchantId The unique identifier of the merchant account.
 * @param paymentMethodId The unique identifier of the payment method.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApplePayInfo
*/

func (a *PaymentMethodsMerchantLevelApi) GetApplePayDomains(r PaymentMethodsMerchantLevelApiGetApplePayDomainsConfig) (ApplePayInfo, *_nethttp.Response, RestServiceError) {
	var v RestServiceError
	res := &ApplePayInfo{}
	path := "/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/getApplePayDomains"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"paymentMethodId"+"}", url.PathEscape(common.ParameterValueToString(r.paymentMethodId, "paymentMethodId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, _ := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}
	return *res, httpRes, v
}

type PaymentMethodsMerchantLevelApiGetPaymentMethodDetailsConfig struct {
	ctx             context.Context
	merchantId      string
	paymentMethodId string
}

/*
GetPaymentMethodDetails Get payment method details

Returns details for the merchant account and the payment method identified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Payment methods read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param paymentMethodId The unique identifier of the payment method.
	@return PaymentMethodsMerchantLevelApiGetPaymentMethodDetailsConfig
*/
func (a *PaymentMethodsMerchantLevelApi) GetPaymentMethodDetailsConfig(ctx context.Context, merchantId string, paymentMethodId string) PaymentMethodsMerchantLevelApiGetPaymentMethodDetailsConfig {
	return PaymentMethodsMerchantLevelApiGetPaymentMethodDetailsConfig{
		ctx:             ctx,
		merchantId:      merchantId,
		paymentMethodId: paymentMethodId,
	}
}

/*
Get payment method details
Returns details for the merchant account and the payment method identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read
 * @param merchantId The unique identifier of the merchant account.
 * @param paymentMethodId The unique identifier of the payment method.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentMethod
*/

func (a *PaymentMethodsMerchantLevelApi) GetPaymentMethodDetails(r PaymentMethodsMerchantLevelApiGetPaymentMethodDetailsConfig) (PaymentMethod, *_nethttp.Response, RestServiceError) {
	var v RestServiceError
	res := &PaymentMethod{}
	path := "/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"paymentMethodId"+"}", url.PathEscape(common.ParameterValueToString(r.paymentMethodId, "paymentMethodId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, _ := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}
	return *res, httpRes, v
}

type PaymentMethodsMerchantLevelApiRequestPaymentMethodConfig struct {
	ctx                    context.Context
	merchantId             string
	paymentMethodSetupInfo *PaymentMethodSetupInfo
}

func (r PaymentMethodsMerchantLevelApiRequestPaymentMethodConfig) PaymentMethodSetupInfo(paymentMethodSetupInfo PaymentMethodSetupInfo) PaymentMethodsMerchantLevelApiRequestPaymentMethodConfig {
	r.paymentMethodSetupInfo = &paymentMethodSetupInfo
	return r
}

/*
RequestPaymentMethod Request a payment method

Sends a request to add a new payment method to the merchant account identified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Payment methods read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@return PaymentMethodsMerchantLevelApiRequestPaymentMethodConfig
*/
func (a *PaymentMethodsMerchantLevelApi) RequestPaymentMethodConfig(ctx context.Context, merchantId string) PaymentMethodsMerchantLevelApiRequestPaymentMethodConfig {
	return PaymentMethodsMerchantLevelApiRequestPaymentMethodConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Request a payment method
Sends a request to add a new payment method to the merchant account identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param req PaymentMethodSetupInfo - reference of PaymentMethodSetupInfo).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentMethod
*/

func (a *PaymentMethodsMerchantLevelApi) RequestPaymentMethod(r PaymentMethodsMerchantLevelApiRequestPaymentMethodConfig) (PaymentMethod, *_nethttp.Response, RestServiceError) {
	var v RestServiceError
	res := &PaymentMethod{}
	path := "/merchants/{merchantId}/paymentMethodSettings"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, _ := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.paymentMethodSetupInfo,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}
	return *res, httpRes, v
}

type PaymentMethodsMerchantLevelApiUpdatePaymentMethodConfig struct {
	ctx                     context.Context
	merchantId              string
	paymentMethodId         string
	updatePaymentMethodInfo *UpdatePaymentMethodInfo
}

func (r PaymentMethodsMerchantLevelApiUpdatePaymentMethodConfig) UpdatePaymentMethodInfo(updatePaymentMethodInfo UpdatePaymentMethodInfo) PaymentMethodsMerchantLevelApiUpdatePaymentMethodConfig {
	r.updatePaymentMethodInfo = &updatePaymentMethodInfo
	return r
}

/*
UpdatePaymentMethod Update a payment method

Updates payment method details for the merchant account and the payment method identified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Payment methods read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param paymentMethodId The unique identifier of the payment method.
	@return PaymentMethodsMerchantLevelApiUpdatePaymentMethodConfig
*/
func (a *PaymentMethodsMerchantLevelApi) UpdatePaymentMethodConfig(ctx context.Context, merchantId string, paymentMethodId string) PaymentMethodsMerchantLevelApiUpdatePaymentMethodConfig {
	return PaymentMethodsMerchantLevelApiUpdatePaymentMethodConfig{
		ctx:             ctx,
		merchantId:      merchantId,
		paymentMethodId: paymentMethodId,
	}
}

/*
Update a payment method
Updates payment method details for the merchant account and the payment method identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param paymentMethodId The unique identifier of the payment method.
 * @param req UpdatePaymentMethodInfo - reference of UpdatePaymentMethodInfo).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentMethod
*/

func (a *PaymentMethodsMerchantLevelApi) UpdatePaymentMethod(r PaymentMethodsMerchantLevelApiUpdatePaymentMethodConfig) (PaymentMethod, *_nethttp.Response, RestServiceError) {
	var v RestServiceError
	res := &PaymentMethod{}
	path := "/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"paymentMethodId"+"}", url.PathEscape(common.ParameterValueToString(r.paymentMethodId, "paymentMethodId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, _ := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.updatePaymentMethodInfo,
		res,
		_nethttp.MethodPatch,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}
	return *res, httpRes, v
}
