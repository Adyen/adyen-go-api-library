/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// AccountKey struct for AccountKey
type AccountKey struct {
	AccountCode string `json:"accountCode"`
	AccountTypeCode string `json:"accountTypeCode"`
	NameSpace *string `json:"nameSpace,omitempty"`
}

// NewAccountKey instantiates a new AccountKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountKey(accountCode string, accountTypeCode string) *AccountKey {
	this := AccountKey{}
	this.AccountCode = accountCode
	this.AccountTypeCode = accountTypeCode
	return &this
}

// NewAccountKeyWithDefaults instantiates a new AccountKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountKeyWithDefaults() *AccountKey {
	this := AccountKey{}
	return &this
}

// GetAccountCode returns the AccountCode field value
func (o *AccountKey) GetAccountCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountCode
}

// GetAccountCodeOk returns a tuple with the AccountCode field value
// and a boolean to check if the value has been set.
func (o *AccountKey) GetAccountCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountCode, true
}

// SetAccountCode sets field value
func (o *AccountKey) SetAccountCode(v string) {
	o.AccountCode = v
}

// GetAccountTypeCode returns the AccountTypeCode field value
func (o *AccountKey) GetAccountTypeCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountTypeCode
}

// GetAccountTypeCodeOk returns a tuple with the AccountTypeCode field value
// and a boolean to check if the value has been set.
func (o *AccountKey) GetAccountTypeCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountTypeCode, true
}

// SetAccountTypeCode sets field value
func (o *AccountKey) SetAccountTypeCode(v string) {
	o.AccountTypeCode = v
}

// GetNameSpace returns the NameSpace field value if set, zero value otherwise.
func (o *AccountKey) GetNameSpace() string {
	if o == nil || isNil(o.NameSpace) {
		var ret string
		return ret
	}
	return *o.NameSpace
}

// GetNameSpaceOk returns a tuple with the NameSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountKey) GetNameSpaceOk() (*string, bool) {
	if o == nil || isNil(o.NameSpace) {
		return nil, false
	}
	return o.NameSpace, true
}

// HasNameSpace returns a boolean if a field has been set.
func (o *AccountKey) HasNameSpace() bool {
	if o != nil && !isNil(o.NameSpace) {
		return true
	}

	return false
}

// SetNameSpace gets a reference to the given string and assigns it to the NameSpace field.
func (o *AccountKey) SetNameSpace(v string) {
	o.NameSpace = &v
}

func (o AccountKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accountCode"] = o.AccountCode
	}
	if true {
		toSerialize["accountTypeCode"] = o.AccountTypeCode
	}
	if !isNil(o.NameSpace) {
		toSerialize["nameSpace"] = o.NameSpace
	}
	return json.Marshal(toSerialize)
}

type NullableAccountKey struct {
	value *AccountKey
	isSet bool
}

func (v NullableAccountKey) Get() *AccountKey {
	return v.value
}

func (v *NullableAccountKey) Set(val *AccountKey) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountKey) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountKey(val *AccountKey) *NullableAccountKey {
	return &NullableAccountKey{value: val, isSet: true}
}

func (v NullableAccountKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


