/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// UpdatePaymentMethodInfo struct for UpdatePaymentMethodInfo
type UpdatePaymentMethodInfo struct {
	// The list of countries where a payment method is available. By default, all countries supported by the payment method.
	Countries []string `json:"countries,omitempty"`
	// The list of currencies that a payment method supports. By default, all currencies supported by the payment method.
	Currencies []string `json:"currencies,omitempty"`
	// Indicates whether the payment method is enabled (**true**) or disabled (**false**).
	Enabled *bool `json:"enabled,omitempty"`
}

// NewUpdatePaymentMethodInfo instantiates a new UpdatePaymentMethodInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePaymentMethodInfo() *UpdatePaymentMethodInfo {
	this := UpdatePaymentMethodInfo{}
	return &this
}

// NewUpdatePaymentMethodInfoWithDefaults instantiates a new UpdatePaymentMethodInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePaymentMethodInfoWithDefaults() *UpdatePaymentMethodInfo {
	this := UpdatePaymentMethodInfo{}
	return &this
}

// GetCountries returns the Countries field value if set, zero value otherwise.
func (o *UpdatePaymentMethodInfo) GetCountries() []string {
	if o == nil || o.Countries == nil {
		var ret []string
		return ret
	}
	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePaymentMethodInfo) GetCountriesOk() ([]string, bool) {
	if o == nil || o.Countries == nil {
		return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *UpdatePaymentMethodInfo) HasCountries() bool {
	if o != nil && o.Countries != nil {
		return true
	}

	return false
}

// SetCountries gets a reference to the given []string and assigns it to the Countries field.
func (o *UpdatePaymentMethodInfo) SetCountries(v []string) {
	o.Countries = v
}

// GetCurrencies returns the Currencies field value if set, zero value otherwise.
func (o *UpdatePaymentMethodInfo) GetCurrencies() []string {
	if o == nil || o.Currencies == nil {
		var ret []string
		return ret
	}
	return o.Currencies
}

// GetCurrenciesOk returns a tuple with the Currencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePaymentMethodInfo) GetCurrenciesOk() ([]string, bool) {
	if o == nil || o.Currencies == nil {
		return nil, false
	}
	return o.Currencies, true
}

// HasCurrencies returns a boolean if a field has been set.
func (o *UpdatePaymentMethodInfo) HasCurrencies() bool {
	if o != nil && o.Currencies != nil {
		return true
	}

	return false
}

// SetCurrencies gets a reference to the given []string and assigns it to the Currencies field.
func (o *UpdatePaymentMethodInfo) SetCurrencies(v []string) {
	o.Currencies = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdatePaymentMethodInfo) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePaymentMethodInfo) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UpdatePaymentMethodInfo) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdatePaymentMethodInfo) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o UpdatePaymentMethodInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Countries != nil {
		toSerialize["countries"] = o.Countries
	}
	if o.Currencies != nil {
		toSerialize["currencies"] = o.Currencies
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableUpdatePaymentMethodInfo struct {
	value *UpdatePaymentMethodInfo
	isSet bool
}

func (v NullableUpdatePaymentMethodInfo) Get() *UpdatePaymentMethodInfo {
	return v.value
}

func (v *NullableUpdatePaymentMethodInfo) Set(val *UpdatePaymentMethodInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePaymentMethodInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePaymentMethodInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePaymentMethodInfo(val *UpdatePaymentMethodInfo) *NullableUpdatePaymentMethodInfo {
	return &NullableUpdatePaymentMethodInfo{value: val, isSet: true}
}

func (v NullableUpdatePaymentMethodInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePaymentMethodInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


