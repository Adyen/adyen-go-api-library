/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// User2 struct for User2
type User2 struct {
	// Email address
	Email string `json:"email"`
	Name Name2 `json:"name"`
}

// NewUser2 instantiates a new User2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser2(email string, name Name2) *User2 {
	this := User2{}
	this.Email = email
	this.Name = name
	return &this
}

// NewUser2WithDefaults instantiates a new User2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUser2WithDefaults() *User2 {
	this := User2{}
	return &this
}

// GetEmail returns the Email field value
func (o *User2) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *User2) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *User2) SetEmail(v string) {
	o.Email = v
}

// GetName returns the Name field value
func (o *User2) GetName() Name2 {
	if o == nil {
		var ret Name2
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *User2) GetNameOk() (*Name2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *User2) SetName(v Name2) {
	o.Name = v
}

func (o User2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableUser2 struct {
	value *User2
	isSet bool
}

func (v NullableUser2) Get() *User2 {
	return v.value
}

func (v *NullableUser2) Set(val *User2) {
	v.value = val
	v.isSet = true
}

func (v NullableUser2) IsSet() bool {
	return v.isSet
}

func (v *NullableUser2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser2(val *User2) *NullableUser2 {
	return &NullableUser2{value: val, isSet: true}
}

func (v NullableUser2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


