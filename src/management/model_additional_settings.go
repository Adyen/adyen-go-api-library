/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// AdditionalSettings struct for AdditionalSettings
type AdditionalSettings struct {
	// Object containing list of event codes for which the notifcation will be sent. 
	IncludeEventCodes []string `json:"includeEventCodes,omitempty"`
	// Object containing boolean key-value pairs. The key can be any [standard webhook additional setting](https://docs.adyen.com/development-resources/webhooks/additional-settings), and the value indicates if the setting is enabled. For example, `captureDelayHours`: **true** means the standard notifications you get will contain the number of hours remaining until the payment will be captured.
	Properties *map[string]bool `json:"properties,omitempty"`
}

// NewAdditionalSettings instantiates a new AdditionalSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdditionalSettings() *AdditionalSettings {
	this := AdditionalSettings{}
	return &this
}

// NewAdditionalSettingsWithDefaults instantiates a new AdditionalSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdditionalSettingsWithDefaults() *AdditionalSettings {
	this := AdditionalSettings{}
	return &this
}

// GetIncludeEventCodes returns the IncludeEventCodes field value if set, zero value otherwise.
func (o *AdditionalSettings) GetIncludeEventCodes() []string {
	if o == nil || isNil(o.IncludeEventCodes) {
		var ret []string
		return ret
	}
	return o.IncludeEventCodes
}

// GetIncludeEventCodesOk returns a tuple with the IncludeEventCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalSettings) GetIncludeEventCodesOk() ([]string, bool) {
	if o == nil || isNil(o.IncludeEventCodes) {
		return nil, false
	}
	return o.IncludeEventCodes, true
}

// HasIncludeEventCodes returns a boolean if a field has been set.
func (o *AdditionalSettings) HasIncludeEventCodes() bool {
	if o != nil && !isNil(o.IncludeEventCodes) {
		return true
	}

	return false
}

// SetIncludeEventCodes gets a reference to the given []string and assigns it to the IncludeEventCodes field.
func (o *AdditionalSettings) SetIncludeEventCodes(v []string) {
	o.IncludeEventCodes = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *AdditionalSettings) GetProperties() map[string]bool {
	if o == nil || isNil(o.Properties) {
		var ret map[string]bool
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalSettings) GetPropertiesOk() (*map[string]bool, bool) {
	if o == nil || isNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *AdditionalSettings) HasProperties() bool {
	if o != nil && !isNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]bool and assigns it to the Properties field.
func (o *AdditionalSettings) SetProperties(v map[string]bool) {
	o.Properties = &v
}

func (o AdditionalSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IncludeEventCodes) {
		toSerialize["includeEventCodes"] = o.IncludeEventCodes
	}
	if !isNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return json.Marshal(toSerialize)
}

type NullableAdditionalSettings struct {
	value *AdditionalSettings
	isSet bool
}

func (v NullableAdditionalSettings) Get() *AdditionalSettings {
	return v.value
}

func (v *NullableAdditionalSettings) Set(val *AdditionalSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAdditionalSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAdditionalSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdditionalSettings(val *AdditionalSettings) *NullableAdditionalSettings {
	return &NullableAdditionalSettings{value: val, isSet: true}
}

func (v NullableAdditionalSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdditionalSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


