/*
Management API

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v21/src/common"
)

// checks if the SubMerchantData type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &SubMerchantData{}

// SubMerchantData struct for SubMerchantData
type SubMerchantData struct {
	// The email associated with the sub-merchant's account.
	Email string `json:"email"`
	// A unique identifier that you create for the sub-merchant, used by schemes to identify the sub-merchant. * Format: Alphanumeric * Maximum length: 15 characters
	Id string `json:"id"`
	// The sub-merchant's 4-digit Merchant Category Code (MCC). * Format: Numeric * Fixed length: 4 digits
	Mcc string `json:"mcc"`
	// The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement that will appear in the card statement. * Format: Alphanumeric * Maximum length: 22 characters
	Name string `json:"name"`
}

// NewSubMerchantData instantiates a new SubMerchantData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubMerchantData(email string, id string, mcc string, name string) *SubMerchantData {
	this := SubMerchantData{}
	this.Email = email
	this.Id = id
	this.Mcc = mcc
	this.Name = name
	return &this
}

// NewSubMerchantDataWithDefaults instantiates a new SubMerchantData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubMerchantDataWithDefaults() *SubMerchantData {
	this := SubMerchantData{}
	return &this
}

// GetEmail returns the Email field value
func (o *SubMerchantData) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *SubMerchantData) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *SubMerchantData) SetEmail(v string) {
	o.Email = v
}

// GetId returns the Id field value
func (o *SubMerchantData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SubMerchantData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SubMerchantData) SetId(v string) {
	o.Id = v
}

// GetMcc returns the Mcc field value
func (o *SubMerchantData) GetMcc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mcc
}

// GetMccOk returns a tuple with the Mcc field value
// and a boolean to check if the value has been set.
func (o *SubMerchantData) GetMccOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mcc, true
}

// SetMcc sets field value
func (o *SubMerchantData) SetMcc(v string) {
	o.Mcc = v
}

// GetName returns the Name field value
func (o *SubMerchantData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SubMerchantData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SubMerchantData) SetName(v string) {
	o.Name = v
}

func (o SubMerchantData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubMerchantData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["id"] = o.Id
	toSerialize["mcc"] = o.Mcc
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableSubMerchantData struct {
	value *SubMerchantData
	isSet bool
}

func (v NullableSubMerchantData) Get() *SubMerchantData {
	return v.value
}

func (v *NullableSubMerchantData) Set(val *SubMerchantData) {
	v.value = val
	v.isSet = true
}

func (v NullableSubMerchantData) IsSet() bool {
	return v.isSet
}

func (v *NullableSubMerchantData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubMerchantData(val *SubMerchantData) *NullableSubMerchantData {
	return &NullableSubMerchantData{value: val, isSet: true}
}

func (v NullableSubMerchantData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubMerchantData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
