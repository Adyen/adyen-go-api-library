/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// MealVoucherFRInfo struct for MealVoucherFRInfo
type MealVoucherFRInfo struct {
	// Meal Voucher conecsId. Format: digits only
	ConecsId string `json:"conecsId"`
	// Meal Voucher siret. Format: 14 digits.
	Siret string `json:"siret"`
	// The list of additional payment methods
	SubTypes []string `json:"subTypes,omitempty"`
}

// NewMealVoucherFRInfo instantiates a new MealVoucherFRInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMealVoucherFRInfo(conecsId string, siret string) *MealVoucherFRInfo {
	this := MealVoucherFRInfo{}
	this.ConecsId = conecsId
	this.Siret = siret
	return &this
}

// NewMealVoucherFRInfoWithDefaults instantiates a new MealVoucherFRInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMealVoucherFRInfoWithDefaults() *MealVoucherFRInfo {
	this := MealVoucherFRInfo{}
	return &this
}

// GetConecsId returns the ConecsId field value
func (o *MealVoucherFRInfo) GetConecsId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConecsId
}

// GetConecsIdOk returns a tuple with the ConecsId field value
// and a boolean to check if the value has been set.
func (o *MealVoucherFRInfo) GetConecsIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConecsId, true
}

// SetConecsId sets field value
func (o *MealVoucherFRInfo) SetConecsId(v string) {
	o.ConecsId = v
}

// GetSiret returns the Siret field value
func (o *MealVoucherFRInfo) GetSiret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Siret
}

// GetSiretOk returns a tuple with the Siret field value
// and a boolean to check if the value has been set.
func (o *MealVoucherFRInfo) GetSiretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Siret, true
}

// SetSiret sets field value
func (o *MealVoucherFRInfo) SetSiret(v string) {
	o.Siret = v
}

// GetSubTypes returns the SubTypes field value if set, zero value otherwise.
func (o *MealVoucherFRInfo) GetSubTypes() []string {
	if o == nil || isNil(o.SubTypes) {
		var ret []string
		return ret
	}
	return o.SubTypes
}

// GetSubTypesOk returns a tuple with the SubTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MealVoucherFRInfo) GetSubTypesOk() ([]string, bool) {
	if o == nil || isNil(o.SubTypes) {
		return nil, false
	}
	return o.SubTypes, true
}

// HasSubTypes returns a boolean if a field has been set.
func (o *MealVoucherFRInfo) HasSubTypes() bool {
	if o != nil && !isNil(o.SubTypes) {
		return true
	}

	return false
}

// SetSubTypes gets a reference to the given []string and assigns it to the SubTypes field.
func (o *MealVoucherFRInfo) SetSubTypes(v []string) {
	o.SubTypes = v
}

func (o MealVoucherFRInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["conecsId"] = o.ConecsId
	}
	if true {
		toSerialize["siret"] = o.Siret
	}
	if !isNil(o.SubTypes) {
		toSerialize["subTypes"] = o.SubTypes
	}
	return json.Marshal(toSerialize)
}

type NullableMealVoucherFRInfo struct {
	value *MealVoucherFRInfo
	isSet bool
}

func (v NullableMealVoucherFRInfo) Get() *MealVoucherFRInfo {
	return v.value
}

func (v *NullableMealVoucherFRInfo) Set(val *MealVoucherFRInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMealVoucherFRInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMealVoucherFRInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMealVoucherFRInfo(val *MealVoucherFRInfo) *NullableMealVoucherFRInfo {
	return &NullableMealVoucherFRInfo{value: val, isSet: true}
}

func (v NullableMealVoucherFRInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMealVoucherFRInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


