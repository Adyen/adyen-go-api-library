/*
Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"context"
	"encoding/json"
	"io/ioutil"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// TerminalOrdersMerchantLevelApi TerminalOrdersMerchantLevelApi service
type TerminalOrdersMerchantLevelApi common.Service

type TerminalOrdersMerchantLevelApiCancelOrderConfig struct {
	ctx        context.Context
	merchantId string
	orderId    string
}

/*
CancelOrder Cancel an order

Cancels the terminal products order identified in the path.
Cancelling is only possible while the order has the status **Placed**.
To cancel an order, make a POST call without a request body. The response returns the full order details, but with the status changed to **Cancelled**.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Terminal ordering read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param orderId The unique identifier of the order.
	@return TerminalOrdersMerchantLevelApiCancelOrderConfig
*/
func (a *TerminalOrdersMerchantLevelApi) CancelOrderConfig(ctx context.Context, merchantId string, orderId string) TerminalOrdersMerchantLevelApiCancelOrderConfig {
	return TerminalOrdersMerchantLevelApiCancelOrderConfig{
		ctx:        ctx,
		merchantId: merchantId,
		orderId:    orderId,
	}
}

/*
Cancel an order
Cancels the terminal products order identified in the path. Cancelling is only possible while the order has the status **Placed**. To cancel an order, make a POST call without a request body. The response returns the full order details, but with the status changed to **Cancelled**.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param orderId The unique identifier of the order.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return TerminalOrder
*/

func (a *TerminalOrdersMerchantLevelApi) CancelOrder(r TerminalOrdersMerchantLevelApiCancelOrderConfig) (TerminalOrder, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &TerminalOrder{}
	path := "/merchants/{merchantId}/terminalOrders/{orderId}/cancel"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"orderId"+"}", url.PathEscape(common.ParameterValueToString(r.orderId, "orderId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type TerminalOrdersMerchantLevelApiCreateOrderConfig struct {
	ctx                  context.Context
	merchantId           string
	terminalOrderRequest *TerminalOrderRequest
}

func (r TerminalOrdersMerchantLevelApiCreateOrderConfig) TerminalOrderRequest(terminalOrderRequest TerminalOrderRequest) TerminalOrdersMerchantLevelApiCreateOrderConfig {
	r.terminalOrderRequest = &terminalOrderRequest
	return r
}

/*
CreateOrder Create an order

Creates an order for payment terminal products for the merchant account identified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Terminal ordering read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@return TerminalOrdersMerchantLevelApiCreateOrderConfig
*/
func (a *TerminalOrdersMerchantLevelApi) CreateOrderConfig(ctx context.Context, merchantId string) TerminalOrdersMerchantLevelApiCreateOrderConfig {
	return TerminalOrdersMerchantLevelApiCreateOrderConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Create an order
Creates an order for payment terminal products for the merchant account identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param req TerminalOrderRequest - reference of TerminalOrderRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return TerminalOrder
*/

func (a *TerminalOrdersMerchantLevelApi) CreateOrder(r TerminalOrdersMerchantLevelApiCreateOrderConfig) (TerminalOrder, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &TerminalOrder{}
	path := "/merchants/{merchantId}/terminalOrders"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.terminalOrderRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type TerminalOrdersMerchantLevelApiCreateShippingLocationConfig struct {
	ctx              context.Context
	merchantId       string
	shippingLocation *ShippingLocation
}

func (r TerminalOrdersMerchantLevelApiCreateShippingLocationConfig) ShippingLocation(shippingLocation ShippingLocation) TerminalOrdersMerchantLevelApiCreateShippingLocationConfig {
	r.shippingLocation = &shippingLocation
	return r
}

/*
CreateShippingLocation Create a shipping location

Creates a shipping location for the merchant account identified in the path. A shipping location defines an address where orders can be shipped to.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Terminal ordering read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@return TerminalOrdersMerchantLevelApiCreateShippingLocationConfig
*/
func (a *TerminalOrdersMerchantLevelApi) CreateShippingLocationConfig(ctx context.Context, merchantId string) TerminalOrdersMerchantLevelApiCreateShippingLocationConfig {
	return TerminalOrdersMerchantLevelApiCreateShippingLocationConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Create a shipping location
Creates a shipping location for the merchant account identified in the path. A shipping location defines an address where orders can be shipped to.   To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param req ShippingLocation - reference of ShippingLocation).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ShippingLocation
*/

func (a *TerminalOrdersMerchantLevelApi) CreateShippingLocation(r TerminalOrdersMerchantLevelApiCreateShippingLocationConfig) (ShippingLocation, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &ShippingLocation{}
	path := "/merchants/{merchantId}/shippingLocations"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.shippingLocation,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type TerminalOrdersMerchantLevelApiGetOrderConfig struct {
	ctx        context.Context
	merchantId string
	orderId    string
}

/*
GetOrder Get an order

Returns the details of the terminal products order identified in the path.

To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Terminal ordering read
* Management API—Terminal ordering read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param orderId The unique identifier of the order.
	@return TerminalOrdersMerchantLevelApiGetOrderConfig
*/
func (a *TerminalOrdersMerchantLevelApi) GetOrderConfig(ctx context.Context, merchantId string, orderId string) TerminalOrdersMerchantLevelApiGetOrderConfig {
	return TerminalOrdersMerchantLevelApiGetOrderConfig{
		ctx:        ctx,
		merchantId: merchantId,
		orderId:    orderId,
	}
}

/*
Get an order
Returns the details of the terminal products order identified in the path.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param orderId The unique identifier of the order.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return TerminalOrder
*/

func (a *TerminalOrdersMerchantLevelApi) GetOrder(r TerminalOrdersMerchantLevelApiGetOrderConfig) (TerminalOrder, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &TerminalOrder{}
	path := "/merchants/{merchantId}/terminalOrders/{orderId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"orderId"+"}", url.PathEscape(common.ParameterValueToString(r.orderId, "orderId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type TerminalOrdersMerchantLevelApiListBillingEntitiesConfig struct {
	ctx        context.Context
	merchantId string
	name       *string
}

// The name of the billing entity.
func (r TerminalOrdersMerchantLevelApiListBillingEntitiesConfig) Name(name string) TerminalOrdersMerchantLevelApiListBillingEntitiesConfig {
	r.name = &name
	return r
}

/*
ListBillingEntities Get a list of billing entities

Returns the billing entities of the merchant account identified in the path.
A billing entity is a legal entity where we charge orders to. An order for terminal products must contain the ID of a billing entity.

To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Terminal ordering read
* Management API—Terminal ordering read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@return TerminalOrdersMerchantLevelApiListBillingEntitiesConfig
*/
func (a *TerminalOrdersMerchantLevelApi) ListBillingEntitiesConfig(ctx context.Context, merchantId string) TerminalOrdersMerchantLevelApiListBillingEntitiesConfig {
	return TerminalOrdersMerchantLevelApiListBillingEntitiesConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Get a list of billing entities
Returns the billing entities of the merchant account identified in the path. A billing entity is a legal entity where we charge orders to. An order for terminal products must contain the ID of a billing entity.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return BillingEntitiesResponse
*/

func (a *TerminalOrdersMerchantLevelApi) ListBillingEntities(r TerminalOrdersMerchantLevelApiListBillingEntitiesConfig) (BillingEntitiesResponse, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &BillingEntitiesResponse{}
	path := "/merchants/{merchantId}/billingEntities"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.name != nil {
		common.ParameterAddToQuery(queryParams, "name", r.name, "")
	}
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type TerminalOrdersMerchantLevelApiListOrdersConfig struct {
	ctx                    context.Context
	merchantId             string
	customerOrderReference *string
	status                 *string
	offset                 *int32
	limit                  *int32
}

// Your purchase order number.
func (r TerminalOrdersMerchantLevelApiListOrdersConfig) CustomerOrderReference(customerOrderReference string) TerminalOrdersMerchantLevelApiListOrdersConfig {
	r.customerOrderReference = &customerOrderReference
	return r
}

// The order status. Possible values (not case-sensitive): Placed, Confirmed, Cancelled, Shipped, Delivered.
func (r TerminalOrdersMerchantLevelApiListOrdersConfig) Status(status string) TerminalOrdersMerchantLevelApiListOrdersConfig {
	r.status = &status
	return r
}

// The number of orders to skip.
func (r TerminalOrdersMerchantLevelApiListOrdersConfig) Offset(offset int32) TerminalOrdersMerchantLevelApiListOrdersConfig {
	r.offset = &offset
	return r
}

// The number of orders to return.
func (r TerminalOrdersMerchantLevelApiListOrdersConfig) Limit(limit int32) TerminalOrdersMerchantLevelApiListOrdersConfig {
	r.limit = &limit
	return r
}

/*
ListOrders Get a list of orders

Returns a list of terminal products orders for the merchant account identified in the path.

To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Terminal ordering read
* Management API—Terminal ordering read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId
	@return TerminalOrdersMerchantLevelApiListOrdersConfig
*/
func (a *TerminalOrdersMerchantLevelApi) ListOrdersConfig(ctx context.Context, merchantId string) TerminalOrdersMerchantLevelApiListOrdersConfig {
	return TerminalOrdersMerchantLevelApiListOrdersConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Get a list of orders
Returns a list of terminal products orders for the merchant account identified in the path.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
 * @param merchantId
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return TerminalOrdersResponse
*/

func (a *TerminalOrdersMerchantLevelApi) ListOrders(r TerminalOrdersMerchantLevelApiListOrdersConfig) (TerminalOrdersResponse, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &TerminalOrdersResponse{}
	path := "/merchants/{merchantId}/terminalOrders"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.customerOrderReference != nil {
		common.ParameterAddToQuery(queryParams, "customerOrderReference", r.customerOrderReference, "")
	}
	if r.status != nil {
		common.ParameterAddToQuery(queryParams, "status", r.status, "")
	}
	if r.offset != nil {
		common.ParameterAddToQuery(queryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		common.ParameterAddToQuery(queryParams, "limit", r.limit, "")
	}
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type TerminalOrdersMerchantLevelApiListShippingLocationsConfig struct {
	ctx        context.Context
	merchantId string
	name       *string
	offset     *int32
	limit      *int32
}

// The name of the shipping location.
func (r TerminalOrdersMerchantLevelApiListShippingLocationsConfig) Name(name string) TerminalOrdersMerchantLevelApiListShippingLocationsConfig {
	r.name = &name
	return r
}

// The number of locations to skip.
func (r TerminalOrdersMerchantLevelApiListShippingLocationsConfig) Offset(offset int32) TerminalOrdersMerchantLevelApiListShippingLocationsConfig {
	r.offset = &offset
	return r
}

// The number of locations to return.
func (r TerminalOrdersMerchantLevelApiListShippingLocationsConfig) Limit(limit int32) TerminalOrdersMerchantLevelApiListShippingLocationsConfig {
	r.limit = &limit
	return r
}

/*
ListShippingLocations Get a list of shipping locations

Returns the shipping locations for the merchant account identified in the path.
A shipping location includes the address where orders can be delivered, and an ID which you need to specify when ordering terminal products.

To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Terminal ordering read
* Management API—Terminal ordering read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@return TerminalOrdersMerchantLevelApiListShippingLocationsConfig
*/
func (a *TerminalOrdersMerchantLevelApi) ListShippingLocationsConfig(ctx context.Context, merchantId string) TerminalOrdersMerchantLevelApiListShippingLocationsConfig {
	return TerminalOrdersMerchantLevelApiListShippingLocationsConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Get a list of shipping locations
Returns the shipping locations for the merchant account identified in the path. A shipping location includes the address where orders can be delivered, and an ID which you need to specify when ordering terminal products.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ShippingLocationsResponse
*/

func (a *TerminalOrdersMerchantLevelApi) ListShippingLocations(r TerminalOrdersMerchantLevelApiListShippingLocationsConfig) (ShippingLocationsResponse, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &ShippingLocationsResponse{}
	path := "/merchants/{merchantId}/shippingLocations"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.name != nil {
		common.ParameterAddToQuery(queryParams, "name", r.name, "")
	}
	if r.offset != nil {
		common.ParameterAddToQuery(queryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		common.ParameterAddToQuery(queryParams, "limit", r.limit, "")
	}
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type TerminalOrdersMerchantLevelApiListTerminalModelsConfig struct {
	ctx        context.Context
	merchantId string
}

/*
ListTerminalModels Get a list of terminal models

Returns the payment terminal models that merchant account identified in the path has access to. The response includes the terminal model ID, which can be used as a query parameter when getting a list of terminals or a list of products for ordering.

To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Terminal ordering read
* Management API—Terminal ordering read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@return TerminalOrdersMerchantLevelApiListTerminalModelsConfig
*/
func (a *TerminalOrdersMerchantLevelApi) ListTerminalModelsConfig(ctx context.Context, merchantId string) TerminalOrdersMerchantLevelApiListTerminalModelsConfig {
	return TerminalOrdersMerchantLevelApiListTerminalModelsConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Get a list of terminal models
Returns the payment terminal models that merchant account identified in the path has access to. The response includes the terminal model ID, which can be used as a query parameter when getting a list of terminals or a list of products for ordering.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return TerminalModelsResponse
*/

func (a *TerminalOrdersMerchantLevelApi) ListTerminalModels(r TerminalOrdersMerchantLevelApiListTerminalModelsConfig) (TerminalModelsResponse, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &TerminalModelsResponse{}
	path := "/merchants/{merchantId}/terminalModels"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type TerminalOrdersMerchantLevelApiListTerminalProductsConfig struct {
	ctx             context.Context
	merchantId      string
	country         *string
	terminalModelId *string
	offset          *int32
	limit           *int32
}

// The country to return products for, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **US**
func (r TerminalOrdersMerchantLevelApiListTerminalProductsConfig) Country(country string) TerminalOrdersMerchantLevelApiListTerminalProductsConfig {
	r.country = &country
	return r
}

// The terminal model to return products for. Use the ID returned in the [GET &#x60;/terminalModels&#x60;](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/merchants/{merchantId}/terminalModels) response. For example, **Verifone.M400**
func (r TerminalOrdersMerchantLevelApiListTerminalProductsConfig) TerminalModelId(terminalModelId string) TerminalOrdersMerchantLevelApiListTerminalProductsConfig {
	r.terminalModelId = &terminalModelId
	return r
}

// The number of products to skip.
func (r TerminalOrdersMerchantLevelApiListTerminalProductsConfig) Offset(offset int32) TerminalOrdersMerchantLevelApiListTerminalProductsConfig {
	r.offset = &offset
	return r
}

// The number of products to return.
func (r TerminalOrdersMerchantLevelApiListTerminalProductsConfig) Limit(limit int32) TerminalOrdersMerchantLevelApiListTerminalProductsConfig {
	r.limit = &limit
	return r
}

/*
ListTerminalProducts Get a list of terminal products

Returns a country-specific list of payment terminal packages and parts that the merchant account identified in the path has access to.

To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Terminal ordering read
* Management API—Terminal ordering read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@return TerminalOrdersMerchantLevelApiListTerminalProductsConfig
*/
func (a *TerminalOrdersMerchantLevelApi) ListTerminalProductsConfig(ctx context.Context, merchantId string) TerminalOrdersMerchantLevelApiListTerminalProductsConfig {
	return TerminalOrdersMerchantLevelApiListTerminalProductsConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Get a list of terminal products
Returns a country-specific list of payment terminal packages and parts that the merchant account identified in the path has access to.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return TerminalProductsResponse
*/

func (a *TerminalOrdersMerchantLevelApi) ListTerminalProducts(r TerminalOrdersMerchantLevelApiListTerminalProductsConfig) (TerminalProductsResponse, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &TerminalProductsResponse{}
	path := "/merchants/{merchantId}/terminalProducts"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.country != nil {
		common.ParameterAddToQuery(queryParams, "country", r.country, "")
	}
	if r.terminalModelId != nil {
		common.ParameterAddToQuery(queryParams, "terminalModelId", r.terminalModelId, "")
	}
	if r.offset != nil {
		common.ParameterAddToQuery(queryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		common.ParameterAddToQuery(queryParams, "limit", r.limit, "")
	}
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type TerminalOrdersMerchantLevelApiUpdateOrderConfig struct {
	ctx                  context.Context
	merchantId           string
	orderId              string
	terminalOrderRequest *TerminalOrderRequest
}

func (r TerminalOrdersMerchantLevelApiUpdateOrderConfig) TerminalOrderRequest(terminalOrderRequest TerminalOrderRequest) TerminalOrdersMerchantLevelApiUpdateOrderConfig {
	r.terminalOrderRequest = &terminalOrderRequest
	return r
}

/*
UpdateOrder Update an order

Updates the terminal products order identified in the path.
Updating is only possible while the order has the status **Placed**.

The request body only needs to contain what you want to change.
However, to update the products in the `items` array, you must provice the entire array. For example, if the array has three items:

	To remove one item, the array must include the remaining two items. Or to add one item, the array must include all four items.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Terminal ordering read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param orderId The unique identifier of the order.
	@return TerminalOrdersMerchantLevelApiUpdateOrderConfig
*/
func (a *TerminalOrdersMerchantLevelApi) UpdateOrderConfig(ctx context.Context, merchantId string, orderId string) TerminalOrdersMerchantLevelApiUpdateOrderConfig {
	return TerminalOrdersMerchantLevelApiUpdateOrderConfig{
		ctx:        ctx,
		merchantId: merchantId,
		orderId:    orderId,
	}
}

/*
Update an order
Updates the terminal products order identified in the path. Updating is only possible while the order has the status **Placed**.  The request body only needs to contain what you want to change.  However, to update the products in the &#x60;items&#x60; array, you must provice the entire array. For example, if the array has three items:  To remove one item, the array must include the remaining two items. Or to add one item, the array must include all four items.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param orderId The unique identifier of the order.
 * @param req TerminalOrderRequest - reference of TerminalOrderRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return TerminalOrder
*/

func (a *TerminalOrdersMerchantLevelApi) UpdateOrder(r TerminalOrdersMerchantLevelApiUpdateOrderConfig) (TerminalOrder, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &TerminalOrder{}
	path := "/merchants/{merchantId}/terminalOrders/{orderId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"orderId"+"}", url.PathEscape(common.ParameterValueToString(r.orderId, "orderId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.terminalOrderRequest,
		res,
		_nethttp.MethodPatch,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}
