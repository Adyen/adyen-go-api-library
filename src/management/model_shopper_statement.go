/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// ShopperStatement struct for ShopperStatement
type ShopperStatement struct {
	// The name you want to be shown on the shopper's bank or credit card statement. Maximum length: 22 characters; can't be all numbers.
	DoingBusinessAsName string `json:"doingBusinessAsName"`
	// The type of shopperstatement you want to use: fixed, append or dynamic
	Type *string `json:"type,omitempty"`
}

// NewShopperStatement instantiates a new ShopperStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShopperStatement(doingBusinessAsName string) *ShopperStatement {
	this := ShopperStatement{}
	this.DoingBusinessAsName = doingBusinessAsName
	return &this
}

// NewShopperStatementWithDefaults instantiates a new ShopperStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShopperStatementWithDefaults() *ShopperStatement {
	this := ShopperStatement{}
	return &this
}

// GetDoingBusinessAsName returns the DoingBusinessAsName field value
func (o *ShopperStatement) GetDoingBusinessAsName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DoingBusinessAsName
}

// GetDoingBusinessAsNameOk returns a tuple with the DoingBusinessAsName field value
// and a boolean to check if the value has been set.
func (o *ShopperStatement) GetDoingBusinessAsNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DoingBusinessAsName, true
}

// SetDoingBusinessAsName sets field value
func (o *ShopperStatement) SetDoingBusinessAsName(v string) {
	o.DoingBusinessAsName = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ShopperStatement) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopperStatement) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ShopperStatement) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ShopperStatement) SetType(v string) {
	o.Type = &v
}

func (o ShopperStatement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["doingBusinessAsName"] = o.DoingBusinessAsName
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableShopperStatement struct {
	value *ShopperStatement
	isSet bool
}

func (v NullableShopperStatement) Get() *ShopperStatement {
	return v.value
}

func (v *NullableShopperStatement) Set(val *ShopperStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableShopperStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableShopperStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShopperStatement(val *ShopperStatement) *NullableShopperStatement {
	return &NullableShopperStatement{value: val, isSet: true}
}

func (v NullableShopperStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShopperStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


