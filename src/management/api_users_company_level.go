/*
Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"context"
	"encoding/json"
	"io/ioutil"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v6/src/common"
)

// UsersCompanyLevelApi UsersCompanyLevelApi service
type UsersCompanyLevelApi common.Service

type UsersCompanyLevelApiCreateNewUserConfig struct {
	ctx                      context.Context
	companyId                string
	createCompanyUserRequest *CreateCompanyUserRequest
}

func (r UsersCompanyLevelApiCreateNewUserConfig) CreateCompanyUserRequest(createCompanyUserRequest CreateCompanyUserRequest) UsersCompanyLevelApiCreateNewUserConfig {
	r.createCompanyUserRequest = &createCompanyUserRequest
	return r
}

/*
CreateNewUser Create a new user

Creates the user for the `companyId` identified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Users read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param companyId The unique identifier of the company account.
	@return UsersCompanyLevelApiCreateNewUserConfig
*/
func (a *UsersCompanyLevelApi) CreateNewUserConfig(ctx context.Context, companyId string) UsersCompanyLevelApiCreateNewUserConfig {
	return UsersCompanyLevelApiCreateNewUserConfig{
		ctx:       ctx,
		companyId: companyId,
	}
}

/*
Create a new user
Creates the user for the &#x60;companyId&#x60; identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Users read and write
 * @param companyId The unique identifier of the company account.
 * @param req CreateCompanyUserRequest - reference of CreateCompanyUserRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CreateCompanyUserResponse
*/

func (a *UsersCompanyLevelApi) CreateNewUser(r UsersCompanyLevelApiCreateNewUserConfig) (CreateCompanyUserResponse, *_nethttp.Response, RestServiceError) {
	var v RestServiceError
	res := &CreateCompanyUserResponse{}
	path := "/companies/{companyId}/users"
	path = strings.Replace(path, "{"+"companyId"+"}", url.PathEscape(common.ParameterValueToString(r.companyId, "companyId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, _ := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.createCompanyUserRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}
	return *res, httpRes, v
}

type UsersCompanyLevelApiGetUserDetailsConfig struct {
	ctx       context.Context
	companyId string
	userId    string
}

/*
GetUserDetails Get user details

Returns user details for the `userId` and the `companyId` identified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Users read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param companyId The unique identifier of the company account.
	@param userId The unique identifier of the user.
	@return UsersCompanyLevelApiGetUserDetailsConfig
*/
func (a *UsersCompanyLevelApi) GetUserDetailsConfig(ctx context.Context, companyId string, userId string) UsersCompanyLevelApiGetUserDetailsConfig {
	return UsersCompanyLevelApiGetUserDetailsConfig{
		ctx:       ctx,
		companyId: companyId,
		userId:    userId,
	}
}

/*
Get user details
Returns user details for the &#x60;userId&#x60; and the &#x60;companyId&#x60; identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Users read and write
 * @param companyId The unique identifier of the company account.
 * @param userId The unique identifier of the user.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CompanyUser
*/

func (a *UsersCompanyLevelApi) GetUserDetails(r UsersCompanyLevelApiGetUserDetailsConfig) (CompanyUser, *_nethttp.Response, RestServiceError) {
	var v RestServiceError
	res := &CompanyUser{}
	path := "/companies/{companyId}/users/{userId}"
	path = strings.Replace(path, "{"+"companyId"+"}", url.PathEscape(common.ParameterValueToString(r.companyId, "companyId")), -1)
	path = strings.Replace(path, "{"+"userId"+"}", url.PathEscape(common.ParameterValueToString(r.userId, "userId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, _ := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}
	return *res, httpRes, v
}

type UsersCompanyLevelApiListUsersConfig struct {
	ctx        context.Context
	companyId  string
	pageNumber *int32
	pageSize   *int32
	username   *string
}

// The number of the page to return.
func (r UsersCompanyLevelApiListUsersConfig) PageNumber(pageNumber int32) UsersCompanyLevelApiListUsersConfig {
	r.pageNumber = &pageNumber
	return r
}

// The number of items to have on a page. Maximum value is **100**. The default is **10** items on a page.
func (r UsersCompanyLevelApiListUsersConfig) PageSize(pageSize int32) UsersCompanyLevelApiListUsersConfig {
	r.pageSize = &pageSize
	return r
}

// The partial or complete username to select all users that match.
func (r UsersCompanyLevelApiListUsersConfig) Username(username string) UsersCompanyLevelApiListUsersConfig {
	r.username = &username
	return r
}

/*
ListUsers Get a list of users

Returns the list of users for the `companyId` identified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Users read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param companyId The unique identifier of the company account.
	@return UsersCompanyLevelApiListUsersConfig
*/
func (a *UsersCompanyLevelApi) ListUsersConfig(ctx context.Context, companyId string) UsersCompanyLevelApiListUsersConfig {
	return UsersCompanyLevelApiListUsersConfig{
		ctx:       ctx,
		companyId: companyId,
	}
}

/*
Get a list of users
Returns the list of users for the &#x60;companyId&#x60; identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Users read and write
 * @param companyId The unique identifier of the company account.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ListCompanyUsersResponse
*/

func (a *UsersCompanyLevelApi) ListUsers(r UsersCompanyLevelApiListUsersConfig) (ListCompanyUsersResponse, *_nethttp.Response, RestServiceError) {
	var v RestServiceError
	res := &ListCompanyUsersResponse{}
	path := "/companies/{companyId}/users"
	path = strings.Replace(path, "{"+"companyId"+"}", url.PathEscape(common.ParameterValueToString(r.companyId, "companyId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.pageNumber != nil {
		common.ParameterAddToQuery(queryParams, "pageNumber", r.pageNumber, "")
	}
	if r.pageSize != nil {
		common.ParameterAddToQuery(queryParams, "pageSize", r.pageSize, "")
	}
	if r.username != nil {
		common.ParameterAddToQuery(queryParams, "username", r.username, "")
	}
	httpRes, _ := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}
	return *res, httpRes, v
}

type UsersCompanyLevelApiUpdateUserDetailsConfig struct {
	ctx                      context.Context
	companyId                string
	userId                   string
	updateCompanyUserRequest *UpdateCompanyUserRequest
}

func (r UsersCompanyLevelApiUpdateUserDetailsConfig) UpdateCompanyUserRequest(updateCompanyUserRequest UpdateCompanyUserRequest) UsersCompanyLevelApiUpdateUserDetailsConfig {
	r.updateCompanyUserRequest = &updateCompanyUserRequest
	return r
}

/*
UpdateUserDetails Update user details

Updates user details for the `userId` and the `companyId` identified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Users read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param companyId The unique identifier of the company account.
	@param userId The unique identifier of the user.
	@return UsersCompanyLevelApiUpdateUserDetailsConfig
*/
func (a *UsersCompanyLevelApi) UpdateUserDetailsConfig(ctx context.Context, companyId string, userId string) UsersCompanyLevelApiUpdateUserDetailsConfig {
	return UsersCompanyLevelApiUpdateUserDetailsConfig{
		ctx:       ctx,
		companyId: companyId,
		userId:    userId,
	}
}

/*
Update user details
Updates user details for the &#x60;userId&#x60; and the &#x60;companyId&#x60; identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Users read and write
 * @param companyId The unique identifier of the company account.
 * @param userId The unique identifier of the user.
 * @param req UpdateCompanyUserRequest - reference of UpdateCompanyUserRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CompanyUser
*/

func (a *UsersCompanyLevelApi) UpdateUserDetails(r UsersCompanyLevelApiUpdateUserDetailsConfig) (CompanyUser, *_nethttp.Response, RestServiceError) {
	var v RestServiceError
	res := &CompanyUser{}
	path := "/companies/{companyId}/users/{userId}"
	path = strings.Replace(path, "{"+"companyId"+"}", url.PathEscape(common.ParameterValueToString(r.companyId, "companyId")), -1)
	path = strings.Replace(path, "{"+"userId"+"}", url.PathEscape(common.ParameterValueToString(r.userId, "userId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, _ := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.updateCompanyUserRequest,
		res,
		_nethttp.MethodPatch,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}
	return *res, httpRes, v
}
