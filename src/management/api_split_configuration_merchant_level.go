/*
Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"context"
	"encoding/json"
	"io/ioutil"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// SplitConfigurationMerchantLevelApi SplitConfigurationMerchantLevelApi service
type SplitConfigurationMerchantLevelApi common.Service

type SplitConfigurationMerchantLevelApiCreateRuleConfig struct {
	ctx                    context.Context
	merchantId             string
	splitConfigurationId   string
	splitConfigurationRule *SplitConfigurationRule
}

func (r SplitConfigurationMerchantLevelApiCreateRuleConfig) SplitConfigurationRule(splitConfigurationRule SplitConfigurationRule) SplitConfigurationMerchantLevelApiCreateRuleConfig {
	r.splitConfigurationRule = &splitConfigurationRule
	return r
}

/*
CreateRule Create a rule

Creates a rule in the split configuration specified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API - SplitConfiguration read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param splitConfigurationId The unique identifier of the split configuration.
	@return SplitConfigurationMerchantLevelApiCreateRuleConfig
*/
func (a *SplitConfigurationMerchantLevelApi) CreateRuleConfig(ctx context.Context, merchantId string, splitConfigurationId string) SplitConfigurationMerchantLevelApiCreateRuleConfig {
	return SplitConfigurationMerchantLevelApiCreateRuleConfig{
		ctx:                  ctx,
		merchantId:           merchantId,
		splitConfigurationId: splitConfigurationId,
	}
}

/*
Create a rule
Creates a rule in the split configuration specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param splitConfigurationId The unique identifier of the split configuration.
 * @param req SplitConfigurationRule - reference of SplitConfigurationRule).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return SplitConfiguration
*/

func (a *SplitConfigurationMerchantLevelApi) CreateRule(r SplitConfigurationMerchantLevelApiCreateRuleConfig) (SplitConfiguration, *_nethttp.Response, error) {
	var serviceError common.RestServiceError
	res := &SplitConfiguration{}
	path := "/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"splitConfigurationId"+"}", url.PathEscape(common.ParameterValueToString(r.splitConfigurationId, "splitConfigurationId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.splitConfigurationRule,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}
	return *res, httpRes, err
}

type SplitConfigurationMerchantLevelApiCreateSplitConfigurationConfig struct {
	ctx                context.Context
	merchantId         string
	splitConfiguration *SplitConfiguration
}

func (r SplitConfigurationMerchantLevelApiCreateSplitConfigurationConfig) SplitConfiguration(splitConfiguration SplitConfiguration) SplitConfigurationMerchantLevelApiCreateSplitConfigurationConfig {
	r.splitConfiguration = &splitConfiguration
	return r
}

/*
CreateSplitConfiguration Create a split configuration

Creates a split configuration for the merchant account specified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API - SplitConfiguration read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@return SplitConfigurationMerchantLevelApiCreateSplitConfigurationConfig
*/
func (a *SplitConfigurationMerchantLevelApi) CreateSplitConfigurationConfig(ctx context.Context, merchantId string) SplitConfigurationMerchantLevelApiCreateSplitConfigurationConfig {
	return SplitConfigurationMerchantLevelApiCreateSplitConfigurationConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Create a split configuration
Creates a split configuration for the merchant account specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param req SplitConfiguration - reference of SplitConfiguration).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return SplitConfiguration
*/

func (a *SplitConfigurationMerchantLevelApi) CreateSplitConfiguration(r SplitConfigurationMerchantLevelApiCreateSplitConfigurationConfig) (SplitConfiguration, *_nethttp.Response, error) {
	var serviceError common.RestServiceError
	res := &SplitConfiguration{}
	path := "/merchants/{merchantId}/splitConfigurations"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.splitConfiguration,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}
	return *res, httpRes, err
}

type SplitConfigurationMerchantLevelApiDeleteSplitConfigurationConfig struct {
	ctx                  context.Context
	merchantId           string
	splitConfigurationId string
}

/*
DeleteSplitConfiguration Delete a split configuration

Deletes the split configuration specified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API - SplitConfiguration read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param splitConfigurationId The unique identifier of the split configuration.
	@return SplitConfigurationMerchantLevelApiDeleteSplitConfigurationConfig
*/
func (a *SplitConfigurationMerchantLevelApi) DeleteSplitConfigurationConfig(ctx context.Context, merchantId string, splitConfigurationId string) SplitConfigurationMerchantLevelApiDeleteSplitConfigurationConfig {
	return SplitConfigurationMerchantLevelApiDeleteSplitConfigurationConfig{
		ctx:                  ctx,
		merchantId:           merchantId,
		splitConfigurationId: splitConfigurationId,
	}
}

/*
Delete a split configuration
Deletes the split configuration specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param splitConfigurationId The unique identifier of the split configuration.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return SplitConfiguration
*/

func (a *SplitConfigurationMerchantLevelApi) DeleteSplitConfiguration(r SplitConfigurationMerchantLevelApiDeleteSplitConfigurationConfig) (SplitConfiguration, *_nethttp.Response, error) {
	var serviceError common.RestServiceError
	res := &SplitConfiguration{}
	path := "/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"splitConfigurationId"+"}", url.PathEscape(common.ParameterValueToString(r.splitConfigurationId, "splitConfigurationId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodDelete,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}
	return *res, httpRes, err
}

type SplitConfigurationMerchantLevelApiGetSplitConfigurationConfig struct {
	ctx                  context.Context
	merchantId           string
	splitConfigurationId string
}

/*
GetSplitConfiguration Get a split configuration

Returns the split configuration specified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API - SplitConfiguration read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param splitConfigurationId The unique identifier of the split configuration.
	@return SplitConfigurationMerchantLevelApiGetSplitConfigurationConfig
*/
func (a *SplitConfigurationMerchantLevelApi) GetSplitConfigurationConfig(ctx context.Context, merchantId string, splitConfigurationId string) SplitConfigurationMerchantLevelApiGetSplitConfigurationConfig {
	return SplitConfigurationMerchantLevelApiGetSplitConfigurationConfig{
		ctx:                  ctx,
		merchantId:           merchantId,
		splitConfigurationId: splitConfigurationId,
	}
}

/*
Get a split configuration
Returns the split configuration specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param splitConfigurationId The unique identifier of the split configuration.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return SplitConfiguration
*/

func (a *SplitConfigurationMerchantLevelApi) GetSplitConfiguration(r SplitConfigurationMerchantLevelApiGetSplitConfigurationConfig) (SplitConfiguration, *_nethttp.Response, error) {
	var serviceError common.RestServiceError
	res := &SplitConfiguration{}
	path := "/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"splitConfigurationId"+"}", url.PathEscape(common.ParameterValueToString(r.splitConfigurationId, "splitConfigurationId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}
	return *res, httpRes, err
}

type SplitConfigurationMerchantLevelApiListSplitConfigurationsConfig struct {
	ctx        context.Context
	merchantId string
}

/*
ListSplitConfigurations Get a list of split configurations

Returns the list of split configurations for the merchant account.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API - SplitConfiguration read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@return SplitConfigurationMerchantLevelApiListSplitConfigurationsConfig
*/
func (a *SplitConfigurationMerchantLevelApi) ListSplitConfigurationsConfig(ctx context.Context, merchantId string) SplitConfigurationMerchantLevelApiListSplitConfigurationsConfig {
	return SplitConfigurationMerchantLevelApiListSplitConfigurationsConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Get a list of split configurations
Returns the list of split configurations for the merchant account.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return SplitConfigurationList
*/

func (a *SplitConfigurationMerchantLevelApi) ListSplitConfigurations(r SplitConfigurationMerchantLevelApiListSplitConfigurationsConfig) (SplitConfigurationList, *_nethttp.Response, error) {
	var serviceError common.RestServiceError
	res := &SplitConfigurationList{}
	path := "/merchants/{merchantId}/splitConfigurations"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}
	return *res, httpRes, err
}

type SplitConfigurationMerchantLevelApiUpdateSplitConditionsConfig struct {
	ctx                                 context.Context
	merchantId                          string
	splitConfigurationId                string
	ruleId                              string
	updateSplitConfigurationRuleRequest *UpdateSplitConfigurationRuleRequest
}

func (r SplitConfigurationMerchantLevelApiUpdateSplitConditionsConfig) UpdateSplitConfigurationRuleRequest(updateSplitConfigurationRuleRequest UpdateSplitConfigurationRuleRequest) SplitConfigurationMerchantLevelApiUpdateSplitConditionsConfig {
	r.updateSplitConfigurationRuleRequest = &updateSplitConfigurationRuleRequest
	return r
}

/*
UpdateSplitConditions Update split conditions

Changes the conditions of the split configuration rule specified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API - SplitConfiguration read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param splitConfigurationId The identifier of the split configuration.
	@param ruleId The unique identifier of the split configuration rule.
	@return SplitConfigurationMerchantLevelApiUpdateSplitConditionsConfig
*/
func (a *SplitConfigurationMerchantLevelApi) UpdateSplitConditionsConfig(ctx context.Context, merchantId string, splitConfigurationId string, ruleId string) SplitConfigurationMerchantLevelApiUpdateSplitConditionsConfig {
	return SplitConfigurationMerchantLevelApiUpdateSplitConditionsConfig{
		ctx:                  ctx,
		merchantId:           merchantId,
		splitConfigurationId: splitConfigurationId,
		ruleId:               ruleId,
	}
}

/*
Update split conditions
Changes the conditions of the split configuration rule specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param splitConfigurationId The identifier of the split configuration.
 * @param ruleId The unique identifier of the split configuration rule.
 * @param req UpdateSplitConfigurationRuleRequest - reference of UpdateSplitConfigurationRuleRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return SplitConfiguration
*/

func (a *SplitConfigurationMerchantLevelApi) UpdateSplitConditions(r SplitConfigurationMerchantLevelApiUpdateSplitConditionsConfig) (SplitConfiguration, *_nethttp.Response, error) {
	var serviceError common.RestServiceError
	res := &SplitConfiguration{}
	path := "/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}/rules/{ruleId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"splitConfigurationId"+"}", url.PathEscape(common.ParameterValueToString(r.splitConfigurationId, "splitConfigurationId")), -1)
	path = strings.Replace(path, "{"+"ruleId"+"}", url.PathEscape(common.ParameterValueToString(r.ruleId, "ruleId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.updateSplitConfigurationRuleRequest,
		res,
		_nethttp.MethodPatch,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}
	return *res, httpRes, err
}

type SplitConfigurationMerchantLevelApiUpdateSplitConfigurationDescriptionConfig struct {
	ctx                             context.Context
	merchantId                      string
	splitConfigurationId            string
	updateSplitConfigurationRequest *UpdateSplitConfigurationRequest
}

func (r SplitConfigurationMerchantLevelApiUpdateSplitConfigurationDescriptionConfig) UpdateSplitConfigurationRequest(updateSplitConfigurationRequest UpdateSplitConfigurationRequest) SplitConfigurationMerchantLevelApiUpdateSplitConfigurationDescriptionConfig {
	r.updateSplitConfigurationRequest = &updateSplitConfigurationRequest
	return r
}

/*
UpdateSplitConfigurationDescription Update split configuration description

Changes the description of the split configuration specified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API - SplitConfiguration read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param splitConfigurationId The unique identifier of the split configuration.
	@return SplitConfigurationMerchantLevelApiUpdateSplitConfigurationDescriptionConfig
*/
func (a *SplitConfigurationMerchantLevelApi) UpdateSplitConfigurationDescriptionConfig(ctx context.Context, merchantId string, splitConfigurationId string) SplitConfigurationMerchantLevelApiUpdateSplitConfigurationDescriptionConfig {
	return SplitConfigurationMerchantLevelApiUpdateSplitConfigurationDescriptionConfig{
		ctx:                  ctx,
		merchantId:           merchantId,
		splitConfigurationId: splitConfigurationId,
	}
}

/*
Update split configuration description
Changes the description of the split configuration specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param splitConfigurationId The unique identifier of the split configuration.
 * @param req UpdateSplitConfigurationRequest - reference of UpdateSplitConfigurationRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return SplitConfiguration
*/

func (a *SplitConfigurationMerchantLevelApi) UpdateSplitConfigurationDescription(r SplitConfigurationMerchantLevelApiUpdateSplitConfigurationDescriptionConfig) (SplitConfiguration, *_nethttp.Response, error) {
	var serviceError common.RestServiceError
	res := &SplitConfiguration{}
	path := "/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"splitConfigurationId"+"}", url.PathEscape(common.ParameterValueToString(r.splitConfigurationId, "splitConfigurationId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.updateSplitConfigurationRequest,
		res,
		_nethttp.MethodPatch,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}
	return *res, httpRes, err
}

type SplitConfigurationMerchantLevelApiUpdateSplitLogicConfig struct {
	ctx                                  context.Context
	merchantId                           string
	splitConfigurationId                 string
	ruleId                               string
	splitLogicId                         string
	updateSplitConfigurationLogicRequest *UpdateSplitConfigurationLogicRequest
}

func (r SplitConfigurationMerchantLevelApiUpdateSplitLogicConfig) UpdateSplitConfigurationLogicRequest(updateSplitConfigurationLogicRequest UpdateSplitConfigurationLogicRequest) SplitConfigurationMerchantLevelApiUpdateSplitLogicConfig {
	r.updateSplitConfigurationLogicRequest = &updateSplitConfigurationLogicRequest
	return r
}

/*
UpdateSplitLogic Update the split logic

Changes the split logic specified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API - SplitConfiguration read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param splitConfigurationId The unique identifier of the split configuration.
	@param ruleId The unique identifier of the split configuration rule.
	@param splitLogicId The unique identifier of the split configuration split.
	@return SplitConfigurationMerchantLevelApiUpdateSplitLogicConfig
*/
func (a *SplitConfigurationMerchantLevelApi) UpdateSplitLogicConfig(ctx context.Context, merchantId string, splitConfigurationId string, ruleId string, splitLogicId string) SplitConfigurationMerchantLevelApiUpdateSplitLogicConfig {
	return SplitConfigurationMerchantLevelApiUpdateSplitLogicConfig{
		ctx:                  ctx,
		merchantId:           merchantId,
		splitConfigurationId: splitConfigurationId,
		ruleId:               ruleId,
		splitLogicId:         splitLogicId,
	}
}

/*
Update the split logic
Changes the split logic specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param splitConfigurationId The unique identifier of the split configuration.
 * @param ruleId The unique identifier of the split configuration rule.
 * @param splitLogicId The unique identifier of the split configuration split.
 * @param req UpdateSplitConfigurationLogicRequest - reference of UpdateSplitConfigurationLogicRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return SplitConfiguration
*/

func (a *SplitConfigurationMerchantLevelApi) UpdateSplitLogic(r SplitConfigurationMerchantLevelApiUpdateSplitLogicConfig) (SplitConfiguration, *_nethttp.Response, error) {
	var serviceError common.RestServiceError
	res := &SplitConfiguration{}
	path := "/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}/rules/{ruleId}/splitLogic/{splitLogicId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"splitConfigurationId"+"}", url.PathEscape(common.ParameterValueToString(r.splitConfigurationId, "splitConfigurationId")), -1)
	path = strings.Replace(path, "{"+"ruleId"+"}", url.PathEscape(common.ParameterValueToString(r.ruleId, "ruleId")), -1)
	path = strings.Replace(path, "{"+"splitLogicId"+"}", url.PathEscape(common.ParameterValueToString(r.splitLogicId, "splitLogicId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.updateSplitConfigurationLogicRequest,
		res,
		_nethttp.MethodPatch,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}
	return *res, httpRes, err
}
