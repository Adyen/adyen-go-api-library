/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// Hardware struct for Hardware
type Hardware struct {
	// The brightness of the display when the terminal is being used, expressed as a percentage.
	DisplayMaximumBackLight *int32 `json:"displayMaximumBackLight,omitempty"`
}

// NewHardware instantiates a new Hardware object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHardware() *Hardware {
	this := Hardware{}
	return &this
}

// NewHardwareWithDefaults instantiates a new Hardware object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHardwareWithDefaults() *Hardware {
	this := Hardware{}
	return &this
}

// GetDisplayMaximumBackLight returns the DisplayMaximumBackLight field value if set, zero value otherwise.
func (o *Hardware) GetDisplayMaximumBackLight() int32 {
	if o == nil || o.DisplayMaximumBackLight == nil {
		var ret int32
		return ret
	}
	return *o.DisplayMaximumBackLight
}

// GetDisplayMaximumBackLightOk returns a tuple with the DisplayMaximumBackLight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hardware) GetDisplayMaximumBackLightOk() (*int32, bool) {
	if o == nil || o.DisplayMaximumBackLight == nil {
		return nil, false
	}
	return o.DisplayMaximumBackLight, true
}

// HasDisplayMaximumBackLight returns a boolean if a field has been set.
func (o *Hardware) HasDisplayMaximumBackLight() bool {
	if o != nil && o.DisplayMaximumBackLight != nil {
		return true
	}

	return false
}

// SetDisplayMaximumBackLight gets a reference to the given int32 and assigns it to the DisplayMaximumBackLight field.
func (o *Hardware) SetDisplayMaximumBackLight(v int32) {
	o.DisplayMaximumBackLight = &v
}

func (o Hardware) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayMaximumBackLight != nil {
		toSerialize["displayMaximumBackLight"] = o.DisplayMaximumBackLight
	}
	return json.Marshal(toSerialize)
}

type NullableHardware struct {
	value *Hardware
	isSet bool
}

func (v NullableHardware) Get() *Hardware {
	return v.value
}

func (v *NullableHardware) Set(val *Hardware) {
	v.value = val
	v.isSet = true
}

func (v NullableHardware) IsSet() bool {
	return v.isSet
}

func (v *NullableHardware) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHardware(val *Hardware) *NullableHardware {
	return &NullableHardware{value: val, isSet: true}
}

func (v NullableHardware) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHardware) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


