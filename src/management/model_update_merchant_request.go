/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// UpdateMerchantRequest struct for UpdateMerchantRequest
type UpdateMerchantRequest struct {
	// Business line ID
	BusinessLineId *string `json:"businessLineId,omitempty"`
	// New time interval between authorising and capturing a payment. Specified in days. Possible values are: - **1** - **2** - **3** - **4** - **5** - **6** - **7** - **immediate** - **manual**
	CaptureDelay *string `json:"captureDelay,omitempty"`
	// New city merchant operates from.
	MerchantCity *string `json:"merchantCity,omitempty"`
	// New name for the merchant.
	Name *string `json:"name,omitempty"`
	// Only applies to merchant accounts managed by Adyen's partners. The name of the pricing plan assigned to the merchant account.
	PricingPlan *string `json:"pricingPlan,omitempty"`
	// New primary currency to settle payments.
	PrimarySettlementCurrency *string `json:"primarySettlementCurrency,omitempty"`
	// New URL pointing to online shop.
	ShopWebAddress *string `json:"shopWebAddress,omitempty"`
}

// NewUpdateMerchantRequest instantiates a new UpdateMerchantRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMerchantRequest() *UpdateMerchantRequest {
	this := UpdateMerchantRequest{}
	return &this
}

// NewUpdateMerchantRequestWithDefaults instantiates a new UpdateMerchantRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMerchantRequestWithDefaults() *UpdateMerchantRequest {
	this := UpdateMerchantRequest{}
	return &this
}

// GetBusinessLineId returns the BusinessLineId field value if set, zero value otherwise.
func (o *UpdateMerchantRequest) GetBusinessLineId() string {
	if o == nil || isNil(o.BusinessLineId) {
		var ret string
		return ret
	}
	return *o.BusinessLineId
}

// GetBusinessLineIdOk returns a tuple with the BusinessLineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMerchantRequest) GetBusinessLineIdOk() (*string, bool) {
	if o == nil || isNil(o.BusinessLineId) {
		return nil, false
	}
	return o.BusinessLineId, true
}

// HasBusinessLineId returns a boolean if a field has been set.
func (o *UpdateMerchantRequest) HasBusinessLineId() bool {
	if o != nil && !isNil(o.BusinessLineId) {
		return true
	}

	return false
}

// SetBusinessLineId gets a reference to the given string and assigns it to the BusinessLineId field.
func (o *UpdateMerchantRequest) SetBusinessLineId(v string) {
	o.BusinessLineId = &v
}

// GetCaptureDelay returns the CaptureDelay field value if set, zero value otherwise.
func (o *UpdateMerchantRequest) GetCaptureDelay() string {
	if o == nil || isNil(o.CaptureDelay) {
		var ret string
		return ret
	}
	return *o.CaptureDelay
}

// GetCaptureDelayOk returns a tuple with the CaptureDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMerchantRequest) GetCaptureDelayOk() (*string, bool) {
	if o == nil || isNil(o.CaptureDelay) {
		return nil, false
	}
	return o.CaptureDelay, true
}

// HasCaptureDelay returns a boolean if a field has been set.
func (o *UpdateMerchantRequest) HasCaptureDelay() bool {
	if o != nil && !isNil(o.CaptureDelay) {
		return true
	}

	return false
}

// SetCaptureDelay gets a reference to the given string and assigns it to the CaptureDelay field.
func (o *UpdateMerchantRequest) SetCaptureDelay(v string) {
	o.CaptureDelay = &v
}

// GetMerchantCity returns the MerchantCity field value if set, zero value otherwise.
func (o *UpdateMerchantRequest) GetMerchantCity() string {
	if o == nil || isNil(o.MerchantCity) {
		var ret string
		return ret
	}
	return *o.MerchantCity
}

// GetMerchantCityOk returns a tuple with the MerchantCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMerchantRequest) GetMerchantCityOk() (*string, bool) {
	if o == nil || isNil(o.MerchantCity) {
		return nil, false
	}
	return o.MerchantCity, true
}

// HasMerchantCity returns a boolean if a field has been set.
func (o *UpdateMerchantRequest) HasMerchantCity() bool {
	if o != nil && !isNil(o.MerchantCity) {
		return true
	}

	return false
}

// SetMerchantCity gets a reference to the given string and assigns it to the MerchantCity field.
func (o *UpdateMerchantRequest) SetMerchantCity(v string) {
	o.MerchantCity = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateMerchantRequest) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMerchantRequest) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateMerchantRequest) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateMerchantRequest) SetName(v string) {
	o.Name = &v
}

// GetPricingPlan returns the PricingPlan field value if set, zero value otherwise.
func (o *UpdateMerchantRequest) GetPricingPlan() string {
	if o == nil || isNil(o.PricingPlan) {
		var ret string
		return ret
	}
	return *o.PricingPlan
}

// GetPricingPlanOk returns a tuple with the PricingPlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMerchantRequest) GetPricingPlanOk() (*string, bool) {
	if o == nil || isNil(o.PricingPlan) {
		return nil, false
	}
	return o.PricingPlan, true
}

// HasPricingPlan returns a boolean if a field has been set.
func (o *UpdateMerchantRequest) HasPricingPlan() bool {
	if o != nil && !isNil(o.PricingPlan) {
		return true
	}

	return false
}

// SetPricingPlan gets a reference to the given string and assigns it to the PricingPlan field.
func (o *UpdateMerchantRequest) SetPricingPlan(v string) {
	o.PricingPlan = &v
}

// GetPrimarySettlementCurrency returns the PrimarySettlementCurrency field value if set, zero value otherwise.
func (o *UpdateMerchantRequest) GetPrimarySettlementCurrency() string {
	if o == nil || isNil(o.PrimarySettlementCurrency) {
		var ret string
		return ret
	}
	return *o.PrimarySettlementCurrency
}

// GetPrimarySettlementCurrencyOk returns a tuple with the PrimarySettlementCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMerchantRequest) GetPrimarySettlementCurrencyOk() (*string, bool) {
	if o == nil || isNil(o.PrimarySettlementCurrency) {
		return nil, false
	}
	return o.PrimarySettlementCurrency, true
}

// HasPrimarySettlementCurrency returns a boolean if a field has been set.
func (o *UpdateMerchantRequest) HasPrimarySettlementCurrency() bool {
	if o != nil && !isNil(o.PrimarySettlementCurrency) {
		return true
	}

	return false
}

// SetPrimarySettlementCurrency gets a reference to the given string and assigns it to the PrimarySettlementCurrency field.
func (o *UpdateMerchantRequest) SetPrimarySettlementCurrency(v string) {
	o.PrimarySettlementCurrency = &v
}

// GetShopWebAddress returns the ShopWebAddress field value if set, zero value otherwise.
func (o *UpdateMerchantRequest) GetShopWebAddress() string {
	if o == nil || isNil(o.ShopWebAddress) {
		var ret string
		return ret
	}
	return *o.ShopWebAddress
}

// GetShopWebAddressOk returns a tuple with the ShopWebAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMerchantRequest) GetShopWebAddressOk() (*string, bool) {
	if o == nil || isNil(o.ShopWebAddress) {
		return nil, false
	}
	return o.ShopWebAddress, true
}

// HasShopWebAddress returns a boolean if a field has been set.
func (o *UpdateMerchantRequest) HasShopWebAddress() bool {
	if o != nil && !isNil(o.ShopWebAddress) {
		return true
	}

	return false
}

// SetShopWebAddress gets a reference to the given string and assigns it to the ShopWebAddress field.
func (o *UpdateMerchantRequest) SetShopWebAddress(v string) {
	o.ShopWebAddress = &v
}

func (o UpdateMerchantRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BusinessLineId) {
		toSerialize["businessLineId"] = o.BusinessLineId
	}
	if !isNil(o.CaptureDelay) {
		toSerialize["captureDelay"] = o.CaptureDelay
	}
	if !isNil(o.MerchantCity) {
		toSerialize["merchantCity"] = o.MerchantCity
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.PricingPlan) {
		toSerialize["pricingPlan"] = o.PricingPlan
	}
	if !isNil(o.PrimarySettlementCurrency) {
		toSerialize["primarySettlementCurrency"] = o.PrimarySettlementCurrency
	}
	if !isNil(o.ShopWebAddress) {
		toSerialize["shopWebAddress"] = o.ShopWebAddress
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateMerchantRequest struct {
	value *UpdateMerchantRequest
	isSet bool
}

func (v NullableUpdateMerchantRequest) Get() *UpdateMerchantRequest {
	return v.value
}

func (v *NullableUpdateMerchantRequest) Set(val *UpdateMerchantRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMerchantRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMerchantRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMerchantRequest(val *UpdateMerchantRequest) *NullableUpdateMerchantRequest {
	return &NullableUpdateMerchantRequest{value: val, isSet: true}
}

func (v NullableUpdateMerchantRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMerchantRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


