/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// OfflineProcessing struct for OfflineProcessing
type OfflineProcessing struct {
	// The maximum offline transaction amount for chip cards, in the processing currency and specified in [minor units](https://docs.adyen.com/development-resources/currency-codes).
	ChipFloorLimit *int32 `json:"chipFloorLimit,omitempty"`
	// The maximum offline transaction amount for swiped cards, in the specified currency.
	OfflineSwipeLimits []MinorUnitsMonetaryValue `json:"offlineSwipeLimits,omitempty"`
}

// NewOfflineProcessing instantiates a new OfflineProcessing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfflineProcessing() *OfflineProcessing {
	this := OfflineProcessing{}
	return &this
}

// NewOfflineProcessingWithDefaults instantiates a new OfflineProcessing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfflineProcessingWithDefaults() *OfflineProcessing {
	this := OfflineProcessing{}
	return &this
}

// GetChipFloorLimit returns the ChipFloorLimit field value if set, zero value otherwise.
func (o *OfflineProcessing) GetChipFloorLimit() int32 {
	if o == nil || isNil(o.ChipFloorLimit) {
		var ret int32
		return ret
	}
	return *o.ChipFloorLimit
}

// GetChipFloorLimitOk returns a tuple with the ChipFloorLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfflineProcessing) GetChipFloorLimitOk() (*int32, bool) {
	if o == nil || isNil(o.ChipFloorLimit) {
		return nil, false
	}
	return o.ChipFloorLimit, true
}

// HasChipFloorLimit returns a boolean if a field has been set.
func (o *OfflineProcessing) HasChipFloorLimit() bool {
	if o != nil && !isNil(o.ChipFloorLimit) {
		return true
	}

	return false
}

// SetChipFloorLimit gets a reference to the given int32 and assigns it to the ChipFloorLimit field.
func (o *OfflineProcessing) SetChipFloorLimit(v int32) {
	o.ChipFloorLimit = &v
}

// GetOfflineSwipeLimits returns the OfflineSwipeLimits field value if set, zero value otherwise.
func (o *OfflineProcessing) GetOfflineSwipeLimits() []MinorUnitsMonetaryValue {
	if o == nil || isNil(o.OfflineSwipeLimits) {
		var ret []MinorUnitsMonetaryValue
		return ret
	}
	return o.OfflineSwipeLimits
}

// GetOfflineSwipeLimitsOk returns a tuple with the OfflineSwipeLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfflineProcessing) GetOfflineSwipeLimitsOk() ([]MinorUnitsMonetaryValue, bool) {
	if o == nil || isNil(o.OfflineSwipeLimits) {
		return nil, false
	}
	return o.OfflineSwipeLimits, true
}

// HasOfflineSwipeLimits returns a boolean if a field has been set.
func (o *OfflineProcessing) HasOfflineSwipeLimits() bool {
	if o != nil && !isNil(o.OfflineSwipeLimits) {
		return true
	}

	return false
}

// SetOfflineSwipeLimits gets a reference to the given []MinorUnitsMonetaryValue and assigns it to the OfflineSwipeLimits field.
func (o *OfflineProcessing) SetOfflineSwipeLimits(v []MinorUnitsMonetaryValue) {
	o.OfflineSwipeLimits = v
}

func (o OfflineProcessing) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ChipFloorLimit) {
		toSerialize["chipFloorLimit"] = o.ChipFloorLimit
	}
	if !isNil(o.OfflineSwipeLimits) {
		toSerialize["offlineSwipeLimits"] = o.OfflineSwipeLimits
	}
	return json.Marshal(toSerialize)
}

type NullableOfflineProcessing struct {
	value *OfflineProcessing
	isSet bool
}

func (v NullableOfflineProcessing) Get() *OfflineProcessing {
	return v.value
}

func (v *NullableOfflineProcessing) Set(val *OfflineProcessing) {
	v.value = val
	v.isSet = true
}

func (v NullableOfflineProcessing) IsSet() bool {
	return v.isSet
}

func (v *NullableOfflineProcessing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfflineProcessing(val *OfflineProcessing) *NullableOfflineProcessing {
	return &NullableOfflineProcessing{value: val, isSet: true}
}

func (v NullableOfflineProcessing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfflineProcessing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


