/*
Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"context"
	"encoding/json"
	"io/ioutil"
	_nethttp "net/http"
	"net/url"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// TerminalsTerminalLevelApi TerminalsTerminalLevelApi service
type TerminalsTerminalLevelApi common.Service

type TerminalsTerminalLevelApiListTerminalsConfig struct {
	ctx         context.Context
	searchQuery *string
	countries   *string
	merchantIds *string
	storeIds    *string
	brandModels *string
	pageNumber  *int32
	pageSize    *int32
}

// Returns terminals with an ID that contains the specified string. If present, other query parameters are ignored.
func (r TerminalsTerminalLevelApiListTerminalsConfig) SearchQuery(searchQuery string) TerminalsTerminalLevelApiListTerminalsConfig {
	r.searchQuery = &searchQuery
	return r
}

// Returns terminals located in the countries specified by their [two-letter country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
func (r TerminalsTerminalLevelApiListTerminalsConfig) Countries(countries string) TerminalsTerminalLevelApiListTerminalsConfig {
	r.countries = &countries
	return r
}

// Returns terminals that belong to the merchant accounts specified by their unique merchant account ID.
func (r TerminalsTerminalLevelApiListTerminalsConfig) MerchantIds(merchantIds string) TerminalsTerminalLevelApiListTerminalsConfig {
	r.merchantIds = &merchantIds
	return r
}

// Returns terminals that are assigned to the [stores](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/stores) specified by their unique store ID.
func (r TerminalsTerminalLevelApiListTerminalsConfig) StoreIds(storeIds string) TerminalsTerminalLevelApiListTerminalsConfig {
	r.storeIds = &storeIds
	return r
}

// Returns terminals of the [models](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/companies/{companyId}/terminalModels) specified in the format *brand.model*.
func (r TerminalsTerminalLevelApiListTerminalsConfig) BrandModels(brandModels string) TerminalsTerminalLevelApiListTerminalsConfig {
	r.brandModels = &brandModels
	return r
}

// The number of the page to fetch.
func (r TerminalsTerminalLevelApiListTerminalsConfig) PageNumber(pageNumber int32) TerminalsTerminalLevelApiListTerminalsConfig {
	r.pageNumber = &pageNumber
	return r
}

// The number of items to have on a page, maximum 100. The default is 20 items on a page.
func (r TerminalsTerminalLevelApiListTerminalsConfig) PageSize(pageSize int32) TerminalsTerminalLevelApiListTerminalsConfig {
	r.pageSize = &pageSize
	return r
}

/*
ListTerminals Get a list of terminals

Returns the payment terminals that the API credential has access to and that match the query parameters.
When using `searchQuery`, other query parameters are ignored.

To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API — Terminal actions read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return TerminalsTerminalLevelApiListTerminalsConfig
*/
func (a *TerminalsTerminalLevelApi) ListTerminalsConfig(ctx context.Context) TerminalsTerminalLevelApiListTerminalsConfig {
	return TerminalsTerminalLevelApiListTerminalsConfig{
		ctx: ctx,
	}
}

/*
Get a list of terminals
Returns the payment terminals that the API credential has access to and that match the query parameters.  When using &#x60;searchQuery&#x60;, other query parameters are ignored.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API — Terminal actions read
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ListTerminalsResponse
*/

func (a *TerminalsTerminalLevelApi) ListTerminals(r TerminalsTerminalLevelApiListTerminalsConfig) (ListTerminalsResponse, *_nethttp.Response, RestServiceError) {
	var v RestServiceError
	res := &ListTerminalsResponse{}
	path := "/terminals"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.searchQuery != nil {
		common.ParameterAddToQuery(queryParams, "searchQuery", r.searchQuery, "")
	}
	if r.countries != nil {
		common.ParameterAddToQuery(queryParams, "countries", r.countries, "")
	}
	if r.merchantIds != nil {
		common.ParameterAddToQuery(queryParams, "merchantIds", r.merchantIds, "")
	}
	if r.storeIds != nil {
		common.ParameterAddToQuery(queryParams, "storeIds", r.storeIds, "")
	}
	if r.brandModels != nil {
		common.ParameterAddToQuery(queryParams, "brandModels", r.brandModels, "")
	}
	if r.pageNumber != nil {
		common.ParameterAddToQuery(queryParams, "pageNumber", r.pageNumber, "")
	}
	if r.pageSize != nil {
		common.ParameterAddToQuery(queryParams, "pageSize", r.pageSize, "")
	}
	httpRes, _ := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &v)
		return *res, httpRes, v
	}
	return *res, httpRes, v
}
