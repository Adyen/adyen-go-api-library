/*
Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"context"
	"net/http"
	"net/url"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// TerminalsTerminalLevelApi service
type TerminalsTerminalLevelApi common.Service

// All parameters accepted by TerminalsTerminalLevelApi.ListTerminals
type TerminalsTerminalLevelApiListTerminalsInput struct {
	searchQuery *string
	countries   *string
	merchantIds *string
	storeIds    *string
	brandModels *string
	pageNumber  *int32
	pageSize    *int32
}

// Returns terminals with an ID that contains the specified string. If present, other query parameters are ignored.
func (r TerminalsTerminalLevelApiListTerminalsInput) SearchQuery(searchQuery string) TerminalsTerminalLevelApiListTerminalsInput {
	r.searchQuery = &searchQuery
	return r
}

// Returns terminals located in the countries specified by their [two-letter country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
func (r TerminalsTerminalLevelApiListTerminalsInput) Countries(countries string) TerminalsTerminalLevelApiListTerminalsInput {
	r.countries = &countries
	return r
}

// Returns terminals that belong to the merchant accounts specified by their unique merchant account ID.
func (r TerminalsTerminalLevelApiListTerminalsInput) MerchantIds(merchantIds string) TerminalsTerminalLevelApiListTerminalsInput {
	r.merchantIds = &merchantIds
	return r
}

// Returns terminals that are assigned to the [stores](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/stores) specified by their unique store ID.
func (r TerminalsTerminalLevelApiListTerminalsInput) StoreIds(storeIds string) TerminalsTerminalLevelApiListTerminalsInput {
	r.storeIds = &storeIds
	return r
}

// Returns terminals of the [models](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/companies/{companyId}/terminalModels) specified in the format *brand.model*.
func (r TerminalsTerminalLevelApiListTerminalsInput) BrandModels(brandModels string) TerminalsTerminalLevelApiListTerminalsInput {
	r.brandModels = &brandModels
	return r
}

// The number of the page to fetch.
func (r TerminalsTerminalLevelApiListTerminalsInput) PageNumber(pageNumber int32) TerminalsTerminalLevelApiListTerminalsInput {
	r.pageNumber = &pageNumber
	return r
}

// The number of items to have on a page, maximum 100. The default is 20 items on a page.
func (r TerminalsTerminalLevelApiListTerminalsInput) PageSize(pageSize int32) TerminalsTerminalLevelApiListTerminalsInput {
	r.pageSize = &pageSize
	return r
}

/*
Prepare a request for ListTerminals

@return TerminalsTerminalLevelApiListTerminalsInput
*/
func (a *TerminalsTerminalLevelApi) ListTerminalsInput() TerminalsTerminalLevelApiListTerminalsInput {
	return TerminalsTerminalLevelApiListTerminalsInput{}
}

/*
ListTerminals Get a list of terminals

Returns the payment terminals that the API credential has access to and that match the query parameters.
When using `searchQuery`, other query parameters are ignored.

To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API â€” Terminal actions read

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r TerminalsTerminalLevelApiListTerminalsInput - Request parameters, see ListTerminalsInput
@return ListTerminalsResponse, *http.Response, error
*/
func (a *TerminalsTerminalLevelApi) ListTerminals(ctx context.Context, r TerminalsTerminalLevelApiListTerminalsInput) (ListTerminalsResponse, *http.Response, error) {
	res := &ListTerminalsResponse{}
	path := "/terminals"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.searchQuery != nil {
		common.ParameterAddToQuery(queryParams, "searchQuery", r.searchQuery, "")
	}
	if r.countries != nil {
		common.ParameterAddToQuery(queryParams, "countries", r.countries, "")
	}
	if r.merchantIds != nil {
		common.ParameterAddToQuery(queryParams, "merchantIds", r.merchantIds, "")
	}
	if r.storeIds != nil {
		common.ParameterAddToQuery(queryParams, "storeIds", r.storeIds, "")
	}
	if r.brandModels != nil {
		common.ParameterAddToQuery(queryParams, "brandModels", r.brandModels, "")
	}
	if r.pageNumber != nil {
		common.ParameterAddToQuery(queryParams, "pageNumber", r.pageNumber, "")
	}
	if r.pageSize != nil {
		common.ParameterAddToQuery(queryParams, "pageSize", r.pageSize, "")
	}
	httpRes, err := common.SendAPIRequest(
		ctx,
		a.Client,
		nil,
		res,
		http.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}
