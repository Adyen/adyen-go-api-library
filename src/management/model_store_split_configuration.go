/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// StoreSplitConfiguration struct for StoreSplitConfiguration
type StoreSplitConfiguration struct {
	// The [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__queryParam_id) linked to the account holder.
	BalanceAccountId *string `json:"balanceAccountId,omitempty"`
	// The UUID of the [split configuration](https://docs.adyen.com/marketplaces-and-platforms/classic/split-configuration-for-stores) from the Customer Area.
	SplitConfigurationId *string `json:"splitConfigurationId,omitempty"`
}

// NewStoreSplitConfiguration instantiates a new StoreSplitConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreSplitConfiguration() *StoreSplitConfiguration {
	this := StoreSplitConfiguration{}
	return &this
}

// NewStoreSplitConfigurationWithDefaults instantiates a new StoreSplitConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreSplitConfigurationWithDefaults() *StoreSplitConfiguration {
	this := StoreSplitConfiguration{}
	return &this
}

// GetBalanceAccountId returns the BalanceAccountId field value if set, zero value otherwise.
func (o *StoreSplitConfiguration) GetBalanceAccountId() string {
	if o == nil || isNil(o.BalanceAccountId) {
		var ret string
		return ret
	}
	return *o.BalanceAccountId
}

// GetBalanceAccountIdOk returns a tuple with the BalanceAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreSplitConfiguration) GetBalanceAccountIdOk() (*string, bool) {
	if o == nil || isNil(o.BalanceAccountId) {
		return nil, false
	}
	return o.BalanceAccountId, true
}

// HasBalanceAccountId returns a boolean if a field has been set.
func (o *StoreSplitConfiguration) HasBalanceAccountId() bool {
	if o != nil && !isNil(o.BalanceAccountId) {
		return true
	}

	return false
}

// SetBalanceAccountId gets a reference to the given string and assigns it to the BalanceAccountId field.
func (o *StoreSplitConfiguration) SetBalanceAccountId(v string) {
	o.BalanceAccountId = &v
}

// GetSplitConfigurationId returns the SplitConfigurationId field value if set, zero value otherwise.
func (o *StoreSplitConfiguration) GetSplitConfigurationId() string {
	if o == nil || isNil(o.SplitConfigurationId) {
		var ret string
		return ret
	}
	return *o.SplitConfigurationId
}

// GetSplitConfigurationIdOk returns a tuple with the SplitConfigurationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreSplitConfiguration) GetSplitConfigurationIdOk() (*string, bool) {
	if o == nil || isNil(o.SplitConfigurationId) {
		return nil, false
	}
	return o.SplitConfigurationId, true
}

// HasSplitConfigurationId returns a boolean if a field has been set.
func (o *StoreSplitConfiguration) HasSplitConfigurationId() bool {
	if o != nil && !isNil(o.SplitConfigurationId) {
		return true
	}

	return false
}

// SetSplitConfigurationId gets a reference to the given string and assigns it to the SplitConfigurationId field.
func (o *StoreSplitConfiguration) SetSplitConfigurationId(v string) {
	o.SplitConfigurationId = &v
}

func (o StoreSplitConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BalanceAccountId) {
		toSerialize["balanceAccountId"] = o.BalanceAccountId
	}
	if !isNil(o.SplitConfigurationId) {
		toSerialize["splitConfigurationId"] = o.SplitConfigurationId
	}
	return json.Marshal(toSerialize)
}

type NullableStoreSplitConfiguration struct {
	value *StoreSplitConfiguration
	isSet bool
}

func (v NullableStoreSplitConfiguration) Get() *StoreSplitConfiguration {
	return v.value
}

func (v *NullableStoreSplitConfiguration) Set(val *StoreSplitConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreSplitConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreSplitConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreSplitConfiguration(val *StoreSplitConfiguration) *NullableStoreSplitConfiguration {
	return &NullableStoreSplitConfiguration{value: val, isSet: true}
}

func (v NullableStoreSplitConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreSplitConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


