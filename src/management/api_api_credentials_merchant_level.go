/*
Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"context"
	"encoding/json"
	"io/ioutil"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// APICredentialsMerchantLevelApi APICredentialsMerchantLevelApi service
type APICredentialsMerchantLevelApi common.Service

type APICredentialsMerchantLevelApiCreateApiCredentialConfig struct {
	ctx                                context.Context
	merchantId                         string
	createMerchantApiCredentialRequest *CreateMerchantApiCredentialRequest
}

func (r APICredentialsMerchantLevelApiCreateApiCredentialConfig) CreateMerchantApiCredentialRequest(createMerchantApiCredentialRequest CreateMerchantApiCredentialRequest) APICredentialsMerchantLevelApiCreateApiCredentialConfig {
	r.createMerchantApiCredentialRequest = &createMerchantApiCredentialRequest
	return r
}

/*
CreateApiCredential Create an API credential

Creates an [API credential](https://docs.adyen.com/development-resources/api-credentials) for the company account identified in the path. In the request, you can specify the roles and allowed origins for the new API credential.

The response includes the:
* [API key](https://docs.adyen.com/development-resources/api-authentication#api-key-authentication): used for API request authentication.
* [Client key](https://docs.adyen.com/development-resources/client-side-authentication#how-it-works): public key used for client-side authentication.
* [Username and password](https://docs.adyen.com/development-resources/api-authentication#using-basic-authentication): used for basic authentication.

> Make sure you store the API key securely in your system. You won't be able to retrieve it later.

If your API key is lost or compromised, you need to [generate a new API key](https://docs.adyen.com/api-explorer/#/ManagementService/v1/post/merchants/{merchantId}/apiCredentials/{apiCredentialId}/generateApiKey).

To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—API credentials read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@return APICredentialsMerchantLevelApiCreateApiCredentialConfig
*/
func (a *APICredentialsMerchantLevelApi) CreateApiCredentialConfig(ctx context.Context, merchantId string) APICredentialsMerchantLevelApiCreateApiCredentialConfig {
	return APICredentialsMerchantLevelApiCreateApiCredentialConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Create an API credential
Creates an [API credential](https://docs.adyen.com/development-resources/api-credentials) for the company account identified in the path. In the request, you can specify the roles and allowed origins for the new API credential.  The response includes the: * [API key](https://docs.adyen.com/development-resources/api-authentication#api-key-authentication): used for API request authentication. * [Client key](https://docs.adyen.com/development-resources/client-side-authentication#how-it-works): public key used for client-side authentication. * [Username and password](https://docs.adyen.com/development-resources/api-authentication#using-basic-authentication): used for basic authentication.  &gt; Make sure you store the API key securely in your system. You won&#39;t be able to retrieve it later.  If your API key is lost or compromised, you need to [generate a new API key](https://docs.adyen.com/api-explorer/#/ManagementService/v1/post/merchants/{merchantId}/apiCredentials/{apiCredentialId}/generateApiKey).  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param req CreateMerchantApiCredentialRequest - reference of CreateMerchantApiCredentialRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CreateApiCredentialResponse
*/

func (a *APICredentialsMerchantLevelApi) CreateApiCredential(r APICredentialsMerchantLevelApiCreateApiCredentialConfig) (CreateApiCredentialResponse, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &CreateApiCredentialResponse{}
	path := "/merchants/{merchantId}/apiCredentials"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.createMerchantApiCredentialRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type APICredentialsMerchantLevelApiGetApiCredentialConfig struct {
	ctx             context.Context
	merchantId      string
	apiCredentialId string
}

/*
GetApiCredential Get an API credential

Returns the [API credential](https://docs.adyen.com/development-resources/api-credentials) identified in the path.

To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—API credentials read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param apiCredentialId Unique identifier of the API credential.
	@return APICredentialsMerchantLevelApiGetApiCredentialConfig
*/
func (a *APICredentialsMerchantLevelApi) GetApiCredentialConfig(ctx context.Context, merchantId string, apiCredentialId string) APICredentialsMerchantLevelApiGetApiCredentialConfig {
	return APICredentialsMerchantLevelApiGetApiCredentialConfig{
		ctx:             ctx,
		merchantId:      merchantId,
		apiCredentialId: apiCredentialId,
	}
}

/*
Get an API credential
Returns the [API credential](https://docs.adyen.com/development-resources/api-credentials) identified in the path.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param apiCredentialId Unique identifier of the API credential.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiCredential
*/

func (a *APICredentialsMerchantLevelApi) GetApiCredential(r APICredentialsMerchantLevelApiGetApiCredentialConfig) (ApiCredential, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &ApiCredential{}
	path := "/merchants/{merchantId}/apiCredentials/{apiCredentialId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"apiCredentialId"+"}", url.PathEscape(common.ParameterValueToString(r.apiCredentialId, "apiCredentialId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type APICredentialsMerchantLevelApiListApiCredentialsConfig struct {
	ctx        context.Context
	merchantId string
	pageNumber *int32
	pageSize   *int32
}

// The number of the page to fetch.
func (r APICredentialsMerchantLevelApiListApiCredentialsConfig) PageNumber(pageNumber int32) APICredentialsMerchantLevelApiListApiCredentialsConfig {
	r.pageNumber = &pageNumber
	return r
}

// The number of items to have on a page, maximum 100. The default is 10 items on a page.
func (r APICredentialsMerchantLevelApiListApiCredentialsConfig) PageSize(pageSize int32) APICredentialsMerchantLevelApiListApiCredentialsConfig {
	r.pageSize = &pageSize
	return r
}

/*
ListApiCredentials Get a list of API credentials

Returns the list of [API credentials](https://docs.adyen.com/development-resources/api-credentials) for the merchant account. The list is grouped into pages as defined by the query parameters.

To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—API credentials read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@return APICredentialsMerchantLevelApiListApiCredentialsConfig
*/
func (a *APICredentialsMerchantLevelApi) ListApiCredentialsConfig(ctx context.Context, merchantId string) APICredentialsMerchantLevelApiListApiCredentialsConfig {
	return APICredentialsMerchantLevelApiListApiCredentialsConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Get a list of API credentials
Returns the list of [API credentials](https://docs.adyen.com/development-resources/api-credentials) for the merchant account. The list is grouped into pages as defined by the query parameters.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ListMerchantApiCredentialsResponse
*/

func (a *APICredentialsMerchantLevelApi) ListApiCredentials(r APICredentialsMerchantLevelApiListApiCredentialsConfig) (ListMerchantApiCredentialsResponse, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &ListMerchantApiCredentialsResponse{}
	path := "/merchants/{merchantId}/apiCredentials"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.pageNumber != nil {
		common.ParameterAddToQuery(queryParams, "pageNumber", r.pageNumber, "")
	}
	if r.pageSize != nil {
		common.ParameterAddToQuery(queryParams, "pageSize", r.pageSize, "")
	}
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type APICredentialsMerchantLevelApiUpdateApiCredentialConfig struct {
	ctx                                context.Context
	merchantId                         string
	apiCredentialId                    string
	updateMerchantApiCredentialRequest *UpdateMerchantApiCredentialRequest
}

func (r APICredentialsMerchantLevelApiUpdateApiCredentialConfig) UpdateMerchantApiCredentialRequest(updateMerchantApiCredentialRequest UpdateMerchantApiCredentialRequest) APICredentialsMerchantLevelApiUpdateApiCredentialConfig {
	r.updateMerchantApiCredentialRequest = &updateMerchantApiCredentialRequest
	return r
}

/*
UpdateApiCredential Update an API credential

Changes the API credential's roles, or allowed origins. The request has the new values for the fields you want to change. The response contains the full updated API credential, including the new values from the request.

To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—API credentials read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param apiCredentialId Unique identifier of the API credential.
	@return APICredentialsMerchantLevelApiUpdateApiCredentialConfig
*/
func (a *APICredentialsMerchantLevelApi) UpdateApiCredentialConfig(ctx context.Context, merchantId string, apiCredentialId string) APICredentialsMerchantLevelApiUpdateApiCredentialConfig {
	return APICredentialsMerchantLevelApiUpdateApiCredentialConfig{
		ctx:             ctx,
		merchantId:      merchantId,
		apiCredentialId: apiCredentialId,
	}
}

/*
Update an API credential
Changes the API credential&#39;s roles, or allowed origins. The request has the new values for the fields you want to change. The response contains the full updated API credential, including the new values from the request.   To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param apiCredentialId Unique identifier of the API credential.
 * @param req UpdateMerchantApiCredentialRequest - reference of UpdateMerchantApiCredentialRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiCredential
*/

func (a *APICredentialsMerchantLevelApi) UpdateApiCredential(r APICredentialsMerchantLevelApiUpdateApiCredentialConfig) (ApiCredential, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &ApiCredential{}
	path := "/merchants/{merchantId}/apiCredentials/{apiCredentialId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"apiCredentialId"+"}", url.PathEscape(common.ParameterValueToString(r.apiCredentialId, "apiCredentialId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.updateMerchantApiCredentialRequest,
		res,
		_nethttp.MethodPatch,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}
