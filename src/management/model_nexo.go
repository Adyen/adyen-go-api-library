/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// Nexo struct for Nexo
type Nexo struct {
	DisplayUrls *NotificationUrl `json:"displayUrls,omitempty"`
	EncryptionKey *Key `json:"encryptionKey,omitempty"`
	EventUrls *EventUrl `json:"eventUrls,omitempty"`
	// @deprecated One or more URLs to send event messages to when using Terminal API.
	// Deprecated
	NexoEventUrls []string `json:"nexoEventUrls,omitempty"`
}

// NewNexo instantiates a new Nexo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNexo() *Nexo {
	this := Nexo{}
	return &this
}

// NewNexoWithDefaults instantiates a new Nexo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNexoWithDefaults() *Nexo {
	this := Nexo{}
	return &this
}

// GetDisplayUrls returns the DisplayUrls field value if set, zero value otherwise.
func (o *Nexo) GetDisplayUrls() NotificationUrl {
	if o == nil || isNil(o.DisplayUrls) {
		var ret NotificationUrl
		return ret
	}
	return *o.DisplayUrls
}

// GetDisplayUrlsOk returns a tuple with the DisplayUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nexo) GetDisplayUrlsOk() (*NotificationUrl, bool) {
	if o == nil || isNil(o.DisplayUrls) {
		return nil, false
	}
	return o.DisplayUrls, true
}

// HasDisplayUrls returns a boolean if a field has been set.
func (o *Nexo) HasDisplayUrls() bool {
	if o != nil && !isNil(o.DisplayUrls) {
		return true
	}

	return false
}

// SetDisplayUrls gets a reference to the given NotificationUrl and assigns it to the DisplayUrls field.
func (o *Nexo) SetDisplayUrls(v NotificationUrl) {
	o.DisplayUrls = &v
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise.
func (o *Nexo) GetEncryptionKey() Key {
	if o == nil || isNil(o.EncryptionKey) {
		var ret Key
		return ret
	}
	return *o.EncryptionKey
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nexo) GetEncryptionKeyOk() (*Key, bool) {
	if o == nil || isNil(o.EncryptionKey) {
		return nil, false
	}
	return o.EncryptionKey, true
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *Nexo) HasEncryptionKey() bool {
	if o != nil && !isNil(o.EncryptionKey) {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given Key and assigns it to the EncryptionKey field.
func (o *Nexo) SetEncryptionKey(v Key) {
	o.EncryptionKey = &v
}

// GetEventUrls returns the EventUrls field value if set, zero value otherwise.
func (o *Nexo) GetEventUrls() EventUrl {
	if o == nil || isNil(o.EventUrls) {
		var ret EventUrl
		return ret
	}
	return *o.EventUrls
}

// GetEventUrlsOk returns a tuple with the EventUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nexo) GetEventUrlsOk() (*EventUrl, bool) {
	if o == nil || isNil(o.EventUrls) {
		return nil, false
	}
	return o.EventUrls, true
}

// HasEventUrls returns a boolean if a field has been set.
func (o *Nexo) HasEventUrls() bool {
	if o != nil && !isNil(o.EventUrls) {
		return true
	}

	return false
}

// SetEventUrls gets a reference to the given EventUrl and assigns it to the EventUrls field.
func (o *Nexo) SetEventUrls(v EventUrl) {
	o.EventUrls = &v
}

// GetNexoEventUrls returns the NexoEventUrls field value if set, zero value otherwise.
// Deprecated
func (o *Nexo) GetNexoEventUrls() []string {
	if o == nil || isNil(o.NexoEventUrls) {
		var ret []string
		return ret
	}
	return o.NexoEventUrls
}

// GetNexoEventUrlsOk returns a tuple with the NexoEventUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Nexo) GetNexoEventUrlsOk() ([]string, bool) {
	if o == nil || isNil(o.NexoEventUrls) {
		return nil, false
	}
	return o.NexoEventUrls, true
}

// HasNexoEventUrls returns a boolean if a field has been set.
func (o *Nexo) HasNexoEventUrls() bool {
	if o != nil && !isNil(o.NexoEventUrls) {
		return true
	}

	return false
}

// SetNexoEventUrls gets a reference to the given []string and assigns it to the NexoEventUrls field.
// Deprecated
func (o *Nexo) SetNexoEventUrls(v []string) {
	o.NexoEventUrls = v
}

func (o Nexo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DisplayUrls) {
		toSerialize["displayUrls"] = o.DisplayUrls
	}
	if !isNil(o.EncryptionKey) {
		toSerialize["encryptionKey"] = o.EncryptionKey
	}
	if !isNil(o.EventUrls) {
		toSerialize["eventUrls"] = o.EventUrls
	}
	if !isNil(o.NexoEventUrls) {
		toSerialize["nexoEventUrls"] = o.NexoEventUrls
	}
	return json.Marshal(toSerialize)
}

type NullableNexo struct {
	value *Nexo
	isSet bool
}

func (v NullableNexo) Get() *Nexo {
	return v.value
}

func (v *NullableNexo) Set(val *Nexo) {
	v.value = val
	v.isSet = true
}

func (v NullableNexo) IsSet() bool {
	return v.isSet
}

func (v *NullableNexo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNexo(val *Nexo) *NullableNexo {
	return &NullableNexo{value: val, isSet: true}
}

func (v NullableNexo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNexo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


