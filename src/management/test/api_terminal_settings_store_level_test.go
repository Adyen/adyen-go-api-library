/*
Management API

Testing TerminalSettingsStoreLevelApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package Management

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_Management_TerminalSettingsStoreLevelApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TerminalSettingsStoreLevelApiService GetMerchantsMerchantIdStoresReferenceTerminalLogos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string
		var reference string

		resp, httpRes, err := apiClient.TerminalSettingsStoreLevelApi.GetMerchantsMerchantIdStoresReferenceTerminalLogos(context.Background(), merchantId, reference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalSettingsStoreLevelApiService GetMerchantsMerchantIdStoresReferenceTerminalSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string
		var reference string

		resp, httpRes, err := apiClient.TerminalSettingsStoreLevelApi.GetMerchantsMerchantIdStoresReferenceTerminalSettings(context.Background(), merchantId, reference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalSettingsStoreLevelApiService GetStoresStoreIdTerminalLogos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var storeId string

		resp, httpRes, err := apiClient.TerminalSettingsStoreLevelApi.GetStoresStoreIdTerminalLogos(context.Background(), storeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalSettingsStoreLevelApiService GetStoresStoreIdTerminalSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var storeId string

		resp, httpRes, err := apiClient.TerminalSettingsStoreLevelApi.GetStoresStoreIdTerminalSettings(context.Background(), storeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalSettingsStoreLevelApiService PatchMerchantsMerchantIdStoresReferenceTerminalLogos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string
		var reference string

		resp, httpRes, err := apiClient.TerminalSettingsStoreLevelApi.PatchMerchantsMerchantIdStoresReferenceTerminalLogos(context.Background(), merchantId, reference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalSettingsStoreLevelApiService PatchMerchantsMerchantIdStoresReferenceTerminalSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string
		var reference string

		resp, httpRes, err := apiClient.TerminalSettingsStoreLevelApi.PatchMerchantsMerchantIdStoresReferenceTerminalSettings(context.Background(), merchantId, reference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalSettingsStoreLevelApiService PatchStoresStoreIdTerminalLogos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var storeId string

		resp, httpRes, err := apiClient.TerminalSettingsStoreLevelApi.PatchStoresStoreIdTerminalLogos(context.Background(), storeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalSettingsStoreLevelApiService PatchStoresStoreIdTerminalSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var storeId string

		resp, httpRes, err := apiClient.TerminalSettingsStoreLevelApi.PatchStoresStoreIdTerminalSettings(context.Background(), storeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
