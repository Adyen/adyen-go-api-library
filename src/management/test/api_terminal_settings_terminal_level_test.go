/*
Management API

Testing TerminalSettingsTerminalLevelApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package Management

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_Management_TerminalSettingsTerminalLevelApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TerminalSettingsTerminalLevelApiService GetTerminalsTerminalIdTerminalLogos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminalId string

		resp, httpRes, err := apiClient.TerminalSettingsTerminalLevelApi.GetTerminalsTerminalIdTerminalLogos(context.Background(), terminalId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalSettingsTerminalLevelApiService GetTerminalsTerminalIdTerminalSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminalId string

		resp, httpRes, err := apiClient.TerminalSettingsTerminalLevelApi.GetTerminalsTerminalIdTerminalSettings(context.Background(), terminalId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalSettingsTerminalLevelApiService PatchTerminalsTerminalIdTerminalLogos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminalId string

		resp, httpRes, err := apiClient.TerminalSettingsTerminalLevelApi.PatchTerminalsTerminalIdTerminalLogos(context.Background(), terminalId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalSettingsTerminalLevelApiService PatchTerminalsTerminalIdTerminalSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var terminalId string

		resp, httpRes, err := apiClient.TerminalSettingsTerminalLevelApi.PatchTerminalsTerminalIdTerminalSettings(context.Background(), terminalId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
