/*
Management API

Testing TerminalOrdersMerchantLevelApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package Management

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_Management_TerminalOrdersMerchantLevelApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TerminalOrdersMerchantLevelApiService GetMerchantsMerchantIdBillingEntities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string

		resp, httpRes, err := apiClient.TerminalOrdersMerchantLevelApi.GetMerchantsMerchantIdBillingEntities(context.Background(), merchantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalOrdersMerchantLevelApiService GetMerchantsMerchantIdShippingLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string

		resp, httpRes, err := apiClient.TerminalOrdersMerchantLevelApi.GetMerchantsMerchantIdShippingLocations(context.Background(), merchantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalOrdersMerchantLevelApiService GetMerchantsMerchantIdTerminalModels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string

		resp, httpRes, err := apiClient.TerminalOrdersMerchantLevelApi.GetMerchantsMerchantIdTerminalModels(context.Background(), merchantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalOrdersMerchantLevelApiService GetMerchantsMerchantIdTerminalOrders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string

		resp, httpRes, err := apiClient.TerminalOrdersMerchantLevelApi.GetMerchantsMerchantIdTerminalOrders(context.Background(), merchantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalOrdersMerchantLevelApiService GetMerchantsMerchantIdTerminalOrdersOrderId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string
		var orderId string

		resp, httpRes, err := apiClient.TerminalOrdersMerchantLevelApi.GetMerchantsMerchantIdTerminalOrdersOrderId(context.Background(), merchantId, orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalOrdersMerchantLevelApiService GetMerchantsMerchantIdTerminalProducts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string

		resp, httpRes, err := apiClient.TerminalOrdersMerchantLevelApi.GetMerchantsMerchantIdTerminalProducts(context.Background(), merchantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalOrdersMerchantLevelApiService PatchMerchantsMerchantIdTerminalOrdersOrderId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string
		var orderId string

		resp, httpRes, err := apiClient.TerminalOrdersMerchantLevelApi.PatchMerchantsMerchantIdTerminalOrdersOrderId(context.Background(), merchantId, orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalOrdersMerchantLevelApiService PostMerchantsMerchantIdShippingLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string

		resp, httpRes, err := apiClient.TerminalOrdersMerchantLevelApi.PostMerchantsMerchantIdShippingLocations(context.Background(), merchantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalOrdersMerchantLevelApiService PostMerchantsMerchantIdTerminalOrders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string

		resp, httpRes, err := apiClient.TerminalOrdersMerchantLevelApi.PostMerchantsMerchantIdTerminalOrders(context.Background(), merchantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TerminalOrdersMerchantLevelApiService PostMerchantsMerchantIdTerminalOrdersOrderIdCancel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string
		var orderId string

		resp, httpRes, err := apiClient.TerminalOrdersMerchantLevelApi.PostMerchantsMerchantIdTerminalOrdersOrderIdCancel(context.Background(), merchantId, orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
