/*
Management API

Testing WebhooksMerchantLevelApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package Management

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_Management_WebhooksMerchantLevelApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WebhooksMerchantLevelApiService DeleteMerchantsMerchantIdWebhooksWebhookId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string
		var webhookId string

		resp, httpRes, err := apiClient.WebhooksMerchantLevelApi.DeleteMerchantsMerchantIdWebhooksWebhookId(context.Background(), merchantId, webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksMerchantLevelApiService GetMerchantsMerchantIdWebhooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string

		resp, httpRes, err := apiClient.WebhooksMerchantLevelApi.GetMerchantsMerchantIdWebhooks(context.Background(), merchantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksMerchantLevelApiService GetMerchantsMerchantIdWebhooksWebhookId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string
		var webhookId string

		resp, httpRes, err := apiClient.WebhooksMerchantLevelApi.GetMerchantsMerchantIdWebhooksWebhookId(context.Background(), merchantId, webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksMerchantLevelApiService PatchMerchantsMerchantIdWebhooksWebhookId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string
		var webhookId string

		resp, httpRes, err := apiClient.WebhooksMerchantLevelApi.PatchMerchantsMerchantIdWebhooksWebhookId(context.Background(), merchantId, webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksMerchantLevelApiService PostMerchantsMerchantIdWebhooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string

		resp, httpRes, err := apiClient.WebhooksMerchantLevelApi.PostMerchantsMerchantIdWebhooks(context.Background(), merchantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksMerchantLevelApiService PostMerchantsMerchantIdWebhooksWebhookIdGenerateHmac", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string
		var webhookId string

		resp, httpRes, err := apiClient.WebhooksMerchantLevelApi.PostMerchantsMerchantIdWebhooksWebhookIdGenerateHmac(context.Background(), merchantId, webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksMerchantLevelApiService PostMerchantsMerchantIdWebhooksWebhookIdTest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string
		var webhookId string

		resp, httpRes, err := apiClient.WebhooksMerchantLevelApi.PostMerchantsMerchantIdWebhooksWebhookIdTest(context.Background(), merchantId, webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
