/*
Management API

Testing AccountStoreLevelApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package Management

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_Management_AccountStoreLevelApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AccountStoreLevelApiService GetMerchantsMerchantIdStores", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string

		resp, httpRes, err := apiClient.AccountStoreLevelApi.GetMerchantsMerchantIdStores(context.Background(), merchantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountStoreLevelApiService GetMerchantsMerchantIdStoresStoreId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string
		var storeId string

		resp, httpRes, err := apiClient.AccountStoreLevelApi.GetMerchantsMerchantIdStoresStoreId(context.Background(), merchantId, storeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountStoreLevelApiService GetStores", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountStoreLevelApi.GetStores(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountStoreLevelApiService GetStoresStoreId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var storeId string

		resp, httpRes, err := apiClient.AccountStoreLevelApi.GetStoresStoreId(context.Background(), storeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountStoreLevelApiService PatchMerchantsMerchantIdStoresStoreId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string
		var storeId string

		resp, httpRes, err := apiClient.AccountStoreLevelApi.PatchMerchantsMerchantIdStoresStoreId(context.Background(), merchantId, storeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountStoreLevelApiService PatchStoresStoreId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var storeId string

		resp, httpRes, err := apiClient.AccountStoreLevelApi.PatchStoresStoreId(context.Background(), storeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountStoreLevelApiService PostMerchantsMerchantIdStores", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantId string

		resp, httpRes, err := apiClient.AccountStoreLevelApi.PostMerchantsMerchantIdStores(context.Background(), merchantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountStoreLevelApiService PostStores", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountStoreLevelApi.PostStores(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
