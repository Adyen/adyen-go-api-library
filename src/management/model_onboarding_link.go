/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// OnboardingLink struct for OnboardingLink
type OnboardingLink struct {
	AdminUser *User2 `json:"adminUser,omitempty"`
	// Company id
	CompanyId *string `json:"companyId,omitempty"`
	// Contacts
	Contacts []Contact2 `json:"contacts,omitempty"`
	// Country
	Country *string `json:"country,omitempty"`
	// Onboarding URL expiry date
	ExpiryDate *string `json:"expiryDate,omitempty"`
	// Onboarding link id
	Id *string `json:"id,omitempty"`
	// Merchant id
	MerchantId *string `json:"merchantId,omitempty"`
	// If supplied, merchant will be redirected to this URL after onboarding form submission
	ReturnUrl *string `json:"returnUrl,omitempty"`
	// Terms and conditions URL
	TermsAndConditionsUrl *string `json:"termsAndConditionsUrl,omitempty"`
	// Onboarding URL
	Url *string `json:"url,omitempty"`
	// Web address
	WebAddress *string `json:"webAddress,omitempty"`
	Webhook *Webhook2 `json:"webhook,omitempty"`
}

// NewOnboardingLink instantiates a new OnboardingLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnboardingLink() *OnboardingLink {
	this := OnboardingLink{}
	return &this
}

// NewOnboardingLinkWithDefaults instantiates a new OnboardingLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnboardingLinkWithDefaults() *OnboardingLink {
	this := OnboardingLink{}
	return &this
}

// GetAdminUser returns the AdminUser field value if set, zero value otherwise.
func (o *OnboardingLink) GetAdminUser() User2 {
	if o == nil || isNil(o.AdminUser) {
		var ret User2
		return ret
	}
	return *o.AdminUser
}

// GetAdminUserOk returns a tuple with the AdminUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardingLink) GetAdminUserOk() (*User2, bool) {
	if o == nil || isNil(o.AdminUser) {
		return nil, false
	}
	return o.AdminUser, true
}

// HasAdminUser returns a boolean if a field has been set.
func (o *OnboardingLink) HasAdminUser() bool {
	if o != nil && !isNil(o.AdminUser) {
		return true
	}

	return false
}

// SetAdminUser gets a reference to the given User2 and assigns it to the AdminUser field.
func (o *OnboardingLink) SetAdminUser(v User2) {
	o.AdminUser = &v
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *OnboardingLink) GetCompanyId() string {
	if o == nil || isNil(o.CompanyId) {
		var ret string
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardingLink) GetCompanyIdOk() (*string, bool) {
	if o == nil || isNil(o.CompanyId) {
		return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *OnboardingLink) HasCompanyId() bool {
	if o != nil && !isNil(o.CompanyId) {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given string and assigns it to the CompanyId field.
func (o *OnboardingLink) SetCompanyId(v string) {
	o.CompanyId = &v
}

// GetContacts returns the Contacts field value if set, zero value otherwise.
func (o *OnboardingLink) GetContacts() []Contact2 {
	if o == nil || isNil(o.Contacts) {
		var ret []Contact2
		return ret
	}
	return o.Contacts
}

// GetContactsOk returns a tuple with the Contacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardingLink) GetContactsOk() ([]Contact2, bool) {
	if o == nil || isNil(o.Contacts) {
		return nil, false
	}
	return o.Contacts, true
}

// HasContacts returns a boolean if a field has been set.
func (o *OnboardingLink) HasContacts() bool {
	if o != nil && !isNil(o.Contacts) {
		return true
	}

	return false
}

// SetContacts gets a reference to the given []Contact2 and assigns it to the Contacts field.
func (o *OnboardingLink) SetContacts(v []Contact2) {
	o.Contacts = v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *OnboardingLink) GetCountry() string {
	if o == nil || isNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardingLink) GetCountryOk() (*string, bool) {
	if o == nil || isNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *OnboardingLink) HasCountry() bool {
	if o != nil && !isNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *OnboardingLink) SetCountry(v string) {
	o.Country = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *OnboardingLink) GetExpiryDate() string {
	if o == nil || isNil(o.ExpiryDate) {
		var ret string
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardingLink) GetExpiryDateOk() (*string, bool) {
	if o == nil || isNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *OnboardingLink) HasExpiryDate() bool {
	if o != nil && !isNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given string and assigns it to the ExpiryDate field.
func (o *OnboardingLink) SetExpiryDate(v string) {
	o.ExpiryDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OnboardingLink) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardingLink) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OnboardingLink) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OnboardingLink) SetId(v string) {
	o.Id = &v
}

// GetMerchantId returns the MerchantId field value if set, zero value otherwise.
func (o *OnboardingLink) GetMerchantId() string {
	if o == nil || isNil(o.MerchantId) {
		var ret string
		return ret
	}
	return *o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardingLink) GetMerchantIdOk() (*string, bool) {
	if o == nil || isNil(o.MerchantId) {
		return nil, false
	}
	return o.MerchantId, true
}

// HasMerchantId returns a boolean if a field has been set.
func (o *OnboardingLink) HasMerchantId() bool {
	if o != nil && !isNil(o.MerchantId) {
		return true
	}

	return false
}

// SetMerchantId gets a reference to the given string and assigns it to the MerchantId field.
func (o *OnboardingLink) SetMerchantId(v string) {
	o.MerchantId = &v
}

// GetReturnUrl returns the ReturnUrl field value if set, zero value otherwise.
func (o *OnboardingLink) GetReturnUrl() string {
	if o == nil || isNil(o.ReturnUrl) {
		var ret string
		return ret
	}
	return *o.ReturnUrl
}

// GetReturnUrlOk returns a tuple with the ReturnUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardingLink) GetReturnUrlOk() (*string, bool) {
	if o == nil || isNil(o.ReturnUrl) {
		return nil, false
	}
	return o.ReturnUrl, true
}

// HasReturnUrl returns a boolean if a field has been set.
func (o *OnboardingLink) HasReturnUrl() bool {
	if o != nil && !isNil(o.ReturnUrl) {
		return true
	}

	return false
}

// SetReturnUrl gets a reference to the given string and assigns it to the ReturnUrl field.
func (o *OnboardingLink) SetReturnUrl(v string) {
	o.ReturnUrl = &v
}

// GetTermsAndConditionsUrl returns the TermsAndConditionsUrl field value if set, zero value otherwise.
func (o *OnboardingLink) GetTermsAndConditionsUrl() string {
	if o == nil || isNil(o.TermsAndConditionsUrl) {
		var ret string
		return ret
	}
	return *o.TermsAndConditionsUrl
}

// GetTermsAndConditionsUrlOk returns a tuple with the TermsAndConditionsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardingLink) GetTermsAndConditionsUrlOk() (*string, bool) {
	if o == nil || isNil(o.TermsAndConditionsUrl) {
		return nil, false
	}
	return o.TermsAndConditionsUrl, true
}

// HasTermsAndConditionsUrl returns a boolean if a field has been set.
func (o *OnboardingLink) HasTermsAndConditionsUrl() bool {
	if o != nil && !isNil(o.TermsAndConditionsUrl) {
		return true
	}

	return false
}

// SetTermsAndConditionsUrl gets a reference to the given string and assigns it to the TermsAndConditionsUrl field.
func (o *OnboardingLink) SetTermsAndConditionsUrl(v string) {
	o.TermsAndConditionsUrl = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *OnboardingLink) GetUrl() string {
	if o == nil || isNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardingLink) GetUrlOk() (*string, bool) {
	if o == nil || isNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *OnboardingLink) HasUrl() bool {
	if o != nil && !isNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *OnboardingLink) SetUrl(v string) {
	o.Url = &v
}

// GetWebAddress returns the WebAddress field value if set, zero value otherwise.
func (o *OnboardingLink) GetWebAddress() string {
	if o == nil || isNil(o.WebAddress) {
		var ret string
		return ret
	}
	return *o.WebAddress
}

// GetWebAddressOk returns a tuple with the WebAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardingLink) GetWebAddressOk() (*string, bool) {
	if o == nil || isNil(o.WebAddress) {
		return nil, false
	}
	return o.WebAddress, true
}

// HasWebAddress returns a boolean if a field has been set.
func (o *OnboardingLink) HasWebAddress() bool {
	if o != nil && !isNil(o.WebAddress) {
		return true
	}

	return false
}

// SetWebAddress gets a reference to the given string and assigns it to the WebAddress field.
func (o *OnboardingLink) SetWebAddress(v string) {
	o.WebAddress = &v
}

// GetWebhook returns the Webhook field value if set, zero value otherwise.
func (o *OnboardingLink) GetWebhook() Webhook2 {
	if o == nil || isNil(o.Webhook) {
		var ret Webhook2
		return ret
	}
	return *o.Webhook
}

// GetWebhookOk returns a tuple with the Webhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardingLink) GetWebhookOk() (*Webhook2, bool) {
	if o == nil || isNil(o.Webhook) {
		return nil, false
	}
	return o.Webhook, true
}

// HasWebhook returns a boolean if a field has been set.
func (o *OnboardingLink) HasWebhook() bool {
	if o != nil && !isNil(o.Webhook) {
		return true
	}

	return false
}

// SetWebhook gets a reference to the given Webhook2 and assigns it to the Webhook field.
func (o *OnboardingLink) SetWebhook(v Webhook2) {
	o.Webhook = &v
}

func (o OnboardingLink) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AdminUser) {
		toSerialize["adminUser"] = o.AdminUser
	}
	if !isNil(o.CompanyId) {
		toSerialize["companyId"] = o.CompanyId
	}
	if !isNil(o.Contacts) {
		toSerialize["contacts"] = o.Contacts
	}
	if !isNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !isNil(o.ExpiryDate) {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.MerchantId) {
		toSerialize["merchantId"] = o.MerchantId
	}
	if !isNil(o.ReturnUrl) {
		toSerialize["returnUrl"] = o.ReturnUrl
	}
	if !isNil(o.TermsAndConditionsUrl) {
		toSerialize["termsAndConditionsUrl"] = o.TermsAndConditionsUrl
	}
	if !isNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !isNil(o.WebAddress) {
		toSerialize["webAddress"] = o.WebAddress
	}
	if !isNil(o.Webhook) {
		toSerialize["webhook"] = o.Webhook
	}
	return json.Marshal(toSerialize)
}

type NullableOnboardingLink struct {
	value *OnboardingLink
	isSet bool
}

func (v NullableOnboardingLink) Get() *OnboardingLink {
	return v.value
}

func (v *NullableOnboardingLink) Set(val *OnboardingLink) {
	v.value = val
	v.isSet = true
}

func (v NullableOnboardingLink) IsSet() bool {
	return v.isSet
}

func (v *NullableOnboardingLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnboardingLink(val *OnboardingLink) *NullableOnboardingLink {
	return &NullableOnboardingLink{value: val, isSet: true}
}

func (v NullableOnboardingLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnboardingLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


