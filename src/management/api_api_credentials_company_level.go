/*
Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"context"
	"encoding/json"
	"io/ioutil"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// APICredentialsCompanyLevelApi APICredentialsCompanyLevelApi service
type APICredentialsCompanyLevelApi common.Service

type APICredentialsCompanyLevelApiCreateApiCredentialConfig struct {
	ctx                               context.Context
	companyId                         string
	createCompanyApiCredentialRequest *CreateCompanyApiCredentialRequest
}

func (r APICredentialsCompanyLevelApiCreateApiCredentialConfig) CreateCompanyApiCredentialRequest(createCompanyApiCredentialRequest CreateCompanyApiCredentialRequest) APICredentialsCompanyLevelApiCreateApiCredentialConfig {
	r.createCompanyApiCredentialRequest = &createCompanyApiCredentialRequest
	return r
}

/*
CreateApiCredential Create an API credential.

Creates an [API credential](https://docs.adyen.com/development-resources/api-credentials) for the company account identified in the path. In the request, you can specify which merchant accounts the new API credential will have access to, as well as its roles and allowed origins.

The response includes several types of authentication details:
* [API key](https://docs.adyen.com/development-resources/api-authentication#api-key-authentication): used for API request authentication.
* [Client key](https://docs.adyen.com/development-resources/client-side-authentication#how-it-works): public key used for client-side authentication.
* [Username and password](https://docs.adyen.com/development-resources/api-authentication#using-basic-authentication): used for basic authentication.

> Make sure you store the API key securely in your system. You won't be able to retrieve it later.

If your API key is lost or compromised, you need to [generate a new API key](https://docs.adyen.com/api-explorer/#/ManagementService/v1/post/companies/{companyId}/apiCredentials/{apiCredentialId}/generateApiKey).

To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—API credentials read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param companyId The unique identifier of the company account.
	@return APICredentialsCompanyLevelApiCreateApiCredentialConfig
*/
func (a *APICredentialsCompanyLevelApi) CreateApiCredentialConfig(ctx context.Context, companyId string) APICredentialsCompanyLevelApiCreateApiCredentialConfig {
	return APICredentialsCompanyLevelApiCreateApiCredentialConfig{
		ctx:       ctx,
		companyId: companyId,
	}
}

/*
Create an API credential.
Creates an [API credential](https://docs.adyen.com/development-resources/api-credentials) for the company account identified in the path. In the request, you can specify which merchant accounts the new API credential will have access to, as well as its roles and allowed origins.  The response includes several types of authentication details: * [API key](https://docs.adyen.com/development-resources/api-authentication#api-key-authentication): used for API request authentication. * [Client key](https://docs.adyen.com/development-resources/client-side-authentication#how-it-works): public key used for client-side authentication. * [Username and password](https://docs.adyen.com/development-resources/api-authentication#using-basic-authentication): used for basic authentication.  &gt; Make sure you store the API key securely in your system. You won&#39;t be able to retrieve it later.  If your API key is lost or compromised, you need to [generate a new API key](https://docs.adyen.com/api-explorer/#/ManagementService/v1/post/companies/{companyId}/apiCredentials/{apiCredentialId}/generateApiKey).  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write
 * @param companyId The unique identifier of the company account.
 * @param req CreateCompanyApiCredentialRequest - reference of CreateCompanyApiCredentialRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CreateCompanyApiCredentialResponse
*/

func (a *APICredentialsCompanyLevelApi) CreateApiCredential(r APICredentialsCompanyLevelApiCreateApiCredentialConfig) (CreateCompanyApiCredentialResponse, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &CreateCompanyApiCredentialResponse{}
	path := "/companies/{companyId}/apiCredentials"
	path = strings.Replace(path, "{"+"companyId"+"}", url.PathEscape(common.ParameterValueToString(r.companyId, "companyId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.createCompanyApiCredentialRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type APICredentialsCompanyLevelApiGetApiCredentialConfig struct {
	ctx             context.Context
	companyId       string
	apiCredentialId string
}

/*
GetApiCredential Get an API credential

Returns the [API credential](https://docs.adyen.com/development-resources/api-credentials) identified in the path.

To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—API credentials read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param companyId The unique identifier of the company account.
	@param apiCredentialId Unique identifier of the API credential.
	@return APICredentialsCompanyLevelApiGetApiCredentialConfig
*/
func (a *APICredentialsCompanyLevelApi) GetApiCredentialConfig(ctx context.Context, companyId string, apiCredentialId string) APICredentialsCompanyLevelApiGetApiCredentialConfig {
	return APICredentialsCompanyLevelApiGetApiCredentialConfig{
		ctx:             ctx,
		companyId:       companyId,
		apiCredentialId: apiCredentialId,
	}
}

/*
Get an API credential
Returns the [API credential](https://docs.adyen.com/development-resources/api-credentials) identified in the path.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write
 * @param companyId The unique identifier of the company account.
 * @param apiCredentialId Unique identifier of the API credential.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CompanyApiCredential
*/

func (a *APICredentialsCompanyLevelApi) GetApiCredential(r APICredentialsCompanyLevelApiGetApiCredentialConfig) (CompanyApiCredential, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &CompanyApiCredential{}
	path := "/companies/{companyId}/apiCredentials/{apiCredentialId}"
	path = strings.Replace(path, "{"+"companyId"+"}", url.PathEscape(common.ParameterValueToString(r.companyId, "companyId")), -1)
	path = strings.Replace(path, "{"+"apiCredentialId"+"}", url.PathEscape(common.ParameterValueToString(r.apiCredentialId, "apiCredentialId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type APICredentialsCompanyLevelApiListApiCredentialsConfig struct {
	ctx        context.Context
	companyId  string
	pageNumber *int32
	pageSize   *int32
}

// The number of the page to fetch.
func (r APICredentialsCompanyLevelApiListApiCredentialsConfig) PageNumber(pageNumber int32) APICredentialsCompanyLevelApiListApiCredentialsConfig {
	r.pageNumber = &pageNumber
	return r
}

// The number of items to have on a page, maximum 100. The default is 10 items on a page.
func (r APICredentialsCompanyLevelApiListApiCredentialsConfig) PageSize(pageSize int32) APICredentialsCompanyLevelApiListApiCredentialsConfig {
	r.pageSize = &pageSize
	return r
}

/*
ListApiCredentials Get a list of API credentials

Returns the list of [API credentials](https://docs.adyen.com/development-resources/api-credentials) for the company account. The list is grouped into pages as defined by the query parameters.

To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—API credentials read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param companyId The unique identifier of the company account.
	@return APICredentialsCompanyLevelApiListApiCredentialsConfig
*/
func (a *APICredentialsCompanyLevelApi) ListApiCredentialsConfig(ctx context.Context, companyId string) APICredentialsCompanyLevelApiListApiCredentialsConfig {
	return APICredentialsCompanyLevelApiListApiCredentialsConfig{
		ctx:       ctx,
		companyId: companyId,
	}
}

/*
Get a list of API credentials
Returns the list of [API credentials](https://docs.adyen.com/development-resources/api-credentials) for the company account. The list is grouped into pages as defined by the query parameters.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write
 * @param companyId The unique identifier of the company account.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ListCompanyApiCredentialsResponse
*/

func (a *APICredentialsCompanyLevelApi) ListApiCredentials(r APICredentialsCompanyLevelApiListApiCredentialsConfig) (ListCompanyApiCredentialsResponse, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &ListCompanyApiCredentialsResponse{}
	path := "/companies/{companyId}/apiCredentials"
	path = strings.Replace(path, "{"+"companyId"+"}", url.PathEscape(common.ParameterValueToString(r.companyId, "companyId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.pageNumber != nil {
		common.ParameterAddToQuery(queryParams, "pageNumber", r.pageNumber, "")
	}
	if r.pageSize != nil {
		common.ParameterAddToQuery(queryParams, "pageSize", r.pageSize, "")
	}
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type APICredentialsCompanyLevelApiUpdateApiCredentialConfig struct {
	ctx                               context.Context
	companyId                         string
	apiCredentialId                   string
	updateCompanyApiCredentialRequest *UpdateCompanyApiCredentialRequest
}

func (r APICredentialsCompanyLevelApiUpdateApiCredentialConfig) UpdateCompanyApiCredentialRequest(updateCompanyApiCredentialRequest UpdateCompanyApiCredentialRequest) APICredentialsCompanyLevelApiUpdateApiCredentialConfig {
	r.updateCompanyApiCredentialRequest = &updateCompanyApiCredentialRequest
	return r
}

/*
UpdateApiCredential Update an API credential.

Changes the API credential's roles, merchant account access, or allowed origins. The request has the new values for the fields you want to change. The response contains the full updated API credential, including the new values from the request.

To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—API credentials read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param companyId The unique identifier of the company account.
	@param apiCredentialId Unique identifier of the API credential.
	@return APICredentialsCompanyLevelApiUpdateApiCredentialConfig
*/
func (a *APICredentialsCompanyLevelApi) UpdateApiCredentialConfig(ctx context.Context, companyId string, apiCredentialId string) APICredentialsCompanyLevelApiUpdateApiCredentialConfig {
	return APICredentialsCompanyLevelApiUpdateApiCredentialConfig{
		ctx:             ctx,
		companyId:       companyId,
		apiCredentialId: apiCredentialId,
	}
}

/*
Update an API credential.
Changes the API credential&#39;s roles, merchant account access, or allowed origins. The request has the new values for the fields you want to change. The response contains the full updated API credential, including the new values from the request.   To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—API credentials read and write
 * @param companyId The unique identifier of the company account.
 * @param apiCredentialId Unique identifier of the API credential.
 * @param req UpdateCompanyApiCredentialRequest - reference of UpdateCompanyApiCredentialRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CompanyApiCredential
*/

func (a *APICredentialsCompanyLevelApi) UpdateApiCredential(r APICredentialsCompanyLevelApiUpdateApiCredentialConfig) (CompanyApiCredential, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &CompanyApiCredential{}
	path := "/companies/{companyId}/apiCredentials/{apiCredentialId}"
	path = strings.Replace(path, "{"+"companyId"+"}", url.PathEscape(common.ParameterValueToString(r.companyId, "companyId")), -1)
	path = strings.Replace(path, "{"+"apiCredentialId"+"}", url.PathEscape(common.ParameterValueToString(r.apiCredentialId, "apiCredentialId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.updateCompanyApiCredentialRequest,
		res,
		_nethttp.MethodPatch,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}
