/*
Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"context"
	_context "context"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// UsersMerchantLevelApi UsersMerchantLevelApi service
type UsersMerchantLevelApi common.Service

type UsersMerchantLevelApiCreateNewUserConfig struct {
	ctx                       context.Context
	merchantId                string
	createMerchantUserRequest *CreateMerchantUserRequest
}

func (r UsersMerchantLevelApiCreateNewUserConfig) CreateMerchantUserRequest(createMerchantUserRequest CreateMerchantUserRequest) UsersMerchantLevelApiCreateNewUserConfig {
	r.createMerchantUserRequest = &createMerchantUserRequest
	return r
}

/*
CreateNewUser Create a new user

Creates a user for the `merchantId` specified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Users read and write


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param merchantId Unique identifier of the merchant.
 @return UsersMerchantLevelApiCreateNewUserConfig
*/
func (a *UsersMerchantLevelApi) CreateNewUserConfig(ctx context.Context, merchantId string) UsersMerchantLevelApiCreateNewUserConfig {
	return UsersMerchantLevelApiCreateNewUserConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Create a new user
Creates a user for the &#x60;merchantId&#x60; specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Users read and write
 * @param merchantId Unique identifier of the merchant.
 * @param req CreateMerchantUserRequest - reference of CreateMerchantUserRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CreateUserResponse
*/

func (a *UsersMerchantLevelApi) CreateNewUser(r UsersMerchantLevelApiCreateNewUserConfig) (CreateUserResponse, *_nethttp.Response, error) {
	res := &CreateUserResponse{}
	path := "/merchants/{merchantId}/users"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodPost, r.createMerchantUserRequest, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type UsersMerchantLevelApiGetUserDetailsConfig struct {
	ctx        context.Context
	merchantId string
	userId     string
}

/*
GetUserDetails Get user details

Returns user details for the `userId` and the `merchantId` specified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Users read and write


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param merchantId Unique identifier of the merchant.
 @param userId Unique identifier of the user.
 @return UsersMerchantLevelApiGetUserDetailsConfig
*/
func (a *UsersMerchantLevelApi) GetUserDetailsConfig(ctx context.Context, merchantId string, userId string) UsersMerchantLevelApiGetUserDetailsConfig {
	return UsersMerchantLevelApiGetUserDetailsConfig{
		ctx:        ctx,
		merchantId: merchantId,
		userId:     userId,
	}
}

/*
Get user details
Returns user details for the &#x60;userId&#x60; and the &#x60;merchantId&#x60; specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Users read and write
 * @param merchantId Unique identifier of the merchant.
 * @param userId Unique identifier of the user.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return User
*/

func (a *UsersMerchantLevelApi) GetUserDetails(r UsersMerchantLevelApiGetUserDetailsConfig) (User, *_nethttp.Response, error) {
	res := &User{}
	path := "/merchants/{merchantId}/users/{userId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"userId"+"}", url.PathEscape(common.ParameterValueToString(r.userId, "userId")), -1)
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodGet, nil, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type UsersMerchantLevelApiListUsersConfig struct {
	ctx        context.Context
	merchantId string
	pageNumber *int32
	pageSize   *int32
	username   *string
}

// The number of the page to fetch.
func (r UsersMerchantLevelApiListUsersConfig) PageNumber(pageNumber int32) UsersMerchantLevelApiListUsersConfig {
	r.pageNumber = &pageNumber
	return r
}

// The number of items to have on a page. Maximum value is **100**. The default is **10** items on a page.
func (r UsersMerchantLevelApiListUsersConfig) PageSize(pageSize int32) UsersMerchantLevelApiListUsersConfig {
	r.pageSize = &pageSize
	return r
}

// The partial or complete username to select all users that match.
func (r UsersMerchantLevelApiListUsersConfig) Username(username string) UsersMerchantLevelApiListUsersConfig {
	r.username = &username
	return r
}

/*
ListUsers Get a list of users

Returns a list of users associated with the `merchantId` specified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Users read and write


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param merchantId Unique identifier of the merchant.
 @return UsersMerchantLevelApiListUsersConfig
*/
func (a *UsersMerchantLevelApi) ListUsersConfig(ctx context.Context, merchantId string) UsersMerchantLevelApiListUsersConfig {
	return UsersMerchantLevelApiListUsersConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Get a list of users
Returns a list of users associated with the &#x60;merchantId&#x60; specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Users read and write
 * @param merchantId Unique identifier of the merchant.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ListMerchantUsersResponse
*/

func (a *UsersMerchantLevelApi) ListUsers(r UsersMerchantLevelApiListUsersConfig) (ListMerchantUsersResponse, *_nethttp.Response, error) {
	res := &ListMerchantUsersResponse{}
	path := "/merchants/{merchantId}/users"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	queryString := url.Values{}
	if r.pageNumber != nil {
		common.ParameterAddToQuery(queryString, "pageNumber", r.pageNumber, "")
	}
	if r.pageSize != nil {
		common.ParameterAddToQuery(queryString, "pageSize", r.pageSize, "")
	}
	if r.username != nil {
		common.ParameterAddToQuery(queryString, "username", r.username, "")
	}
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodGet, nil, res, a.BasePath()+path+"?"+queryString.Encode(), []_context.Context{r.ctx})
	return *res, httpRes, err
}

type UsersMerchantLevelApiUpdateUserConfig struct {
	ctx                       context.Context
	merchantId                string
	userId                    string
	updateMerchantUserRequest *UpdateMerchantUserRequest
}

func (r UsersMerchantLevelApiUpdateUserConfig) UpdateMerchantUserRequest(updateMerchantUserRequest UpdateMerchantUserRequest) UsersMerchantLevelApiUpdateUserConfig {
	r.updateMerchantUserRequest = &updateMerchantUserRequest
	return r
}

/*
UpdateUser Update a user

Updates user details for the `userId` and the `merchantId` specified in the path.

To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Users read and write


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param merchantId Unique identifier of the merchant.
 @param userId Unique identifier of the user.
 @return UsersMerchantLevelApiUpdateUserConfig
*/
func (a *UsersMerchantLevelApi) UpdateUserConfig(ctx context.Context, merchantId string, userId string) UsersMerchantLevelApiUpdateUserConfig {
	return UsersMerchantLevelApiUpdateUserConfig{
		ctx:        ctx,
		merchantId: merchantId,
		userId:     userId,
	}
}

/*
Update a user
Updates user details for the &#x60;userId&#x60; and the &#x60;merchantId&#x60; specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Users read and write
 * @param merchantId Unique identifier of the merchant.
 * @param userId Unique identifier of the user.
 * @param req UpdateMerchantUserRequest - reference of UpdateMerchantUserRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return User
*/

func (a *UsersMerchantLevelApi) UpdateUser(r UsersMerchantLevelApiUpdateUserConfig) (User, *_nethttp.Response, error) {
	res := &User{}
	path := "/merchants/{merchantId}/users/{userId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"userId"+"}", url.PathEscape(common.ParameterValueToString(r.userId, "userId")), -1)
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodPatch, r.updateMerchantUserRequest, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}
