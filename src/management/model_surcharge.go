/*
Management API

Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```

API version: 1
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Management

import (
	"encoding/json"
)

// Surcharge struct for Surcharge
type Surcharge struct {
	// Show the surcharge details on the terminal, so the shopper can confirm.
	AskConfirmation *bool `json:"askConfirmation,omitempty"`
	// Surcharge fees or percentages for specific payment methods, funding sources (credit or debit), and currencies.
	Configurations []Configuration `json:"configurations,omitempty"`
}

// NewSurcharge instantiates a new Surcharge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSurcharge() *Surcharge {
	this := Surcharge{}
	return &this
}

// NewSurchargeWithDefaults instantiates a new Surcharge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSurchargeWithDefaults() *Surcharge {
	this := Surcharge{}
	return &this
}

// GetAskConfirmation returns the AskConfirmation field value if set, zero value otherwise.
func (o *Surcharge) GetAskConfirmation() bool {
	if o == nil || isNil(o.AskConfirmation) {
		var ret bool
		return ret
	}
	return *o.AskConfirmation
}

// GetAskConfirmationOk returns a tuple with the AskConfirmation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Surcharge) GetAskConfirmationOk() (*bool, bool) {
	if o == nil || isNil(o.AskConfirmation) {
		return nil, false
	}
	return o.AskConfirmation, true
}

// HasAskConfirmation returns a boolean if a field has been set.
func (o *Surcharge) HasAskConfirmation() bool {
	if o != nil && !isNil(o.AskConfirmation) {
		return true
	}

	return false
}

// SetAskConfirmation gets a reference to the given bool and assigns it to the AskConfirmation field.
func (o *Surcharge) SetAskConfirmation(v bool) {
	o.AskConfirmation = &v
}

// GetConfigurations returns the Configurations field value if set, zero value otherwise.
func (o *Surcharge) GetConfigurations() []Configuration {
	if o == nil || isNil(o.Configurations) {
		var ret []Configuration
		return ret
	}
	return o.Configurations
}

// GetConfigurationsOk returns a tuple with the Configurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Surcharge) GetConfigurationsOk() ([]Configuration, bool) {
	if o == nil || isNil(o.Configurations) {
		return nil, false
	}
	return o.Configurations, true
}

// HasConfigurations returns a boolean if a field has been set.
func (o *Surcharge) HasConfigurations() bool {
	if o != nil && !isNil(o.Configurations) {
		return true
	}

	return false
}

// SetConfigurations gets a reference to the given []Configuration and assigns it to the Configurations field.
func (o *Surcharge) SetConfigurations(v []Configuration) {
	o.Configurations = v
}

func (o Surcharge) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AskConfirmation) {
		toSerialize["askConfirmation"] = o.AskConfirmation
	}
	if !isNil(o.Configurations) {
		toSerialize["configurations"] = o.Configurations
	}
	return json.Marshal(toSerialize)
}

type NullableSurcharge struct {
	value *Surcharge
	isSet bool
}

func (v NullableSurcharge) Get() *Surcharge {
	return v.value
}

func (v *NullableSurcharge) Set(val *Surcharge) {
	v.value = val
	v.isSet = true
}

func (v NullableSurcharge) IsSet() bool {
	return v.isSet
}

func (v *NullableSurcharge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSurcharge(val *Surcharge) *NullableSurcharge {
	return &NullableSurcharge{value: val, isSet: true}
}

func (v NullableSurcharge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSurcharge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


