/*
Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"context"
	"encoding/json"
	"io/ioutil"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// PayoutSettingsMerchantLevelApi PayoutSettingsMerchantLevelApi service
type PayoutSettingsMerchantLevelApi common.Service

type PayoutSettingsMerchantLevelApiAddPayoutSettingConfig struct {
	ctx                   context.Context
	merchantId            string
	payoutSettingsRequest *PayoutSettingsRequest
}

func (r PayoutSettingsMerchantLevelApiAddPayoutSettingConfig) PayoutSettingsRequest(payoutSettingsRequest PayoutSettingsRequest) PayoutSettingsMerchantLevelApiAddPayoutSettingConfig {
	r.payoutSettingsRequest = &payoutSettingsRequest
	return r
}

/*
AddPayoutSetting Add a payout setting

Sends a request to add a payout setting for the merchant account specified in the path. A payout setting links the merchant account to the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments) that contains the details of the payout bank account. Adyen verifies the bank account before allowing and enabling the payout setting.

If you're accepting payments in multiple currencies, you may add multiple payout settings for the merchant account.

Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.

To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):

* Management API—Payout account settings read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@return PayoutSettingsMerchantLevelApiAddPayoutSettingConfig
*/
func (a *PayoutSettingsMerchantLevelApi) AddPayoutSettingConfig(ctx context.Context, merchantId string) PayoutSettingsMerchantLevelApiAddPayoutSettingConfig {
	return PayoutSettingsMerchantLevelApiAddPayoutSettingConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Add a payout setting
Sends a request to add a payout setting for the merchant account specified in the path. A payout setting links the merchant account to the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments) that contains the details of the payout bank account. Adyen verifies the bank account before allowing and enabling the payout setting.  If you&#39;re accepting payments in multiple currencies, you may add multiple payout settings for the merchant account.  Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):  * Management API—Payout account settings read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param req PayoutSettingsRequest - reference of PayoutSettingsRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PayoutSettings
*/

func (a *PayoutSettingsMerchantLevelApi) AddPayoutSetting(r PayoutSettingsMerchantLevelApiAddPayoutSettingConfig) (PayoutSettings, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &PayoutSettings{}
	path := "/merchants/{merchantId}/payoutSettings"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.payoutSettingsRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type PayoutSettingsMerchantLevelApiDeletePayoutSettingConfig struct {
	ctx              context.Context
	merchantId       string
	payoutSettingsId string
}

/*
DeletePayoutSetting Delete a payout setting

Deletes the payout setting identified in the path.

Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.

To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):

* Management API—Payout account settings read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param payoutSettingsId The unique identifier of the payout setting.
	@return PayoutSettingsMerchantLevelApiDeletePayoutSettingConfig
*/
func (a *PayoutSettingsMerchantLevelApi) DeletePayoutSettingConfig(ctx context.Context, merchantId string, payoutSettingsId string) PayoutSettingsMerchantLevelApiDeletePayoutSettingConfig {
	return PayoutSettingsMerchantLevelApiDeletePayoutSettingConfig{
		ctx:              ctx,
		merchantId:       merchantId,
		payoutSettingsId: payoutSettingsId,
	}
}

/*
Delete a payout setting
Deletes the payout setting identified in the path.  Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):  * Management API—Payout account settings read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param payoutSettingsId The unique identifier of the payout setting.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
*/

func (a *PayoutSettingsMerchantLevelApi) DeletePayoutSetting(r PayoutSettingsMerchantLevelApiDeletePayoutSettingConfig) (*_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	var res interface{}
	path := "/merchants/{merchantId}/payoutSettings/{payoutSettingsId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"payoutSettingsId"+"}", url.PathEscape(common.ParameterValueToString(r.payoutSettingsId, "payoutSettingsId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodDelete,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return httpRes, serviceError, err
	}
	return httpRes, serviceError, err
}

type PayoutSettingsMerchantLevelApiGetPayoutSettingConfig struct {
	ctx              context.Context
	merchantId       string
	payoutSettingsId string
}

/*
GetPayoutSetting Get a payout setting

Returns the payout setting identified in the path.

Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.

To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Payout account settings read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param payoutSettingsId The unique identifier of the payout setting.
	@return PayoutSettingsMerchantLevelApiGetPayoutSettingConfig
*/
func (a *PayoutSettingsMerchantLevelApi) GetPayoutSettingConfig(ctx context.Context, merchantId string, payoutSettingsId string) PayoutSettingsMerchantLevelApiGetPayoutSettingConfig {
	return PayoutSettingsMerchantLevelApiGetPayoutSettingConfig{
		ctx:              ctx,
		merchantId:       merchantId,
		payoutSettingsId: payoutSettingsId,
	}
}

/*
Get a payout setting
Returns the payout setting identified in the path.  Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payout account settings read
 * @param merchantId The unique identifier of the merchant account.
 * @param payoutSettingsId The unique identifier of the payout setting.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PayoutSettings
*/

func (a *PayoutSettingsMerchantLevelApi) GetPayoutSetting(r PayoutSettingsMerchantLevelApiGetPayoutSettingConfig) (PayoutSettings, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &PayoutSettings{}
	path := "/merchants/{merchantId}/payoutSettings/{payoutSettingsId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"payoutSettingsId"+"}", url.PathEscape(common.ParameterValueToString(r.payoutSettingsId, "payoutSettingsId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type PayoutSettingsMerchantLevelApiListPayoutSettingsConfig struct {
	ctx        context.Context
	merchantId string
}

/*
ListPayoutSettings Get a list of payout settings

Returns the list of payout settings for the merchant account identified in the path.

Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.

To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Payout account settings read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@return PayoutSettingsMerchantLevelApiListPayoutSettingsConfig
*/
func (a *PayoutSettingsMerchantLevelApi) ListPayoutSettingsConfig(ctx context.Context, merchantId string) PayoutSettingsMerchantLevelApiListPayoutSettingsConfig {
	return PayoutSettingsMerchantLevelApiListPayoutSettingsConfig{
		ctx:        ctx,
		merchantId: merchantId,
	}
}

/*
Get a list of payout settings
Returns the list of payout settings for the merchant account identified in the path.  Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payout account settings read
 * @param merchantId The unique identifier of the merchant account.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PayoutSettingsResponse
*/

func (a *PayoutSettingsMerchantLevelApi) ListPayoutSettings(r PayoutSettingsMerchantLevelApiListPayoutSettingsConfig) (PayoutSettingsResponse, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &PayoutSettingsResponse{}
	path := "/merchants/{merchantId}/payoutSettings"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}

type PayoutSettingsMerchantLevelApiUpdatePayoutSettingConfig struct {
	ctx                         context.Context
	merchantId                  string
	payoutSettingsId            string
	updatePayoutSettingsRequest *UpdatePayoutSettingsRequest
}

func (r PayoutSettingsMerchantLevelApiUpdatePayoutSettingConfig) UpdatePayoutSettingsRequest(updatePayoutSettingsRequest UpdatePayoutSettingsRequest) PayoutSettingsMerchantLevelApiUpdatePayoutSettingConfig {
	r.updatePayoutSettingsRequest = &updatePayoutSettingsRequest
	return r
}

/*
UpdatePayoutSetting Update a payout setting

Updates the payout setting identified in the path. You can enable or disable the payout setting.

Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.

To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):

* Management API—Payout account settings read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param merchantId The unique identifier of the merchant account.
	@param payoutSettingsId The unique identifier of the payout setting.
	@return PayoutSettingsMerchantLevelApiUpdatePayoutSettingConfig
*/
func (a *PayoutSettingsMerchantLevelApi) UpdatePayoutSettingConfig(ctx context.Context, merchantId string, payoutSettingsId string) PayoutSettingsMerchantLevelApiUpdatePayoutSettingConfig {
	return PayoutSettingsMerchantLevelApiUpdatePayoutSettingConfig{
		ctx:              ctx,
		merchantId:       merchantId,
		payoutSettingsId: payoutSettingsId,
	}
}

/*
Update a payout setting
Updates the payout setting identified in the path. You can enable or disable the payout setting.  Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):  * Management API—Payout account settings read and write
 * @param merchantId The unique identifier of the merchant account.
 * @param payoutSettingsId The unique identifier of the payout setting.
 * @param req UpdatePayoutSettingsRequest - reference of UpdatePayoutSettingsRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PayoutSettings
*/

func (a *PayoutSettingsMerchantLevelApi) UpdatePayoutSetting(r PayoutSettingsMerchantLevelApiUpdatePayoutSettingConfig) (PayoutSettings, *_nethttp.Response, RestServiceError, error) {
	var serviceError RestServiceError
	res := &PayoutSettings{}
	path := "/merchants/{merchantId}/payoutSettings/{payoutSettingsId}"
	path = strings.Replace(path, "{"+"merchantId"+"}", url.PathEscape(common.ParameterValueToString(r.merchantId, "merchantId")), -1)
	path = strings.Replace(path, "{"+"payoutSettingsId"+"}", url.PathEscape(common.ParameterValueToString(r.payoutSettingsId, "payoutSettingsId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.updatePayoutSettingsRequest,
		res,
		_nethttp.MethodPatch,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	if httpRes.StatusCode == 400 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 401 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 403 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 422 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}

	if httpRes.StatusCode == 500 {

		defer httpRes.Body.Close()
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError, err
	}
	return *res, httpRes, serviceError, err
}
