/*
Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"context"
	"encoding/json"
	"io/ioutil"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// TerminalActionsCompanyLevelApi TerminalActionsCompanyLevelApi service
type TerminalActionsCompanyLevelApi common.Service

type TerminalActionsCompanyLevelApiGetTerminalActionConfig struct {
	ctx       context.Context
	companyId string
	actionId  string
}

/*
GetTerminalAction Get terminal action

Returns the details of the [terminal action](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api) identified in the path.
To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Terminal actions read
* Management API—Terminal actions read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param companyId The unique identifier of the company account.
	@param actionId The unique identifier of the terminal action.
	@return TerminalActionsCompanyLevelApiGetTerminalActionConfig
*/
func (a *TerminalActionsCompanyLevelApi) GetTerminalActionConfig(ctx context.Context, companyId string, actionId string) TerminalActionsCompanyLevelApiGetTerminalActionConfig {
	return TerminalActionsCompanyLevelApiGetTerminalActionConfig{
		ctx:       ctx,
		companyId: companyId,
		actionId:  actionId,
	}
}

/*
Get terminal action
Returns the details of the [terminal action](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api) identified in the path. To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal actions read * Management API—Terminal actions read and write
 * @param companyId The unique identifier of the company account.
 * @param actionId The unique identifier of the terminal action.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ExternalTerminalAction
*/

func (a *TerminalActionsCompanyLevelApi) GetTerminalAction(r TerminalActionsCompanyLevelApiGetTerminalActionConfig) (ExternalTerminalAction, *_nethttp.Response, error) {
	var serviceError common.RestServiceError
	res := &ExternalTerminalAction{}
	path := "/companies/{companyId}/terminalActions/{actionId}"
	path = strings.Replace(path, "{"+"companyId"+"}", url.PathEscape(common.ParameterValueToString(r.companyId, "companyId")), -1)
	path = strings.Replace(path, "{"+"actionId"+"}", url.PathEscape(common.ParameterValueToString(r.actionId, "actionId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}
	return *res, httpRes, err
}

type TerminalActionsCompanyLevelApiListAndroidAppsConfig struct {
	ctx         context.Context
	companyId   string
	pageNumber  *int32
	pageSize    *int32
	packageName *string
	versionCode *int32
}

// The number of the page to fetch.
func (r TerminalActionsCompanyLevelApiListAndroidAppsConfig) PageNumber(pageNumber int32) TerminalActionsCompanyLevelApiListAndroidAppsConfig {
	r.pageNumber = &pageNumber
	return r
}

// The number of items to have on a page, maximum 100. The default is 20 items on a page.
func (r TerminalActionsCompanyLevelApiListAndroidAppsConfig) PageSize(pageSize int32) TerminalActionsCompanyLevelApiListAndroidAppsConfig {
	r.pageSize = &pageSize
	return r
}

// The package name that uniquely identifies the Android app.
func (r TerminalActionsCompanyLevelApiListAndroidAppsConfig) PackageName(packageName string) TerminalActionsCompanyLevelApiListAndroidAppsConfig {
	r.packageName = &packageName
	return r
}

// The version number of the app.
func (r TerminalActionsCompanyLevelApiListAndroidAppsConfig) VersionCode(versionCode int32) TerminalActionsCompanyLevelApiListAndroidAppsConfig {
	r.versionCode = &versionCode
	return r
}

/*
ListAndroidApps Get a list of Android apps

Returns a list of the Android apps that are available for the company identified in the path.
These apps have been uploaded to Adyen and can be installed or uninstalled on Android payment terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).

To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Terminal actions read
* Management API—Terminal actions read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param companyId The unique identifier of the company account.
	@return TerminalActionsCompanyLevelApiListAndroidAppsConfig
*/
func (a *TerminalActionsCompanyLevelApi) ListAndroidAppsConfig(ctx context.Context, companyId string) TerminalActionsCompanyLevelApiListAndroidAppsConfig {
	return TerminalActionsCompanyLevelApiListAndroidAppsConfig{
		ctx:       ctx,
		companyId: companyId,
	}
}

/*
Get a list of Android apps
Returns a list of the Android apps that are available for the company identified in the path.  These apps have been uploaded to Adyen and can be installed or uninstalled on Android payment terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal actions read * Management API—Terminal actions read and write
 * @param companyId The unique identifier of the company account.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return AndroidAppsResponse
*/

func (a *TerminalActionsCompanyLevelApi) ListAndroidApps(r TerminalActionsCompanyLevelApiListAndroidAppsConfig) (AndroidAppsResponse, *_nethttp.Response, error) {
	var serviceError common.RestServiceError
	res := &AndroidAppsResponse{}
	path := "/companies/{companyId}/androidApps"
	path = strings.Replace(path, "{"+"companyId"+"}", url.PathEscape(common.ParameterValueToString(r.companyId, "companyId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.pageNumber != nil {
		common.ParameterAddToQuery(queryParams, "pageNumber", r.pageNumber, "")
	}
	if r.pageSize != nil {
		common.ParameterAddToQuery(queryParams, "pageSize", r.pageSize, "")
	}
	if r.packageName != nil {
		common.ParameterAddToQuery(queryParams, "packageName", r.packageName, "")
	}
	if r.versionCode != nil {
		common.ParameterAddToQuery(queryParams, "versionCode", r.versionCode, "")
	}
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}
	return *res, httpRes, err
}

type TerminalActionsCompanyLevelApiListAndroidCertificatesConfig struct {
	ctx             context.Context
	companyId       string
	pageNumber      *int32
	pageSize        *int32
	certificateName *string
}

// The number of the page to fetch.
func (r TerminalActionsCompanyLevelApiListAndroidCertificatesConfig) PageNumber(pageNumber int32) TerminalActionsCompanyLevelApiListAndroidCertificatesConfig {
	r.pageNumber = &pageNumber
	return r
}

// The number of items to have on a page, maximum 100. The default is 20 items on a page.
func (r TerminalActionsCompanyLevelApiListAndroidCertificatesConfig) PageSize(pageSize int32) TerminalActionsCompanyLevelApiListAndroidCertificatesConfig {
	r.pageSize = &pageSize
	return r
}

// The name of the certificate.
func (r TerminalActionsCompanyLevelApiListAndroidCertificatesConfig) CertificateName(certificateName string) TerminalActionsCompanyLevelApiListAndroidCertificatesConfig {
	r.certificateName = &certificateName
	return r
}

/*
ListAndroidCertificates Get a list of Android certificates

Returns a list of the Android certificates that are available for the company identified in the path.
Typically, these certificates enable running apps on Android payment terminals. The certifcates in the list have been uploaded to Adyen and can be installed or uninstalled on Android terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).

To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Terminal actions read
* Management API—Terminal actions read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param companyId The unique identifier of the company account.
	@return TerminalActionsCompanyLevelApiListAndroidCertificatesConfig
*/
func (a *TerminalActionsCompanyLevelApi) ListAndroidCertificatesConfig(ctx context.Context, companyId string) TerminalActionsCompanyLevelApiListAndroidCertificatesConfig {
	return TerminalActionsCompanyLevelApiListAndroidCertificatesConfig{
		ctx:       ctx,
		companyId: companyId,
	}
}

/*
Get a list of Android certificates
Returns a list of the Android certificates that are available for the company identified in the path. Typically, these certificates enable running apps on Android payment terminals. The certifcates in the list have been uploaded to Adyen and can be installed or uninstalled on Android terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal actions read * Management API—Terminal actions read and write
 * @param companyId The unique identifier of the company account.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return AndroidCertificatesResponse
*/

func (a *TerminalActionsCompanyLevelApi) ListAndroidCertificates(r TerminalActionsCompanyLevelApiListAndroidCertificatesConfig) (AndroidCertificatesResponse, *_nethttp.Response, error) {
	var serviceError common.RestServiceError
	res := &AndroidCertificatesResponse{}
	path := "/companies/{companyId}/androidCertificates"
	path = strings.Replace(path, "{"+"companyId"+"}", url.PathEscape(common.ParameterValueToString(r.companyId, "companyId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.pageNumber != nil {
		common.ParameterAddToQuery(queryParams, "pageNumber", r.pageNumber, "")
	}
	if r.pageSize != nil {
		common.ParameterAddToQuery(queryParams, "pageSize", r.pageSize, "")
	}
	if r.certificateName != nil {
		common.ParameterAddToQuery(queryParams, "certificateName", r.certificateName, "")
	}
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}
	return *res, httpRes, err
}

type TerminalActionsCompanyLevelApiListTerminalActionsConfig struct {
	ctx        context.Context
	companyId  string
	pageNumber *int32
	pageSize   *int32
	status     *string
	type_      *string
}

// The number of the page to fetch.
func (r TerminalActionsCompanyLevelApiListTerminalActionsConfig) PageNumber(pageNumber int32) TerminalActionsCompanyLevelApiListTerminalActionsConfig {
	r.pageNumber = &pageNumber
	return r
}

// The number of items to have on a page, maximum 100. The default is 20 items on a page.
func (r TerminalActionsCompanyLevelApiListTerminalActionsConfig) PageSize(pageSize int32) TerminalActionsCompanyLevelApiListTerminalActionsConfig {
	r.pageSize = &pageSize
	return r
}

// Returns terminal actions with the specified status.  Allowed values: **pending**, **successful**, **failed**, **cancelled**, **tryLater**.
func (r TerminalActionsCompanyLevelApiListTerminalActionsConfig) Status(status string) TerminalActionsCompanyLevelApiListTerminalActionsConfig {
	r.status = &status
	return r
}

// Returns terminal actions of the specified type.  Allowed values: **InstallAndroidApp**, **UninstallAndroidApp**, **InstallAndroidCertificate**, **UninstallAndroidCertificate**.
func (r TerminalActionsCompanyLevelApiListTerminalActionsConfig) Type_(type_ string) TerminalActionsCompanyLevelApiListTerminalActionsConfig {
	r.type_ = &type_
	return r
}

/*
ListTerminalActions Get a list of terminal actions

Returns the [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api) that have been scheduled for the company identified in the path.The response doesn't include actions that are scheduled by Adyen.
To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
* Management API—Terminal actions read
* Management API—Terminal actions read and write

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param companyId The unique identifier of the company account.
	@return TerminalActionsCompanyLevelApiListTerminalActionsConfig
*/
func (a *TerminalActionsCompanyLevelApi) ListTerminalActionsConfig(ctx context.Context, companyId string) TerminalActionsCompanyLevelApiListTerminalActionsConfig {
	return TerminalActionsCompanyLevelApiListTerminalActionsConfig{
		ctx:       ctx,
		companyId: companyId,
	}
}

/*
Get a list of terminal actions
Returns the [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api) that have been scheduled for the company identified in the path.The response doesn&#39;t include actions that are scheduled by Adyen. To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal actions read * Management API—Terminal actions read and write
 * @param companyId The unique identifier of the company account.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ListExternalTerminalActionsResponse
*/

func (a *TerminalActionsCompanyLevelApi) ListTerminalActions(r TerminalActionsCompanyLevelApiListTerminalActionsConfig) (ListExternalTerminalActionsResponse, *_nethttp.Response, error) {
	var serviceError common.RestServiceError
	res := &ListExternalTerminalActionsResponse{}
	path := "/companies/{companyId}/terminalActions"
	path = strings.Replace(path, "{"+"companyId"+"}", url.PathEscape(common.ParameterValueToString(r.companyId, "companyId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.pageNumber != nil {
		common.ParameterAddToQuery(queryParams, "pageNumber", r.pageNumber, "")
	}
	if r.pageSize != nil {
		common.ParameterAddToQuery(queryParams, "pageSize", r.pageSize, "")
	}
	if r.status != nil {
		common.ParameterAddToQuery(queryParams, "status", r.status, "")
	}
	if r.type_ != nil {
		common.ParameterAddToQuery(queryParams, "type", r.type_, "")
	}
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)
	defer httpRes.Body.Close()

	if httpRes.StatusCode == 400 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 401 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 403 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 422 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}

	if httpRes.StatusCode == 500 {
		// Read the response body
		body, _ := ioutil.ReadAll(httpRes.Body)
		_ = json.Unmarshal([]byte(body), &serviceError)
		return *res, httpRes, serviceError
	}
	return *res, httpRes, err
}
