/*
Management API

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v8/src/common"
)

// checks if the AllowedOrigin type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &AllowedOrigin{}

// AllowedOrigin struct for AllowedOrigin
type AllowedOrigin struct {
	Links *Links `json:"_links,omitempty"`
	// Domain of the allowed origin.
	Domain string `json:"domain"`
	// Unique identifier of the allowed origin.
	Id *string `json:"id,omitempty"`
}

// NewAllowedOrigin instantiates a new AllowedOrigin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowedOrigin(domain string) *AllowedOrigin {
	this := AllowedOrigin{}
	this.Domain = domain
	return &this
}

// NewAllowedOriginWithDefaults instantiates a new AllowedOrigin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowedOriginWithDefaults() *AllowedOrigin {
	this := AllowedOrigin{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *AllowedOrigin) GetLinks() Links {
	if o == nil || common.IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedOrigin) GetLinksOk() (*Links, bool) {
	if o == nil || common.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *AllowedOrigin) HasLinks() bool {
	if o != nil && !common.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *AllowedOrigin) SetLinks(v Links) {
	o.Links = &v
}

// GetDomain returns the Domain field value
func (o *AllowedOrigin) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *AllowedOrigin) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *AllowedOrigin) SetDomain(v string) {
	o.Domain = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AllowedOrigin) GetId() string {
	if o == nil || common.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedOrigin) GetIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AllowedOrigin) HasId() bool {
	if o != nil && !common.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AllowedOrigin) SetId(v string) {
	o.Id = &v
}

func (o AllowedOrigin) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllowedOrigin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	toSerialize["domain"] = o.Domain
	if !common.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableAllowedOrigin struct {
	value *AllowedOrigin
	isSet bool
}

func (v NullableAllowedOrigin) Get() *AllowedOrigin {
	return v.value
}

func (v *NullableAllowedOrigin) Set(val *AllowedOrigin) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowedOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowedOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowedOrigin(val *AllowedOrigin) *NullableAllowedOrigin {
	return &NullableAllowedOrigin{value: val, isSet: true}
}

func (v NullableAllowedOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowedOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
