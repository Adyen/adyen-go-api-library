/*
Adyen Recurring API

API version: 68
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package recurring

import (
	"context"
	_nethttp "net/http"

	"github.com/adyen/adyen-go-api-library/v6/src/common"
)

// GeneralApi GeneralApi service
type GeneralApi common.Service

type CreatePermitConfig struct {
	ctx                 context.Context
	createPermitRequest *CreatePermitRequest
}

func (r CreatePermitConfig) CreatePermitRequest(createPermitRequest CreatePermitRequest) CreatePermitConfig {
	r.createPermitRequest = &createPermitRequest
	return r
}

/*
CreatePermit Create new permits linked to a recurring contract.

Create permits for a recurring contract, including support for defining restrictions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreatePermitConfig
*/
func (a *GeneralApi) CreatePermitConfig(ctx context.Context) CreatePermitConfig {
	return CreatePermitConfig{
		ctx: ctx,
	}
}

/*
Create new permits linked to a recurring contract.
Create permits for a recurring contract, including support for defining restrictions.
 * @param req CreatePermitRequest - reference of CreatePermitRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CreatePermitResult
*/

func (a *GeneralApi) CreatePermit(r CreatePermitConfig) (CreatePermitResult, *_nethttp.Response, error) {
	res := &CreatePermitResult{}
	path := "/createPermit"
	httpRes, err := a.Client.MakeHTTPPostRequest(r.createPermitRequest, res, a.BasePath()+path, r.ctx)
	return *res, httpRes, err
}

type DisableConfig struct {
	ctx            context.Context
	disableRequest *DisableRequest
}

func (r DisableConfig) DisableRequest(disableRequest DisableRequest) DisableConfig {
	r.disableRequest = &disableRequest
	return r
}

/*
Disable Disable stored payment details

Disables stored payment details to stop charging a shopper with this particular recurring detail ID.

For more information, refer to [Disable stored details](https://docs.adyen.com/classic-integration/recurring-payments/disable-stored-details/).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DisableConfig
*/
func (a *GeneralApi) DisableConfig(ctx context.Context) DisableConfig {
	return DisableConfig{
		ctx: ctx,
	}
}

/*
Disable stored payment details
Disables stored payment details to stop charging a shopper with this particular recurring detail ID.  For more information, refer to [Disable stored details](https://docs.adyen.com/classic-integration/recurring-payments/disable-stored-details/).
 * @param req DisableRequest - reference of DisableRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return DisableResult
*/

func (a *GeneralApi) Disable(r DisableConfig) (DisableResult, *_nethttp.Response, error) {
	res := &DisableResult{}
	path := "/disable"
	httpRes, err := a.Client.MakeHTTPPostRequest(r.disableRequest, res, a.BasePath()+path, r.ctx)
	return *res, httpRes, err
}

type DisablePermitConfig struct {
	ctx                  context.Context
	disablePermitRequest *DisablePermitRequest
}

func (r DisablePermitConfig) DisablePermitRequest(disablePermitRequest DisablePermitRequest) DisablePermitConfig {
	r.disablePermitRequest = &disablePermitRequest
	return r
}

/*
DisablePermit Disable an existing permit.

Disable a permit that was previously linked to a recurringDetailReference.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DisablePermitConfig
*/
func (a *GeneralApi) DisablePermitConfig(ctx context.Context) DisablePermitConfig {
	return DisablePermitConfig{
		ctx: ctx,
	}
}

/*
Disable an existing permit.
Disable a permit that was previously linked to a recurringDetailReference.
 * @param req DisablePermitRequest - reference of DisablePermitRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return DisablePermitResult
*/

func (a *GeneralApi) DisablePermit(r DisablePermitConfig) (DisablePermitResult, *_nethttp.Response, error) {
	res := &DisablePermitResult{}
	path := "/disablePermit"
	httpRes, err := a.Client.MakeHTTPPostRequest(r.disablePermitRequest, res, a.BasePath()+path, r.ctx)
	return *res, httpRes, err
}

type ListRecurringDetailsConfig struct {
	ctx                     context.Context
	recurringDetailsRequest *RecurringDetailsRequest
}

func (r ListRecurringDetailsConfig) RecurringDetailsRequest(recurringDetailsRequest RecurringDetailsRequest) ListRecurringDetailsConfig {
	r.recurringDetailsRequest = &recurringDetailsRequest
	return r
}

/*
ListRecurringDetails Get stored payment details

Lists the stored payment details for a shopper, if there are any available. The recurring detail ID can be used with a regular authorisation request to charge the shopper. A summary of the payment detail is returned for presentation to the shopper.

For more information, refer to [Retrieve stored details](https://docs.adyen.com/classic-integration/recurring-payments/retrieve-stored-details/).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ListRecurringDetailsConfig
*/
func (a *GeneralApi) ListRecurringDetailsConfig(ctx context.Context) ListRecurringDetailsConfig {
	return ListRecurringDetailsConfig{
		ctx: ctx,
	}
}

/*
Get stored payment details
Lists the stored payment details for a shopper, if there are any available. The recurring detail ID can be used with a regular authorisation request to charge the shopper. A summary of the payment detail is returned for presentation to the shopper.  For more information, refer to [Retrieve stored details](https://docs.adyen.com/classic-integration/recurring-payments/retrieve-stored-details/).
 * @param req RecurringDetailsRequest - reference of RecurringDetailsRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return RecurringDetailsResult
*/

func (a *GeneralApi) ListRecurringDetails(r ListRecurringDetailsConfig) (RecurringDetailsResult, *_nethttp.Response, error) {
	res := &RecurringDetailsResult{}
	path := "/listRecurringDetails"
	httpRes, err := a.Client.MakeHTTPPostRequest(r.recurringDetailsRequest, res, a.BasePath()+path, r.ctx)
	return *res, httpRes, err
}

type NotifyShopperConfig struct {
	ctx                  context.Context
	notifyShopperRequest *NotifyShopperRequest
}

func (r NotifyShopperConfig) NotifyShopperRequest(notifyShopperRequest NotifyShopperRequest) NotifyShopperConfig {
	r.notifyShopperRequest = &notifyShopperRequest
	return r
}

/*
NotifyShopper Ask issuer to notify the shopper

Sends a request to the issuer so they can inform the shopper about the upcoming recurring payment. This endpoint is used only for local acquiring in India. For more information, refer to [Recurring card payments in India](https://docs.adyen.com/payment-methods/cards/cards-recurring-india).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return NotifyShopperConfig
*/
func (a *GeneralApi) NotifyShopperConfig(ctx context.Context) NotifyShopperConfig {
	return NotifyShopperConfig{
		ctx: ctx,
	}
}

/*
Ask issuer to notify the shopper
Sends a request to the issuer so they can inform the shopper about the upcoming recurring payment. This endpoint is used only for local acquiring in India. For more information, refer to [Recurring card payments in India](https://docs.adyen.com/payment-methods/cards/cards-recurring-india).
 * @param req NotifyShopperRequest - reference of NotifyShopperRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return NotifyShopperResult
*/

func (a *GeneralApi) NotifyShopper(r NotifyShopperConfig) (NotifyShopperResult, *_nethttp.Response, error) {
	res := &NotifyShopperResult{}
	path := "/notifyShopper"
	httpRes, err := a.Client.MakeHTTPPostRequest(r.notifyShopperRequest, res, a.BasePath()+path, r.ctx)
	return *res, httpRes, err
}

type ScheduleAccountUpdaterConfig struct {
	ctx                           context.Context
	scheduleAccountUpdaterRequest *ScheduleAccountUpdaterRequest
}

func (r ScheduleAccountUpdaterConfig) ScheduleAccountUpdaterRequest(scheduleAccountUpdaterRequest ScheduleAccountUpdaterRequest) ScheduleAccountUpdaterConfig {
	r.scheduleAccountUpdaterRequest = &scheduleAccountUpdaterRequest
	return r
}

/*
ScheduleAccountUpdater Schedule running the Account Updater

When making the API call, you can submit either the credit card information, or the recurring detail reference and the shopper reference:
* If the card information is provided, all the sub-fields for `card` are mandatory.
* If the recurring detail reference is provided, the fields for `shopperReference` and `selectedRecurringDetailReference` are mandatory.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ScheduleAccountUpdaterConfig
*/
func (a *GeneralApi) ScheduleAccountUpdaterConfig(ctx context.Context) ScheduleAccountUpdaterConfig {
	return ScheduleAccountUpdaterConfig{
		ctx: ctx,
	}
}

/*
Schedule running the Account Updater
When making the API call, you can submit either the credit card information, or the recurring detail reference and the shopper reference: * If the card information is provided, all the sub-fields for &#x60;card&#x60; are mandatory. * If the recurring detail reference is provided, the fields for &#x60;shopperReference&#x60; and &#x60;selectedRecurringDetailReference&#x60; are mandatory.
 * @param req ScheduleAccountUpdaterRequest - reference of ScheduleAccountUpdaterRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ScheduleAccountUpdaterResult
*/

func (a *GeneralApi) ScheduleAccountUpdater(r ScheduleAccountUpdaterConfig) (ScheduleAccountUpdaterResult, *_nethttp.Response, error) {
	res := &ScheduleAccountUpdaterResult{}
	path := "/scheduleAccountUpdater"
	httpRes, err := a.Client.MakeHTTPPostRequest(r.scheduleAccountUpdaterRequest, res, a.BasePath()+path, r.ctx)
	return *res, httpRes, err
}
