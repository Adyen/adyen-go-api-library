/*
Adyen Recurring API

API version: 68
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package recurring

import (
	_context "context"
	_nethttp "net/http"
)

/*
Create new permits linked to a recurring contract.
Create permits for a recurring contract, including support for defining restrictions.
  - @param req CreatePermitRequest - reference of CreatePermitRequest).
  - @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return CreatePermitResult
*/
func (a Recurring) CreatePermit(req *CreatePermitRequest, ctxs ..._context.Context) (CreatePermitResult, *_nethttp.Response, error) {
	res := &CreatePermitResult{}
	path := "/createPermit"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Disable stored payment details
Disables stored payment details to stop charging a shopper with this particular recurring detail ID.  For more information, refer to [Disable stored details](https://docs.adyen.com/classic-integration/recurring-payments/disable-stored-details/).
  - @param req DisableRequest - reference of DisableRequest).
  - @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return DisableResult
*/
func (a Recurring) Disable(req *DisableRequest, ctxs ..._context.Context) (DisableResult, *_nethttp.Response, error) {
	res := &DisableResult{}
	path := "/disable"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Disable an existing permit.
Disable a permit that was previously linked to a recurringDetailReference.
  - @param req DisablePermitRequest - reference of DisablePermitRequest).
  - @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return DisablePermitResult
*/
func (a Recurring) DisablePermit(req *DisablePermitRequest, ctxs ..._context.Context) (DisablePermitResult, *_nethttp.Response, error) {
	res := &DisablePermitResult{}
	path := "/disablePermit"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Get stored payment details
Lists the stored payment details for a shopper, if there are any available. The recurring detail ID can be used with a regular authorisation request to charge the shopper. A summary of the payment detail is returned for presentation to the shopper.  For more information, refer to [Retrieve stored details](https://docs.adyen.com/classic-integration/recurring-payments/retrieve-stored-details/).
  - @param req RecurringDetailsRequest - reference of RecurringDetailsRequest).
  - @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return RecurringDetailsResult
*/
func (a Recurring) ListRecurringDetails(req *RecurringDetailsRequest, ctxs ..._context.Context) (RecurringDetailsResult, *_nethttp.Response, error) {
	res := &RecurringDetailsResult{}
	path := "/listRecurringDetails"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Ask issuer to notify the shopper
Sends a request to the issuer so they can inform the shopper about the upcoming recurring payment. This endpoint is used only for local acquiring in India. For more information, refer to [Recurring card payments in India](https://docs.adyen.com/payment-methods/cards/cards-recurring-india).
  - @param req NotifyShopperRequest - reference of NotifyShopperRequest).
  - @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return NotifyShopperResult
*/
func (a Recurring) NotifyShopper(req *NotifyShopperRequest, ctxs ..._context.Context) (NotifyShopperResult, *_nethttp.Response, error) {
	res := &NotifyShopperResult{}
	path := "/notifyShopper"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Schedule running the Account Updater
When making the API call, you can submit either the credit card information, or the recurring detail reference and the shopper reference: * If the card information is provided, all the sub-fields for &#x60;card&#x60; are mandatory. * If the recurring detail reference is provided, the fields for &#x60;shopperReference&#x60; and &#x60;selectedRecurringDetailReference&#x60; are mandatory.
  - @param req ScheduleAccountUpdaterRequest - reference of ScheduleAccountUpdaterRequest).
  - @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ScheduleAccountUpdaterResult
*/
func (a Recurring) ScheduleAccountUpdater(req *ScheduleAccountUpdaterRequest, ctxs ..._context.Context) (ScheduleAccountUpdaterResult, *_nethttp.Response, error) {
	res := &ScheduleAccountUpdaterResult{}
	path := "/scheduleAccountUpdater"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}
