openapi: 3.0.3
info:
  contact:
    email: support@adyen.com
    name: Adyen Support
    url: https://support.adyen.com/
  description: |-
    The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.

    For more information, refer to our [Tokenization documentation](https://docs.adyen.com/checkout/tokenization).
    ## Authentication
    To connect to the Recurring API, you must use your basic authentication credentials. For this, create your web service user, as described in [How to get the WS user password](https://docs.adyen.com/user-management/how-to-get-the-web-service-ws-user-password). Then use its credentials to authenticate your request, for example:

    ```
    curl
    -U "ws@Company.YourCompany":"YourWsPassword" \
    -H "Content-Type: application/json" \
    ...
    ```
    Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).

    ## Versioning
    Recurring API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: "vXX", where XX is the version number.

    For example:
    ```
    https://pal-test.adyen.com/pal/servlet/Recurring/v49/disable
    ```
  termsOfService: https://www.adyen.com/legal/terms-and-conditions
  title: Adyen Recurring API
  version: "49"
servers:
- url: https://pal-test.adyen.com/pal/servlet/Recurring/v49
paths:
  /disable:
    post:
      description: |-
        Disables stored payment details to stop charging a shopper with this particular recurring detail ID.

        For more information, refer to [Disable stored details](https://docs.adyen.com/classic-integration/recurring-payments/disable-stored-details/).
      operationId: post-disable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisableRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisableResult'
          description: OK - the request has succeeded.
        "400":
          description: Bad Request - a problem reading or understanding the request.
        "401":
          description: Unauthorized - authentication required.
        "403":
          description: Forbidden - insufficient permissions to process the request.
        "422":
          description: Unprocessable Entity - a request validation error.
        "500":
          description: Internal Server Error - the server could not process the request.
      summary: Disables stored payment details.
      x-groupName: General
      x-sortIndex: 2
  /listRecurringDetails:
    post:
      description: |-
        Lists the stored payment details for a shopper, if there are any available. The recurring detail ID can be used with a regular authorisation request to charge the shopper. A summary of the payment detail is returned for presentation to the shopper.

        For more information, refer to [Retrieve stored details](https://docs.adyen.com/classic-integration/recurring-payments/retrieve-stored-details/).
      operationId: post-listRecurringDetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecurringDetailsRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringDetailsResult'
          description: OK - the request has succeeded.
        "400":
          description: Bad Request - a problem reading or understanding the request.
        "401":
          description: Unauthorized - authentication required.
        "403":
          description: Forbidden - insufficient permissions to process the request.
        "422":
          description: Unprocessable Entity - a request validation error.
        "500":
          description: Internal Server Error - the server could not process the request.
      summary: Retrieves stored payment details for a shopper.
      x-groupName: General
      x-sortIndex: 1
  /notifyShopper:
    post:
      description: |-
        Sends a request to the issuer so they can inform the shopper about the
        upcoming recurring payment. This endpoint is used only for local
        acquiring in India. For more information, refer to [Recurring card
        payments in
        India](https://docs.adyen.com/payment-methods/cards/cards-recurring-india).
      operationId: post-notifyShopper
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotifyShopperRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotifyShopperResult'
          description: OK - the request has succeeded.
        '400':
          description: Bad Request - a problem reading or understanding the request.
        '401':
          description: Unauthorized - authentication required.
        '403':
          description: Forbidden - insufficient permissions to process the request.
        '422':
          description: Unprocessable Entity - a request validation error.
        '500':
          description: Internal Server Error - the server could not process the request.
      summary: Ask the issuer to inform shopper of upcoming payment
      x-groupName: General
      x-sortIndex: 4
  /scheduleAccountUpdater:
    post:
      description: |-
        When making the API call, you can submit either the credit card information, or the recurring detail reference and the shopper reference:
        * If the card information is provided, all the sub-fields for `card` are mandatory.
        * If the recurring detail reference is provided, the fields for `shopperReference` and `selectedRecurringDetailReference` are mandatory.
      operationId: post-scheduleAccountUpdater
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleAccountUpdaterRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleAccountUpdaterResult'
          description: OK - the request has succeeded.
        "400":
          description: Bad Request - a problem reading or understanding the request.
        "401":
          description: Unauthorized - authentication required.
        "403":
          description: Forbidden - insufficient permissions to process the request.
        "422":
          description: Unprocessable Entity - a request validation error.
        "500":
          description: Internal Server Error - the server could not process the request.
      summary: Schedules running of the Account Updater.
      x-groupName: General
      x-sortIndex: 3
components:
  schemas:
    Address:
      example:
        country: country
        stateOrProvince: stateOrProvince
        city: city
        houseNumberOrName: houseNumberOrName
        street: street
        postalCode: postalCode
      properties:
        city:
          description: The name of the city.
          type: string
        country:
          description: |-
            The two-character country code as defined in ISO-3166-1 alpha-2. For example, **US**.
            > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
          type: string
        houseNumberOrName:
          description: The number or name of the house.
          type: string
        postalCode:
          description: A maximum of five digits for an address in the US, or a maximum
            of ten characters for an address in all other countries.
          type: string
        stateOrProvince:
          description: |-
            State or province codes as defined in ISO 3166-2. For example, **CA** in the US or **ON** in Canada.
            > Required for the US and Canada.
          type: string
        street:
          description: |-
            The name of the street.
            > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
          type: string
      required:
      - city
      - country
      - houseNumberOrName
      - postalCode
      - street
    Amount:
      properties:
        currency:
          description: |-
            The three-character [ISO currency
            code](https://docs.adyen.com/development-resources/currency-codes).
          maxLength: 3
          minLength: 3
          type: string
        value:
          description: |-
            The amount of the transaction, in [minor
            units](https://docs.adyen.com/development-resources/currency-codes).
          format: int64
          type: integer
      required:
        - value
        - currency
    BankAccount:
      example:
        ownerName: ownerName
        countryCode: countryCode
        taxId: taxId
        iban: iban
        bankAccountNumber: bankAccountNumber
        bankName: bankName
        bankLocationId: bankLocationId
        bic: bic
        bankCity: bankCity
      properties:
        bankAccountNumber:
          description: The bank account number (without separators).
          type: string
        bankCity:
          description: The bank city.
          type: string
        bankLocationId:
          description: The location id of the bank. The field value is `nil` in most
            cases.
          type: string
        bankName:
          description: The name of the bank.
          type: string
        bic:
          description: The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362)
            (BIC) is the SWIFT address assigned to a bank. The field value is `nil`
            in most cases.
          type: string
        countryCode:
          description: |-
            Country code where the bank is located.

            A valid value is an ISO two-character country code (e.g. 'NL').
          type: string
        iban:
          description: The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number)
            (IBAN).
          type: string
        ownerName:
          description: |-
            The name of the bank account holder.
            If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:
            * χ12 is converted to ch12.
            * üA is converted to euA.
            * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.
            After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:
            * John17 - allowed.
            * J17 - allowed.
            * 171 - not allowed.
            * John-7 - allowed.
            > If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.
          type: string
        taxId:
          description: The bank account holder's tax ID.
          type: string
    Card:
      example:
        cvc: cvc
        number: number
        holderName: holderName
        startMonth: startMonth
        issueNumber: issueNumber
        expiryMonth: expiryMonth
        startYear: startYear
        expiryYear: expiryYear
      properties:
        cvc:
          description: |-
            The [card verification code](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid) (1-20 characters). Depending on the card brand, it is known also as:
            * CVV2/CVC2 – length: 3 digits
            * CID – length: 4 digits
            > If you are using [Client-Side Encryption](https://docs.adyen.com/classic-integration/cse-integration-ecommerce), the CVC code is present in the encrypted data. You must never post the card details to the server.
            > This field must be always present in a [one-click payment request](https://docs.adyen.com/classic-integration/recurring-payments).
            > When this value is returned in a response, it is always empty because it is not stored.
          maxLength: 20
          minLength: 1
          type: string
        expiryMonth:
          description: |-
            The card expiry month.
            Format: 2 digits, zero-padded for single digits. For example:
            * 03 = March
            * 11 = November
          maxLength: 2
          minLength: 1
          type: string
        expiryYear:
          description: |-
            The card expiry year.
            Format: 4 digits. For example: 2020
          maxLength: 4
          minLength: 4
          type: string
        holderName:
          description: The name of the cardholder, as printed on the card.
          maxLength: 50
          minLength: 1
          type: string
        issueNumber:
          description: The issue number of the card (for some UK debit cards only).
          maxLength: 2
          minLength: 1
          type: string
        number:
          description: |-
            The card number (4-19 characters). Do not use any separators.
            When this value is returned in a response, only the last 4 digits of the card number are returned.
          maxLength: 19
          minLength: 4
          type: string
        startMonth:
          description: The month component of the start date (for some UK debit cards
            only).
          maxLength: 2
          minLength: 1
          type: string
        startYear:
          description: The year component of the start date (for some UK debit cards
            only).
          maxLength: 4
          minLength: 4
          type: string
      required:
      - expiryMonth
      - expiryYear
      - holderName
      - number
    DisableRequest:
      example:
        merchantAccount: merchantAccount
        contract: contract
        recurringDetailReference: recurringDetailReference
        shopperReference: shopperReference
      properties:
        contract:
          description: |-
            Specify the contract if you only want to disable a specific use.

            This field can be set to one of the following values, or to their combination (comma-separated):
            * ONECLICK
            * RECURRING
            * PAYOUT
          type: string
        merchantAccount:
          description: The merchant account identifier with which you want to process
            the transaction.
          type: string
        recurringDetailReference:
          description: |-
            The ID that uniquely identifies the recurring detail reference.

            If it is not provided, the whole recurring contract of the `shopperReference` will be disabled, which includes all recurring details.
          type: string
        shopperReference:
          description: |-
            The ID that uniquely identifies the shopper.

            This `shopperReference` must be the same as the `shopperReference` used in the initial payment.
          type: string
      required:
      - merchantAccount
      - shopperReference
    DisableResult:
      example:
        response: response
      properties:
        response:
          description: Depending on whether a specific recurring detail was in the
            request, result is either [detail-successfully-disabled] or [all-details-successfully-disabled].
          type: string
    Name:
      example:
        firstName: firstName
        lastName: lastName
        gender: MALE
        infix: infix
      properties:
        firstName:
          description: The first name.
          type: string
        gender:
          description: |-
            The gender.
            >The following values are permitted: `MALE`, `FEMALE`, `UNKNOWN`.
          enum:
          - MALE
          - FEMALE
          - UNKNOWN
          maxLength: 1
          minLength: 1
          type: string
        infix:
          description: |-
            The name's infix, if applicable.
            >A maximum length of twenty (20) characters is imposed.
          type: string
        lastName:
          description: The last name.
          type: string
      required:
      - firstName
      - gender
      - lastName
    Recurring:
      example:
        recurringExpiry: 2000-01-23T04:56:07.000+00:00
        recurringFrequency: recurringFrequency
        tokenService: VISATOKENSERVICE
        contract: ONECLICK
        recurringDetailName: recurringDetailName
      properties:
        contract:
          description: |-
            The type of recurring contract to be used.
            Possible values:
            * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid).
            * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp).
            * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not.
            * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/checkout/online-payouts).
          enum:
          - ONECLICK
          - RECURRING
          - PAYOUT
          type: string
        recurringDetailName:
          description: A descriptive name for this detail.
          type: string
        recurringExpiry:
          description: Date after which no further authorisations shall be performed.
            Only for 3D Secure 2.
          format: date-time
          type: string
        recurringFrequency:
          description: Minimum number of days between authorisations. Only for 3D
            Secure 2.
          type: string
        tokenService:
          description: The name of the token service.
          enum:
          - VISATOKENSERVICE
          - MCTOKENSERVICE
          type: string
    RecurringDetail:
      example:
        socialSecurityNumber: socialSecurityNumber
        firstPspReference: firstPspReference
        creationDate: 2000-01-23T04:56:07.000+00:00
        bank:
          ownerName: ownerName
          countryCode: countryCode
          taxId: taxId
          iban: iban
          bankAccountNumber: bankAccountNumber
          bankName: bankName
          bankLocationId: bankLocationId
          bic: bic
          bankCity: bankCity
        shopperName:
          firstName: firstName
          lastName: lastName
          gender: MALE
          infix: infix
        aliasType: aliasType
        name: name
        variant: variant
        alias: alias
        recurringDetailReference: recurringDetailReference
        contractTypes:
        - contractTypes
        - contractTypes
        additionalData:
          key: additionalData
        billingAddress:
          country: country
          stateOrProvince: stateOrProvince
          city: city
          houseNumberOrName: houseNumberOrName
          street: street
          postalCode: postalCode
        paymentMethodVariant: paymentMethodVariant
        card:
          cvc: cvc
          number: number
          holderName: holderName
          startMonth: startMonth
          issueNumber: issueNumber
          expiryMonth: expiryMonth
          startYear: startYear
          expiryYear: expiryYear
      properties:
        additionalData:
          additionalProperties:
            type: string
          description: |-
            This field contains additional data, which may be returned in a particular response.

            The additionalData object consists of entries, each of which includes the key and value.
          type: object
        alias:
          description: |-
            The alias of the credit card number.

            Applies only to recurring contracts storing credit card details
          type: string
        aliasType:
          description: |-
            The alias type of the credit card number.

            Applies only to recurring contracts storing credit card details.
          type: string
        bank:
          $ref: '#/components/schemas/BankAccount'
        billingAddress:
          $ref: '#/components/schemas/Address'
        card:
          $ref: '#/components/schemas/Card'
        contractTypes:
          description: Types of recurring contracts.
          items:
            type: string
          type: array
        creationDate:
          description: The date when the recurring details were created.
          format: date-time
          type: string
        firstPspReference:
          description: The `pspReference` of the first recurring payment that created
            the recurring detail.
          type: string
        name:
          description: An optional descriptive name for this recurring detail.
          type: string
        paymentMethodVariant:
          description: The  type or sub-brand of a payment method used, e.g. Visa
            Debit, Visa Corporate, etc. For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).
          type: string
        recurringDetailReference:
          description: The reference that uniquely identifies the recurring detail.
          type: string
        shopperName:
          $ref: '#/components/schemas/Name'
        socialSecurityNumber:
          description: A shopper's social security number (only in countries where
            it is legal to collect).
          type: string
        variant:
          description: The payment method, such as “mc", "visa", "ideal", "paypal".
          type: string
      required:
      - recurringDetailReference
      - variant
    RecurringDetailsRequest:
      example:
        merchantAccount: merchantAccount
        recurring:
          recurringExpiry: 2000-01-23T04:56:07.000+00:00
          recurringFrequency: recurringFrequency
          tokenService: VISATOKENSERVICE
          contract: ONECLICK
          recurringDetailName: recurringDetailName
        shopperReference: shopperReference
      properties:
        merchantAccount:
          description: The merchant account identifier you want to process the (transaction)
            request with.
          type: string
        recurring:
          $ref: '#/components/schemas/Recurring'
        shopperReference:
          description: The reference you use to uniquely identify the shopper (e.g.
            user ID or account ID).
          type: string
      required:
      - merchantAccount
      - shopperReference
    RecurringDetailsResult:
      example:
        lastKnownShopperEmail: lastKnownShopperEmail
        details:
        - socialSecurityNumber: socialSecurityNumber
          firstPspReference: firstPspReference
          creationDate: 2000-01-23T04:56:07.000+00:00
          bank:
            ownerName: ownerName
            countryCode: countryCode
            taxId: taxId
            iban: iban
            bankAccountNumber: bankAccountNumber
            bankName: bankName
            bankLocationId: bankLocationId
            bic: bic
            bankCity: bankCity
          shopperName:
            firstName: firstName
            lastName: lastName
            gender: MALE
            infix: infix
          aliasType: aliasType
          name: name
          variant: variant
          alias: alias
          recurringDetailReference: recurringDetailReference
          contractTypes:
          - contractTypes
          - contractTypes
          additionalData:
            key: additionalData
          billingAddress:
            country: country
            stateOrProvince: stateOrProvince
            city: city
            houseNumberOrName: houseNumberOrName
            street: street
            postalCode: postalCode
          paymentMethodVariant: paymentMethodVariant
          card:
            cvc: cvc
            number: number
            holderName: holderName
            startMonth: startMonth
            issueNumber: issueNumber
            expiryMonth: expiryMonth
            startYear: startYear
            expiryYear: expiryYear
        - socialSecurityNumber: socialSecurityNumber
          firstPspReference: firstPspReference
          creationDate: 2000-01-23T04:56:07.000+00:00
          bank:
            ownerName: ownerName
            countryCode: countryCode
            taxId: taxId
            iban: iban
            bankAccountNumber: bankAccountNumber
            bankName: bankName
            bankLocationId: bankLocationId
            bic: bic
            bankCity: bankCity
          shopperName:
            firstName: firstName
            lastName: lastName
            gender: MALE
            infix: infix
          aliasType: aliasType
          name: name
          variant: variant
          alias: alias
          recurringDetailReference: recurringDetailReference
          contractTypes:
          - contractTypes
          - contractTypes
          additionalData:
            key: additionalData
          billingAddress:
            country: country
            stateOrProvince: stateOrProvince
            city: city
            houseNumberOrName: houseNumberOrName
            street: street
            postalCode: postalCode
          paymentMethodVariant: paymentMethodVariant
          card:
            cvc: cvc
            number: number
            holderName: holderName
            startMonth: startMonth
            issueNumber: issueNumber
            expiryMonth: expiryMonth
            startYear: startYear
            expiryYear: expiryYear
        creationDate: 2000-01-23T04:56:07.000+00:00
        shopperReference: shopperReference
      properties:
        creationDate:
          description: The date when the recurring details were created.
          format: date-time
          type: string
        details:
          description: Payment details stored for recurring payments.
          items:
            $ref: '#/components/schemas/RecurringDetail'
          type: array
        lastKnownShopperEmail:
          description: The most recent email for this shopper (if available).
          type: string
        shopperReference:
          description: The reference you use to uniquely identify the shopper (e.g.
            user ID or account ID).
          type: string
    NotifyShopperRequest:
      properties:
        amount:
          description: The amount of the upcoming payment.
          $ref: '#/components/schemas/Amount'
        billingDate:
          description: |-
            Date on which the subscription amount will be debited from the
            shopper. In YYYY-MM-DD format
          format: date-time
          type: string
        billingSequenceNumber:
          description: |-
            Sequence of the debit. Depends on Frequency and Billing Attempts
            Rule.
          type: string
        displayedReference:
          description: |-
            Reference of Pre-debit notification that is displayed to the
            shopper. Optional field. Maps to reference if missing
          type: string
        merchantAccount:
          description: |-
            The merchant account identifier with which you want to process the
            transaction.
          type: string
        recurringDetailReference:
          description: |-
            This is the `recurringDetailReference` returned in the response when
            you created the token.
          type: string
        reference:
          description: |-
            Pre-debit notification reference sent by the merchant. This is a
            mandatory field
          type: string
        shopperReference:
          description: |-
            The ID that uniquely identifies the shopper.
            This `shopperReference` must be the same as the `shopperReference`
            used in the initial payment.
          type: string
        storedPaymentMethodId:
          description: |-
            This is the `recurringDetailReference` returned in the response when
            you created the token.
          type: string
      required:
        - merchantAccount
        - shopperReference
        - amount
        - reference
    NotifyShopperResult:
      properties:
        displayedReference:
          description: Reference of Pre-debit notification that is displayed to the shopper
          type: string
        message:
          description: A simple description of the `resultCode`.
          type: string
        pspReference:
          description: The unique reference that is associated with the request.
          type: string
        reference:
          description: Reference of Pre-debit notification sent in my the merchant
          type: string
        resultCode:
          description: The code indicating the status of notification.
          type: string
        shopperNotificationReference:
          description: The unique reference for the request sent downstream.
          type: string
        storedPaymentMethodId:
          description: |-
            This is the recurringDetailReference returned in the response when
            token was created
          type: string
    ScheduleAccountUpdaterRequest:
      example:
        reference: reference
        merchantAccount: merchantAccount
        selectedRecurringDetailReference: selectedRecurringDetailReference
        additionalData:
          key: additionalData
        card:
          cvc: cvc
          number: number
          holderName: holderName
          startMonth: startMonth
          issueNumber: issueNumber
          expiryMonth: expiryMonth
          startYear: startYear
          expiryYear: expiryYear
        shopperReference: shopperReference
      properties:
        additionalData:
          additionalProperties:
            type: string
          description: This field contains additional data, which may be required
            for a particular request.
          type: object
        card:
          $ref: '#/components/schemas/Card'
        merchantAccount:
          description: Account of the merchant.
          type: string
        reference:
          description: A reference that merchants can apply for the call.
          type: string
        selectedRecurringDetailReference:
          description: |-
            The selected detail recurring reference.

            Optional if `card` is provided.
          type: string
        shopperReference:
          description: |-
            The reference of the shopper that owns the recurring contract.

            Optional if `card` is provided.
          type: string
      required:
      - merchantAccount
      - reference
    ScheduleAccountUpdaterResult:
      example:
        result: result
        pspReference: pspReference
      properties:
        pspReference:
          description: Adyen's 16-character unique reference associated with the transaction.
            This value is globally unique; quote it when communicating with us about
            this request.
          type: string
        result:
          description: The result of scheduling an Account Updater. If scheduling
            was successful, this field returns **Success**; otherwise it contains
            the error message.
          type: string
      required:
      - pspReference
      - result
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: X-API-Key
      type: apiKey
    BasicAuth:
      scheme: basic
      type: http
x-groups:
- General
