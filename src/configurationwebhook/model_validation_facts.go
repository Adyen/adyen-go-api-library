/*
Configuration webhooks

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationwebhook

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v21/src/common"
)

// checks if the ValidationFacts type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &ValidationFacts{}

// ValidationFacts struct for ValidationFacts
type ValidationFacts struct {
	// The reason for the `result` of the validations.  This field is only sent for `validationFacts.type` **walletValidation**, when `validationFacts.result` is **invalid**.
	Reasons []string `json:"reasons,omitempty"`
	// The evaluation result of the validation facts.  Possible values: **valid**, **invalid**, **notValidated**, **notApplicable**.
	Result *string `json:"result,omitempty"`
	// The type of the validation fact.
	Type *string `json:"type,omitempty"`
}

// NewValidationFacts instantiates a new ValidationFacts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationFacts() *ValidationFacts {
	this := ValidationFacts{}
	return &this
}

// NewValidationFactsWithDefaults instantiates a new ValidationFacts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationFactsWithDefaults() *ValidationFacts {
	this := ValidationFacts{}
	return &this
}

// GetReasons returns the Reasons field value if set, zero value otherwise.
func (o *ValidationFacts) GetReasons() []string {
	if o == nil || common.IsNil(o.Reasons) {
		var ret []string
		return ret
	}
	return o.Reasons
}

// GetReasonsOk returns a tuple with the Reasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationFacts) GetReasonsOk() ([]string, bool) {
	if o == nil || common.IsNil(o.Reasons) {
		return nil, false
	}
	return o.Reasons, true
}

// HasReasons returns a boolean if a field has been set.
func (o *ValidationFacts) HasReasons() bool {
	if o != nil && !common.IsNil(o.Reasons) {
		return true
	}

	return false
}

// SetReasons gets a reference to the given []string and assigns it to the Reasons field.
func (o *ValidationFacts) SetReasons(v []string) {
	o.Reasons = v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *ValidationFacts) GetResult() string {
	if o == nil || common.IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationFacts) GetResultOk() (*string, bool) {
	if o == nil || common.IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *ValidationFacts) HasResult() bool {
	if o != nil && !common.IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *ValidationFacts) SetResult(v string) {
	o.Result = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ValidationFacts) GetType() string {
	if o == nil || common.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationFacts) GetTypeOk() (*string, bool) {
	if o == nil || common.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ValidationFacts) HasType() bool {
	if o != nil && !common.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ValidationFacts) SetType(v string) {
	o.Type = &v
}

func (o ValidationFacts) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationFacts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.Reasons) {
		toSerialize["reasons"] = o.Reasons
	}
	if !common.IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !common.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableValidationFacts struct {
	value *ValidationFacts
	isSet bool
}

func (v NullableValidationFacts) Get() *ValidationFacts {
	return v.value
}

func (v *NullableValidationFacts) Set(val *ValidationFacts) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationFacts) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationFacts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationFacts(val *ValidationFacts) *NullableValidationFacts {
	return &NullableValidationFacts{value: val, isSet: true}
}

func (v NullableValidationFacts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationFacts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func (o *ValidationFacts) isValidResult() bool {
	var allowedEnumValues = []string{"invalid", "notApplicable", "notValidated", "valid"}
	for _, allowed := range allowedEnumValues {
		if o.GetResult() == allowed {
			return true
		}
	}
	return false
}
