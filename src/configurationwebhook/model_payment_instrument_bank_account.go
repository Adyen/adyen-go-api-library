/*
Configuration webhooks

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationwebhook

import (
	"encoding/json"
    "github.com/adyen/adyen-go-api-library/v9/src/common"
	"fmt"
)

// PaymentInstrumentBankAccount - Contains the business account details. Returned when you create a payment instrument with `type` **bankAccount**.
type PaymentInstrumentBankAccount struct {
	IbanAccountIdentification *IbanAccountIdentification
	UKLocalAccountIdentification *UKLocalAccountIdentification
	USLocalAccountIdentification *USLocalAccountIdentification
}

// IbanAccountIdentificationAsPaymentInstrumentBankAccount is a convenience function that returns IbanAccountIdentification wrapped in PaymentInstrumentBankAccount
func IbanAccountIdentificationAsPaymentInstrumentBankAccount(v *IbanAccountIdentification) PaymentInstrumentBankAccount {
	return PaymentInstrumentBankAccount{
		IbanAccountIdentification: v,
	}
}

// UKLocalAccountIdentificationAsPaymentInstrumentBankAccount is a convenience function that returns UKLocalAccountIdentification wrapped in PaymentInstrumentBankAccount
func UKLocalAccountIdentificationAsPaymentInstrumentBankAccount(v *UKLocalAccountIdentification) PaymentInstrumentBankAccount {
	return PaymentInstrumentBankAccount{
		UKLocalAccountIdentification: v,
	}
}

// USLocalAccountIdentificationAsPaymentInstrumentBankAccount is a convenience function that returns USLocalAccountIdentification wrapped in PaymentInstrumentBankAccount
func USLocalAccountIdentificationAsPaymentInstrumentBankAccount(v *USLocalAccountIdentification) PaymentInstrumentBankAccount {
	return PaymentInstrumentBankAccount{
		USLocalAccountIdentification: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PaymentInstrumentBankAccount) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IbanAccountIdentification
	err = json.Unmarshal(data, &dst.IbanAccountIdentification)
	if err == nil {
		jsonIbanAccountIdentification, _ := json.Marshal(dst.IbanAccountIdentification)
		if string(jsonIbanAccountIdentification) == "{}" || !dst.IbanAccountIdentification.isValidType() { // empty struct
			dst.IbanAccountIdentification = nil
        } else {
			match++
		}
	} else {
		dst.IbanAccountIdentification = nil
	}

	// try to unmarshal data into UKLocalAccountIdentification
	err = json.Unmarshal(data, &dst.UKLocalAccountIdentification)
	if err == nil {
		jsonUKLocalAccountIdentification, _ := json.Marshal(dst.UKLocalAccountIdentification)
		if string(jsonUKLocalAccountIdentification) == "{}" || !dst.UKLocalAccountIdentification.isValidType() { // empty struct
			dst.UKLocalAccountIdentification = nil
        } else {
			match++
		}
	} else {
		dst.UKLocalAccountIdentification = nil
	}

	// try to unmarshal data into USLocalAccountIdentification
	err = json.Unmarshal(data, &dst.USLocalAccountIdentification)
	if err == nil {
		jsonUSLocalAccountIdentification, _ := json.Marshal(dst.USLocalAccountIdentification)
		if string(jsonUSLocalAccountIdentification) == "{}" || !dst.USLocalAccountIdentification.isValidType() { // empty struct
			dst.USLocalAccountIdentification = nil
        } else {
			match++
		}
	} else {
		dst.USLocalAccountIdentification = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IbanAccountIdentification = nil
		dst.UKLocalAccountIdentification = nil
		dst.USLocalAccountIdentification = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PaymentInstrumentBankAccount)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PaymentInstrumentBankAccount)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PaymentInstrumentBankAccount) MarshalJSON() ([]byte, error) {
	if src.IbanAccountIdentification != nil {
		return json.Marshal(&src.IbanAccountIdentification)
	}

	if src.UKLocalAccountIdentification != nil {
		return json.Marshal(&src.UKLocalAccountIdentification)
	}

	if src.USLocalAccountIdentification != nil {
		return json.Marshal(&src.USLocalAccountIdentification)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PaymentInstrumentBankAccount) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IbanAccountIdentification != nil {
		return obj.IbanAccountIdentification
	}

	if obj.UKLocalAccountIdentification != nil {
		return obj.UKLocalAccountIdentification
	}

	if obj.USLocalAccountIdentification != nil {
		return obj.USLocalAccountIdentification
	}

	// all schemas are nil
	return nil
}

type NullablePaymentInstrumentBankAccount struct {
	value *PaymentInstrumentBankAccount
	isSet bool
}

func (v NullablePaymentInstrumentBankAccount) Get() *PaymentInstrumentBankAccount {
	return v.value
}

func (v *NullablePaymentInstrumentBankAccount) Set(val *PaymentInstrumentBankAccount) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentInstrumentBankAccount) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentInstrumentBankAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentInstrumentBankAccount(val *PaymentInstrumentBankAccount) *NullablePaymentInstrumentBankAccount {
	return &NullablePaymentInstrumentBankAccount{value: val, isSet: true}
}

func (v NullablePaymentInstrumentBankAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentInstrumentBankAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


