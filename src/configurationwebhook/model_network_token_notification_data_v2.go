/*
Configuration webhooks

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationwebhook

import (
	"encoding/json"
    "github.com/adyen/adyen-go-api-library/v21/src/common"
)

// checks if the NetworkTokenNotificationDataV2 type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &NetworkTokenNotificationDataV2{}

// NetworkTokenNotificationDataV2 struct for NetworkTokenNotificationDataV2
type NetworkTokenNotificationDataV2 struct {
	Authentication *TokenAuthentication `json:"authentication,omitempty"`
	// Specifies whether the authentication process was triggered during token provisioning.
	AuthenticationApplied *bool `json:"authenticationApplied,omitempty"`
	// The unique identifier of the balance platform.
	BalancePlatform *string `json:"balancePlatform,omitempty"`
	// The decision about the network token provisioning.  Possible values: **approved**, **declined**, **requiresAuthentication**.
	Decision *string `json:"decision,omitempty"`
	// The unique identifier of the network token.
	Id *string `json:"id,omitempty"`
	// The unique identifier of the payment instrument to which the network token is associated.
	PaymentInstrumentId *string `json:"paymentInstrumentId,omitempty"`
	// The status of the network token.
	Status *string `json:"status,omitempty"`
	// The last four digits of the network token. Use this value to help your user to identify their network token.
	TokenLastFour *string `json:"tokenLastFour,omitempty"`
	TokenRequestor *NetworkTokenRequestor `json:"tokenRequestor,omitempty"`
	TransactionRulesResult *NetworkTokenTransactionRulesResult `json:"transactionRulesResult,omitempty"`
	// The type of network token.  Possible values: **wallet**, **cof**.
	Type *string `json:"type,omitempty"`
	// The rules used to validate the request for provisioning the network token.
	ValidationFacts []ValidationFacts `json:"validationFacts,omitempty"`
	Wallet *Wallet `json:"wallet,omitempty"`
}

// NewNetworkTokenNotificationDataV2 instantiates a new NetworkTokenNotificationDataV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkTokenNotificationDataV2() *NetworkTokenNotificationDataV2 {
	this := NetworkTokenNotificationDataV2{}
	return &this
}

// NewNetworkTokenNotificationDataV2WithDefaults instantiates a new NetworkTokenNotificationDataV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkTokenNotificationDataV2WithDefaults() *NetworkTokenNotificationDataV2 {
	this := NetworkTokenNotificationDataV2{}
	return &this
}

// GetAuthentication returns the Authentication field value if set, zero value otherwise.
func (o *NetworkTokenNotificationDataV2) GetAuthentication() TokenAuthentication {
	if o == nil || common.IsNil(o.Authentication) {
		var ret TokenAuthentication
		return ret
	}
	return *o.Authentication
}

// GetAuthenticationOk returns a tuple with the Authentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTokenNotificationDataV2) GetAuthenticationOk() (*TokenAuthentication, bool) {
	if o == nil || common.IsNil(o.Authentication) {
		return nil, false
	}
	return o.Authentication, true
}

// HasAuthentication returns a boolean if a field has been set.
func (o *NetworkTokenNotificationDataV2) HasAuthentication() bool {
	if o != nil && !common.IsNil(o.Authentication) {
		return true
	}

	return false
}

// SetAuthentication gets a reference to the given TokenAuthentication and assigns it to the Authentication field.
func (o *NetworkTokenNotificationDataV2) SetAuthentication(v TokenAuthentication) {
	o.Authentication = &v
}

// GetAuthenticationApplied returns the AuthenticationApplied field value if set, zero value otherwise.
func (o *NetworkTokenNotificationDataV2) GetAuthenticationApplied() bool {
	if o == nil || common.IsNil(o.AuthenticationApplied) {
		var ret bool
		return ret
	}
	return *o.AuthenticationApplied
}

// GetAuthenticationAppliedOk returns a tuple with the AuthenticationApplied field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTokenNotificationDataV2) GetAuthenticationAppliedOk() (*bool, bool) {
	if o == nil || common.IsNil(o.AuthenticationApplied) {
		return nil, false
	}
	return o.AuthenticationApplied, true
}

// HasAuthenticationApplied returns a boolean if a field has been set.
func (o *NetworkTokenNotificationDataV2) HasAuthenticationApplied() bool {
	if o != nil && !common.IsNil(o.AuthenticationApplied) {
		return true
	}

	return false
}

// SetAuthenticationApplied gets a reference to the given bool and assigns it to the AuthenticationApplied field.
func (o *NetworkTokenNotificationDataV2) SetAuthenticationApplied(v bool) {
	o.AuthenticationApplied = &v
}

// GetBalancePlatform returns the BalancePlatform field value if set, zero value otherwise.
func (o *NetworkTokenNotificationDataV2) GetBalancePlatform() string {
	if o == nil || common.IsNil(o.BalancePlatform) {
		var ret string
		return ret
	}
	return *o.BalancePlatform
}

// GetBalancePlatformOk returns a tuple with the BalancePlatform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTokenNotificationDataV2) GetBalancePlatformOk() (*string, bool) {
	if o == nil || common.IsNil(o.BalancePlatform) {
		return nil, false
	}
	return o.BalancePlatform, true
}

// HasBalancePlatform returns a boolean if a field has been set.
func (o *NetworkTokenNotificationDataV2) HasBalancePlatform() bool {
	if o != nil && !common.IsNil(o.BalancePlatform) {
		return true
	}

	return false
}

// SetBalancePlatform gets a reference to the given string and assigns it to the BalancePlatform field.
func (o *NetworkTokenNotificationDataV2) SetBalancePlatform(v string) {
	o.BalancePlatform = &v
}

// GetDecision returns the Decision field value if set, zero value otherwise.
func (o *NetworkTokenNotificationDataV2) GetDecision() string {
	if o == nil || common.IsNil(o.Decision) {
		var ret string
		return ret
	}
	return *o.Decision
}

// GetDecisionOk returns a tuple with the Decision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTokenNotificationDataV2) GetDecisionOk() (*string, bool) {
	if o == nil || common.IsNil(o.Decision) {
		return nil, false
	}
	return o.Decision, true
}

// HasDecision returns a boolean if a field has been set.
func (o *NetworkTokenNotificationDataV2) HasDecision() bool {
	if o != nil && !common.IsNil(o.Decision) {
		return true
	}

	return false
}

// SetDecision gets a reference to the given string and assigns it to the Decision field.
func (o *NetworkTokenNotificationDataV2) SetDecision(v string) {
	o.Decision = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NetworkTokenNotificationDataV2) GetId() string {
	if o == nil || common.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTokenNotificationDataV2) GetIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NetworkTokenNotificationDataV2) HasId() bool {
	if o != nil && !common.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NetworkTokenNotificationDataV2) SetId(v string) {
	o.Id = &v
}

// GetPaymentInstrumentId returns the PaymentInstrumentId field value if set, zero value otherwise.
func (o *NetworkTokenNotificationDataV2) GetPaymentInstrumentId() string {
	if o == nil || common.IsNil(o.PaymentInstrumentId) {
		var ret string
		return ret
	}
	return *o.PaymentInstrumentId
}

// GetPaymentInstrumentIdOk returns a tuple with the PaymentInstrumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTokenNotificationDataV2) GetPaymentInstrumentIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.PaymentInstrumentId) {
		return nil, false
	}
	return o.PaymentInstrumentId, true
}

// HasPaymentInstrumentId returns a boolean if a field has been set.
func (o *NetworkTokenNotificationDataV2) HasPaymentInstrumentId() bool {
	if o != nil && !common.IsNil(o.PaymentInstrumentId) {
		return true
	}

	return false
}

// SetPaymentInstrumentId gets a reference to the given string and assigns it to the PaymentInstrumentId field.
func (o *NetworkTokenNotificationDataV2) SetPaymentInstrumentId(v string) {
	o.PaymentInstrumentId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NetworkTokenNotificationDataV2) GetStatus() string {
	if o == nil || common.IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTokenNotificationDataV2) GetStatusOk() (*string, bool) {
	if o == nil || common.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NetworkTokenNotificationDataV2) HasStatus() bool {
	if o != nil && !common.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *NetworkTokenNotificationDataV2) SetStatus(v string) {
	o.Status = &v
}

// GetTokenLastFour returns the TokenLastFour field value if set, zero value otherwise.
func (o *NetworkTokenNotificationDataV2) GetTokenLastFour() string {
	if o == nil || common.IsNil(o.TokenLastFour) {
		var ret string
		return ret
	}
	return *o.TokenLastFour
}

// GetTokenLastFourOk returns a tuple with the TokenLastFour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTokenNotificationDataV2) GetTokenLastFourOk() (*string, bool) {
	if o == nil || common.IsNil(o.TokenLastFour) {
		return nil, false
	}
	return o.TokenLastFour, true
}

// HasTokenLastFour returns a boolean if a field has been set.
func (o *NetworkTokenNotificationDataV2) HasTokenLastFour() bool {
	if o != nil && !common.IsNil(o.TokenLastFour) {
		return true
	}

	return false
}

// SetTokenLastFour gets a reference to the given string and assigns it to the TokenLastFour field.
func (o *NetworkTokenNotificationDataV2) SetTokenLastFour(v string) {
	o.TokenLastFour = &v
}

// GetTokenRequestor returns the TokenRequestor field value if set, zero value otherwise.
func (o *NetworkTokenNotificationDataV2) GetTokenRequestor() NetworkTokenRequestor {
	if o == nil || common.IsNil(o.TokenRequestor) {
		var ret NetworkTokenRequestor
		return ret
	}
	return *o.TokenRequestor
}

// GetTokenRequestorOk returns a tuple with the TokenRequestor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTokenNotificationDataV2) GetTokenRequestorOk() (*NetworkTokenRequestor, bool) {
	if o == nil || common.IsNil(o.TokenRequestor) {
		return nil, false
	}
	return o.TokenRequestor, true
}

// HasTokenRequestor returns a boolean if a field has been set.
func (o *NetworkTokenNotificationDataV2) HasTokenRequestor() bool {
	if o != nil && !common.IsNil(o.TokenRequestor) {
		return true
	}

	return false
}

// SetTokenRequestor gets a reference to the given NetworkTokenRequestor and assigns it to the TokenRequestor field.
func (o *NetworkTokenNotificationDataV2) SetTokenRequestor(v NetworkTokenRequestor) {
	o.TokenRequestor = &v
}

// GetTransactionRulesResult returns the TransactionRulesResult field value if set, zero value otherwise.
func (o *NetworkTokenNotificationDataV2) GetTransactionRulesResult() NetworkTokenTransactionRulesResult {
	if o == nil || common.IsNil(o.TransactionRulesResult) {
		var ret NetworkTokenTransactionRulesResult
		return ret
	}
	return *o.TransactionRulesResult
}

// GetTransactionRulesResultOk returns a tuple with the TransactionRulesResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTokenNotificationDataV2) GetTransactionRulesResultOk() (*NetworkTokenTransactionRulesResult, bool) {
	if o == nil || common.IsNil(o.TransactionRulesResult) {
		return nil, false
	}
	return o.TransactionRulesResult, true
}

// HasTransactionRulesResult returns a boolean if a field has been set.
func (o *NetworkTokenNotificationDataV2) HasTransactionRulesResult() bool {
	if o != nil && !common.IsNil(o.TransactionRulesResult) {
		return true
	}

	return false
}

// SetTransactionRulesResult gets a reference to the given NetworkTokenTransactionRulesResult and assigns it to the TransactionRulesResult field.
func (o *NetworkTokenNotificationDataV2) SetTransactionRulesResult(v NetworkTokenTransactionRulesResult) {
	o.TransactionRulesResult = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NetworkTokenNotificationDataV2) GetType() string {
	if o == nil || common.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTokenNotificationDataV2) GetTypeOk() (*string, bool) {
	if o == nil || common.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NetworkTokenNotificationDataV2) HasType() bool {
	if o != nil && !common.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NetworkTokenNotificationDataV2) SetType(v string) {
	o.Type = &v
}

// GetValidationFacts returns the ValidationFacts field value if set, zero value otherwise.
func (o *NetworkTokenNotificationDataV2) GetValidationFacts() []ValidationFacts {
	if o == nil || common.IsNil(o.ValidationFacts) {
		var ret []ValidationFacts
		return ret
	}
	return o.ValidationFacts
}

// GetValidationFactsOk returns a tuple with the ValidationFacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTokenNotificationDataV2) GetValidationFactsOk() ([]ValidationFacts, bool) {
	if o == nil || common.IsNil(o.ValidationFacts) {
		return nil, false
	}
	return o.ValidationFacts, true
}

// HasValidationFacts returns a boolean if a field has been set.
func (o *NetworkTokenNotificationDataV2) HasValidationFacts() bool {
	if o != nil && !common.IsNil(o.ValidationFacts) {
		return true
	}

	return false
}

// SetValidationFacts gets a reference to the given []ValidationFacts and assigns it to the ValidationFacts field.
func (o *NetworkTokenNotificationDataV2) SetValidationFacts(v []ValidationFacts) {
	o.ValidationFacts = v
}

// GetWallet returns the Wallet field value if set, zero value otherwise.
func (o *NetworkTokenNotificationDataV2) GetWallet() Wallet {
	if o == nil || common.IsNil(o.Wallet) {
		var ret Wallet
		return ret
	}
	return *o.Wallet
}

// GetWalletOk returns a tuple with the Wallet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTokenNotificationDataV2) GetWalletOk() (*Wallet, bool) {
	if o == nil || common.IsNil(o.Wallet) {
		return nil, false
	}
	return o.Wallet, true
}

// HasWallet returns a boolean if a field has been set.
func (o *NetworkTokenNotificationDataV2) HasWallet() bool {
	if o != nil && !common.IsNil(o.Wallet) {
		return true
	}

	return false
}

// SetWallet gets a reference to the given Wallet and assigns it to the Wallet field.
func (o *NetworkTokenNotificationDataV2) SetWallet(v Wallet) {
	o.Wallet = &v
}

func (o NetworkTokenNotificationDataV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkTokenNotificationDataV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.Authentication) {
		toSerialize["authentication"] = o.Authentication
	}
	if !common.IsNil(o.AuthenticationApplied) {
		toSerialize["authenticationApplied"] = o.AuthenticationApplied
	}
	if !common.IsNil(o.BalancePlatform) {
		toSerialize["balancePlatform"] = o.BalancePlatform
	}
	if !common.IsNil(o.Decision) {
		toSerialize["decision"] = o.Decision
	}
	if !common.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !common.IsNil(o.PaymentInstrumentId) {
		toSerialize["paymentInstrumentId"] = o.PaymentInstrumentId
	}
	if !common.IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !common.IsNil(o.TokenLastFour) {
		toSerialize["tokenLastFour"] = o.TokenLastFour
	}
	if !common.IsNil(o.TokenRequestor) {
		toSerialize["tokenRequestor"] = o.TokenRequestor
	}
	if !common.IsNil(o.TransactionRulesResult) {
		toSerialize["transactionRulesResult"] = o.TransactionRulesResult
	}
	if !common.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !common.IsNil(o.ValidationFacts) {
		toSerialize["validationFacts"] = o.ValidationFacts
	}
	if !common.IsNil(o.Wallet) {
		toSerialize["wallet"] = o.Wallet
	}
	return toSerialize, nil
}

type NullableNetworkTokenNotificationDataV2 struct {
	value *NetworkTokenNotificationDataV2
	isSet bool
}

func (v NullableNetworkTokenNotificationDataV2) Get() *NetworkTokenNotificationDataV2 {
	return v.value
}

func (v *NullableNetworkTokenNotificationDataV2) Set(val *NetworkTokenNotificationDataV2) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkTokenNotificationDataV2) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkTokenNotificationDataV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkTokenNotificationDataV2(val *NetworkTokenNotificationDataV2) *NullableNetworkTokenNotificationDataV2 {
	return &NullableNetworkTokenNotificationDataV2{value: val, isSet: true}
}

func (v NullableNetworkTokenNotificationDataV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkTokenNotificationDataV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



