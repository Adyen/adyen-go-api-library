/*
Configuration webhooks

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationwebhook

import (
	"encoding/json"
	"fmt"
)

// SweepConfigurationSchedule - The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
type SweepConfigurationSchedule struct {
	CronSweepSchedule *CronSweepSchedule
	SweepSchedule     *SweepSchedule
}

// CronSweepScheduleAsSweepConfigurationSchedule is a convenience function that returns CronSweepSchedule wrapped in SweepConfigurationSchedule
func CronSweepScheduleAsSweepConfigurationSchedule(v *CronSweepSchedule) SweepConfigurationSchedule {
	return SweepConfigurationSchedule{
		CronSweepSchedule: v,
	}
}

// SweepScheduleAsSweepConfigurationSchedule is a convenience function that returns SweepSchedule wrapped in SweepConfigurationSchedule
func SweepScheduleAsSweepConfigurationSchedule(v *SweepSchedule) SweepConfigurationSchedule {
	return SweepConfigurationSchedule{
		SweepSchedule: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SweepConfigurationSchedule) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CronSweepSchedule
	err = json.Unmarshal(data, &dst.CronSweepSchedule)
	if err == nil {
		jsonCronSweepSchedule, _ := json.Marshal(dst.CronSweepSchedule)
		if string(jsonCronSweepSchedule) == "{}" || !dst.CronSweepSchedule.isValidType() { // empty struct
			dst.CronSweepSchedule = nil
		} else {
			match++
		}
	} else {
		dst.CronSweepSchedule = nil
	}

	// try to unmarshal data into SweepSchedule
	err = json.Unmarshal(data, &dst.SweepSchedule)
	if err == nil {
		jsonSweepSchedule, _ := json.Marshal(dst.SweepSchedule)
		if string(jsonSweepSchedule) == "{}" || !dst.SweepSchedule.isValidType() { // empty struct
			dst.SweepSchedule = nil
		} else {
			match++
		}
	} else {
		dst.SweepSchedule = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CronSweepSchedule = nil
		dst.SweepSchedule = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SweepConfigurationSchedule)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SweepConfigurationSchedule)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SweepConfigurationSchedule) MarshalJSON() ([]byte, error) {
	if src.CronSweepSchedule != nil {
		return json.Marshal(&src.CronSweepSchedule)
	}

	if src.SweepSchedule != nil {
		return json.Marshal(&src.SweepSchedule)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SweepConfigurationSchedule) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CronSweepSchedule != nil {
		return obj.CronSweepSchedule
	}

	if obj.SweepSchedule != nil {
		return obj.SweepSchedule
	}

	// all schemas are nil
	return nil
}

type NullableSweepConfigurationSchedule struct {
	value *SweepConfigurationSchedule
	isSet bool
}

func (v NullableSweepConfigurationSchedule) Get() *SweepConfigurationSchedule {
	return v.value
}

func (v *NullableSweepConfigurationSchedule) Set(val *SweepConfigurationSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableSweepConfigurationSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableSweepConfigurationSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSweepConfigurationSchedule(val *SweepConfigurationSchedule) *NullableSweepConfigurationSchedule {
	return &NullableSweepConfigurationSchedule{value: val, isSet: true}
}

func (v NullableSweepConfigurationSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSweepConfigurationSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
