/*
Configuration webhooks

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationwebhook

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v21/src/common"
)

// checks if the Wallet type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &Wallet{}

// Wallet struct for Wallet
type Wallet struct {
	// The confidence score of the wallet account, calculated by the wallet provider.  A high score means that account is considered trustworthy. A low score means that the account is considered suspicious.  Possible values: **1** to **5**.
	AccountScore *string `json:"accountScore,omitempty"`
	Device       *Device `json:"device,omitempty"`
	// The confidence score of the device, calculated by the wallet provider.  A high score means that device is considered trustworthy. A low score means that the device is considered suspicious.  Possible values: **1** to **5**.
	DeviceScore *string `json:"deviceScore,omitempty"`
	// The method used for provisioning the network token.  Possible values: **push**, **manual**, **cof**, **unknown**.
	ProvisioningMethod *string `json:"provisioningMethod,omitempty"`
	// A list of risk indicators triggered at the time of provisioning the network token.  Some example values of risk indicators are:  * **accountTooNewSinceLaunch** * **tooManyRecentAttempts** * **lowDeviceScore** * **lowAccountScore**
	RecommendationReasons []string `json:"recommendationReasons,omitempty"`
	// The type of wallet that the network token is associated with.  Possible values: **applePay**, **googlePay**, **garminPay**.
	// Deprecated since Configuration webhooks v2
	// Use name of the `tokenRequestor` instead.
	Type *string `json:"type,omitempty"`
}

// NewWallet instantiates a new Wallet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWallet() *Wallet {
	this := Wallet{}
	return &this
}

// NewWalletWithDefaults instantiates a new Wallet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletWithDefaults() *Wallet {
	this := Wallet{}
	return &this
}

// GetAccountScore returns the AccountScore field value if set, zero value otherwise.
func (o *Wallet) GetAccountScore() string {
	if o == nil || common.IsNil(o.AccountScore) {
		var ret string
		return ret
	}
	return *o.AccountScore
}

// GetAccountScoreOk returns a tuple with the AccountScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallet) GetAccountScoreOk() (*string, bool) {
	if o == nil || common.IsNil(o.AccountScore) {
		return nil, false
	}
	return o.AccountScore, true
}

// HasAccountScore returns a boolean if a field has been set.
func (o *Wallet) HasAccountScore() bool {
	if o != nil && !common.IsNil(o.AccountScore) {
		return true
	}

	return false
}

// SetAccountScore gets a reference to the given string and assigns it to the AccountScore field.
func (o *Wallet) SetAccountScore(v string) {
	o.AccountScore = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *Wallet) GetDevice() Device {
	if o == nil || common.IsNil(o.Device) {
		var ret Device
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallet) GetDeviceOk() (*Device, bool) {
	if o == nil || common.IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *Wallet) HasDevice() bool {
	if o != nil && !common.IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given Device and assigns it to the Device field.
func (o *Wallet) SetDevice(v Device) {
	o.Device = &v
}

// GetDeviceScore returns the DeviceScore field value if set, zero value otherwise.
func (o *Wallet) GetDeviceScore() string {
	if o == nil || common.IsNil(o.DeviceScore) {
		var ret string
		return ret
	}
	return *o.DeviceScore
}

// GetDeviceScoreOk returns a tuple with the DeviceScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallet) GetDeviceScoreOk() (*string, bool) {
	if o == nil || common.IsNil(o.DeviceScore) {
		return nil, false
	}
	return o.DeviceScore, true
}

// HasDeviceScore returns a boolean if a field has been set.
func (o *Wallet) HasDeviceScore() bool {
	if o != nil && !common.IsNil(o.DeviceScore) {
		return true
	}

	return false
}

// SetDeviceScore gets a reference to the given string and assigns it to the DeviceScore field.
func (o *Wallet) SetDeviceScore(v string) {
	o.DeviceScore = &v
}

// GetProvisioningMethod returns the ProvisioningMethod field value if set, zero value otherwise.
func (o *Wallet) GetProvisioningMethod() string {
	if o == nil || common.IsNil(o.ProvisioningMethod) {
		var ret string
		return ret
	}
	return *o.ProvisioningMethod
}

// GetProvisioningMethodOk returns a tuple with the ProvisioningMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallet) GetProvisioningMethodOk() (*string, bool) {
	if o == nil || common.IsNil(o.ProvisioningMethod) {
		return nil, false
	}
	return o.ProvisioningMethod, true
}

// HasProvisioningMethod returns a boolean if a field has been set.
func (o *Wallet) HasProvisioningMethod() bool {
	if o != nil && !common.IsNil(o.ProvisioningMethod) {
		return true
	}

	return false
}

// SetProvisioningMethod gets a reference to the given string and assigns it to the ProvisioningMethod field.
func (o *Wallet) SetProvisioningMethod(v string) {
	o.ProvisioningMethod = &v
}

// GetRecommendationReasons returns the RecommendationReasons field value if set, zero value otherwise.
func (o *Wallet) GetRecommendationReasons() []string {
	if o == nil || common.IsNil(o.RecommendationReasons) {
		var ret []string
		return ret
	}
	return o.RecommendationReasons
}

// GetRecommendationReasonsOk returns a tuple with the RecommendationReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallet) GetRecommendationReasonsOk() ([]string, bool) {
	if o == nil || common.IsNil(o.RecommendationReasons) {
		return nil, false
	}
	return o.RecommendationReasons, true
}

// HasRecommendationReasons returns a boolean if a field has been set.
func (o *Wallet) HasRecommendationReasons() bool {
	if o != nil && !common.IsNil(o.RecommendationReasons) {
		return true
	}

	return false
}

// SetRecommendationReasons gets a reference to the given []string and assigns it to the RecommendationReasons field.
func (o *Wallet) SetRecommendationReasons(v []string) {
	o.RecommendationReasons = v
}

// GetType returns the Type field value if set, zero value otherwise.
// Deprecated since Configuration webhooks v2
// Use name of the `tokenRequestor` instead.
func (o *Wallet) GetType() string {
	if o == nil || common.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated since Configuration webhooks v2
// Use name of the `tokenRequestor` instead.
func (o *Wallet) GetTypeOk() (*string, bool) {
	if o == nil || common.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Wallet) HasType() bool {
	if o != nil && !common.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
// Deprecated since Configuration webhooks v2
// Use name of the `tokenRequestor` instead.
func (o *Wallet) SetType(v string) {
	o.Type = &v
}

func (o Wallet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Wallet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.AccountScore) {
		toSerialize["accountScore"] = o.AccountScore
	}
	if !common.IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !common.IsNil(o.DeviceScore) {
		toSerialize["deviceScore"] = o.DeviceScore
	}
	if !common.IsNil(o.ProvisioningMethod) {
		toSerialize["provisioningMethod"] = o.ProvisioningMethod
	}
	if !common.IsNil(o.RecommendationReasons) {
		toSerialize["recommendationReasons"] = o.RecommendationReasons
	}
	if !common.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableWallet struct {
	value *Wallet
	isSet bool
}

func (v NullableWallet) Get() *Wallet {
	return v.value
}

func (v *NullableWallet) Set(val *Wallet) {
	v.value = val
	v.isSet = true
}

func (v NullableWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWallet(val *Wallet) *NullableWallet {
	return &NullableWallet{value: val, isSet: true}
}

func (v NullableWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
