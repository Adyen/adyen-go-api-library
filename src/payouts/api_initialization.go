/*
Adyen Payout API

API version: 68
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package payouts

import (
	_context "context"
	_nethttp "net/http"
)

/*
Store payout details
Stores payment details under the &#x60;PAYOUT&#x60; recurring contract. These payment details can be used later to submit a payout via the &#x60;/submitThirdParty&#x60; call.
  - @param req StoreDetailRequest - reference of StoreDetailRequest).
  - @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return StoreDetailResponse
*/
func (a Payouts) StorePayoutDetails(req *StoreDetailRequest, ctxs ..._context.Context) (StoreDetailResponse, *_nethttp.Response, error) {
	res := &StoreDetailResponse{}
	path := "/storeDetail"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Store details and submit a payout
Submits a payout and stores its details for subsequent payouts.  The submitted payout must be confirmed or declined either by a reviewer or via &#x60;/confirmThirdParty&#x60; or &#x60;/declineThirdParty&#x60; calls.
  - @param req StoreDetailAndSubmitRequest - reference of StoreDetailAndSubmitRequest).
  - @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return StoreDetailAndSubmitResponse
*/
func (a Payouts) StoreDetailsAndSubmitPayout(req *StoreDetailAndSubmitRequest, ctxs ..._context.Context) (StoreDetailAndSubmitResponse, *_nethttp.Response, error) {
	res := &StoreDetailAndSubmitResponse{}
	path := "/storeDetailAndSubmitThirdParty"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Submit a payout
Submits a payout using the previously stored payment details. To store payment details, use the &#x60;/storeDetail&#x60; API call.  The submitted payout must be confirmed or declined either by a reviewer or via &#x60;/confirmThirdParty&#x60; or &#x60;/declineThirdParty&#x60; calls.
  - @param req SubmitRequest - reference of SubmitRequest).
  - @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return SubmitResponse
*/
func (a Payouts) SubmitPayout(req *SubmitRequest, ctxs ..._context.Context) (SubmitResponse, *_nethttp.Response, error) {
	res := &SubmitResponse{}
	path := "/submitThirdParty"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}
