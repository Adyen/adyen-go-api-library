/*
Adyen BinLookup API

API version: 54
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binlookup

import (
	"context"
	_nethttp "net/http"
	"net/url"

	"github.com/adyen/adyen-go-api-library/v6/src/common"
)

// GeneralApi GeneralApi service
type GeneralApi common.Service

type GeneralApiGet3dsAvailabilityConfig struct {
	ctx                        context.Context
	threeDSAvailabilityRequest *ThreeDSAvailabilityRequest
}

func (r GeneralApiGet3dsAvailabilityConfig) ThreeDSAvailabilityRequest(threeDSAvailabilityRequest ThreeDSAvailabilityRequest) GeneralApiGet3dsAvailabilityConfig {
	r.threeDSAvailabilityRequest = &threeDSAvailabilityRequest
	return r
}

/*
Get3dsAvailability Check if 3D Secure is available

Verifies whether 3D Secure is available for the specified BIN or card brand. For 3D Secure 2, this endpoint also returns device fingerprinting keys.

For more information, refer to [3D Secure 2](https://docs.adyen.com/online-payments/3d-secure/native-3ds2).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GeneralApiGet3dsAvailabilityConfig
*/
func (a *GeneralApi) Get3dsAvailabilityConfig(ctx context.Context) GeneralApiGet3dsAvailabilityConfig {
	return GeneralApiGet3dsAvailabilityConfig{
		ctx: ctx,
	}
}

/*
Check if 3D Secure is available
Verifies whether 3D Secure is available for the specified BIN or card brand. For 3D Secure 2, this endpoint also returns device fingerprinting keys.  For more information, refer to [3D Secure 2](https://docs.adyen.com/online-payments/3d-secure/native-3ds2).
 * @param req ThreeDSAvailabilityRequest - reference of ThreeDSAvailabilityRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ThreeDSAvailabilityResponse
*/

func (a *GeneralApi) Get3dsAvailability(r GeneralApiGet3dsAvailabilityConfig) (ThreeDSAvailabilityResponse, *_nethttp.Response, error) {
	res := &ThreeDSAvailabilityResponse{}
	path := "/get3dsAvailability"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.threeDSAvailabilityRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}

type GeneralApiGetCostEstimateConfig struct {
	ctx                 context.Context
	costEstimateRequest *CostEstimateRequest
}

func (r GeneralApiGetCostEstimateConfig) CostEstimateRequest(costEstimateRequest CostEstimateRequest) GeneralApiGetCostEstimateConfig {
	r.costEstimateRequest = &costEstimateRequest
	return r
}

/*
GetCostEstimate Get a fees cost estimate

>This API is available only for merchants operating in Australia, the EU, and the UK.

Use the Adyen Cost Estimation API to pre-calculate interchange and scheme fee costs. Knowing these costs prior actual payment authorisation gives you an opportunity to charge those costs to the cardholder, if necessary.

To retrieve this information, make the call to the `/getCostEstimate` endpoint. The response to this call contains the amount of the interchange and scheme fees charged by the network for this transaction, and also which surcharging policy is possible (based on current regulations).

> Since not all information is known in advance (for example, if the cardholder will successfully authenticate via 3D Secure or if you also plan to provide additional Level 2/3 data), the returned amounts are based on a set of assumption criteria you define in the `assumptions` parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GeneralApiGetCostEstimateConfig
*/
func (a *GeneralApi) GetCostEstimateConfig(ctx context.Context) GeneralApiGetCostEstimateConfig {
	return GeneralApiGetCostEstimateConfig{
		ctx: ctx,
	}
}

/*
Get a fees cost estimate
&gt;This API is available only for merchants operating in Australia, the EU, and the UK.  Use the Adyen Cost Estimation API to pre-calculate interchange and scheme fee costs. Knowing these costs prior actual payment authorisation gives you an opportunity to charge those costs to the cardholder, if necessary.  To retrieve this information, make the call to the &#x60;/getCostEstimate&#x60; endpoint. The response to this call contains the amount of the interchange and scheme fees charged by the network for this transaction, and also which surcharging policy is possible (based on current regulations).  &gt; Since not all information is known in advance (for example, if the cardholder will successfully authenticate via 3D Secure or if you also plan to provide additional Level 2/3 data), the returned amounts are based on a set of assumption criteria you define in the &#x60;assumptions&#x60; parameter.
 * @param req CostEstimateRequest - reference of CostEstimateRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CostEstimateResponse
*/

func (a *GeneralApi) GetCostEstimate(r GeneralApiGetCostEstimateConfig) (CostEstimateResponse, *_nethttp.Response, error) {
	res := &CostEstimateResponse{}
	path := "/getCostEstimate"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.costEstimateRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}
