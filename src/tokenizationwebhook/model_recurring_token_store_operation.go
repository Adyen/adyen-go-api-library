/*
Tokenization webhooks

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokenizationwebhook

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v21/src/common"
)

// checks if the RecurringTokenStoreOperation type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &RecurringTokenStoreOperation{}

// RecurringTokenStoreOperation struct for RecurringTokenStoreOperation
type RecurringTokenStoreOperation struct {
	// The identifier of the merchant account related to the event that triggered the webhook.
	MerchantAccount string `json:"merchantAccount"`
	// A text description that provides details about the operation, intended for audit purposes.
	Operation string `json:"operation"`
	// Your unique shopper reference that is associated with the `storedPaymentMethodId`.
	ShopperReference string `json:"shopperReference"`
	// The ID of the token.
	StoredPaymentMethodId string `json:"storedPaymentMethodId"`
	// The type of the payment method.
	Type string `json:"type"`
}

// NewRecurringTokenStoreOperation instantiates a new RecurringTokenStoreOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurringTokenStoreOperation(merchantAccount string, operation string, shopperReference string, storedPaymentMethodId string, type_ string) *RecurringTokenStoreOperation {
	this := RecurringTokenStoreOperation{}
	this.MerchantAccount = merchantAccount
	this.Operation = operation
	this.ShopperReference = shopperReference
	this.StoredPaymentMethodId = storedPaymentMethodId
	this.Type = type_
	return &this
}

// NewRecurringTokenStoreOperationWithDefaults instantiates a new RecurringTokenStoreOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurringTokenStoreOperationWithDefaults() *RecurringTokenStoreOperation {
	this := RecurringTokenStoreOperation{}
	return &this
}

// GetMerchantAccount returns the MerchantAccount field value
func (o *RecurringTokenStoreOperation) GetMerchantAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantAccount
}

// GetMerchantAccountOk returns a tuple with the MerchantAccount field value
// and a boolean to check if the value has been set.
func (o *RecurringTokenStoreOperation) GetMerchantAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantAccount, true
}

// SetMerchantAccount sets field value
func (o *RecurringTokenStoreOperation) SetMerchantAccount(v string) {
	o.MerchantAccount = v
}

// GetOperation returns the Operation field value
func (o *RecurringTokenStoreOperation) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *RecurringTokenStoreOperation) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *RecurringTokenStoreOperation) SetOperation(v string) {
	o.Operation = v
}

// GetShopperReference returns the ShopperReference field value
func (o *RecurringTokenStoreOperation) GetShopperReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShopperReference
}

// GetShopperReferenceOk returns a tuple with the ShopperReference field value
// and a boolean to check if the value has been set.
func (o *RecurringTokenStoreOperation) GetShopperReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShopperReference, true
}

// SetShopperReference sets field value
func (o *RecurringTokenStoreOperation) SetShopperReference(v string) {
	o.ShopperReference = v
}

// GetStoredPaymentMethodId returns the StoredPaymentMethodId field value
func (o *RecurringTokenStoreOperation) GetStoredPaymentMethodId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StoredPaymentMethodId
}

// GetStoredPaymentMethodIdOk returns a tuple with the StoredPaymentMethodId field value
// and a boolean to check if the value has been set.
func (o *RecurringTokenStoreOperation) GetStoredPaymentMethodIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoredPaymentMethodId, true
}

// SetStoredPaymentMethodId sets field value
func (o *RecurringTokenStoreOperation) SetStoredPaymentMethodId(v string) {
	o.StoredPaymentMethodId = v
}

// GetType returns the Type field value
func (o *RecurringTokenStoreOperation) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RecurringTokenStoreOperation) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RecurringTokenStoreOperation) SetType(v string) {
	o.Type = v
}

func (o RecurringTokenStoreOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecurringTokenStoreOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merchantAccount"] = o.MerchantAccount
	toSerialize["operation"] = o.Operation
	toSerialize["shopperReference"] = o.ShopperReference
	toSerialize["storedPaymentMethodId"] = o.StoredPaymentMethodId
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableRecurringTokenStoreOperation struct {
	value *RecurringTokenStoreOperation
	isSet bool
}

func (v NullableRecurringTokenStoreOperation) Get() *RecurringTokenStoreOperation {
	return v.value
}

func (v *NullableRecurringTokenStoreOperation) Set(val *RecurringTokenStoreOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurringTokenStoreOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurringTokenStoreOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurringTokenStoreOperation(val *RecurringTokenStoreOperation) *NullableRecurringTokenStoreOperation {
	return &NullableRecurringTokenStoreOperation{value: val, isSet: true}
}

func (v NullableRecurringTokenStoreOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurringTokenStoreOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
