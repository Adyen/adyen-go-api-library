/*
Transfer webhooks

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transferwebhook

import (
	"encoding/json"
	"time"

	"github.com/adyen/adyen-go-api-library/v8/src/common"
)

// checks if the TransferData type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &TransferData{}

// TransferData struct for TransferData
type TransferData struct {
	AccountHolder  *ResourceReference `json:"accountHolder,omitempty"`
	Amount         Amount             `json:"amount"`
	BalanceAccount *ResourceReference `json:"balanceAccount,omitempty"`
	// The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
	// Deprecated
	BalanceAccountId *string `json:"balanceAccountId,omitempty"`
	// The unique identifier of the balance platform.
	BalancePlatform *string `json:"balancePlatform,omitempty"`
	// The list of the latest balance statuses in the transfer.
	Balances []BalanceMutation `json:"balances,omitempty"`
	// The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.
	Category     string          `json:"category"`
	Counterparty *CounterpartyV3 `json:"counterparty,omitempty"`
	// The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
	CreationDate *time.Time `json:"creationDate,omitempty"`
	// Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.  Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , ' + Space**  Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] & $ % # @** **~ = + - _ ' \" ! ?**
	Description *string `json:"description,omitempty"`
	// The direction of the transfer.  Possible values: **incoming**, **outgoing**.
	Direction *string `json:"direction,omitempty"`
	// The list of events leading up to the current status of the transfer.
	Events []TransferEvent `json:"events,omitempty"`
	// The ID of the resource.
	Id *string `json:"id,omitempty"`
	// The capture's merchant reference included in the transfer.
	// Deprecated
	ModificationMerchantReference *string `json:"modificationMerchantReference,omitempty"`
	// The capture reference included in the transfer.
	// Deprecated
	ModificationPspReference *string `json:"modificationPspReference,omitempty"`
	// Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.
	// Deprecated
	PanEntryMode      *string            `json:"panEntryMode,omitempty"`
	PaymentInstrument *PaymentInstrument `json:"paymentInstrument,omitempty"`
	// The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) used in the transfer.
	// Deprecated
	PaymentInstrumentId *string `json:"paymentInstrumentId,omitempty"`
	// The payment's merchant reference included in the transfer.
	// Deprecated
	PaymentMerchantReference *string `json:"paymentMerchantReference,omitempty"`
	// The type of the related split.
	// Deprecated
	PlatformPaymentType *string `json:"platformPaymentType,omitempty"`
	// The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).
	Priority *string `json:"priority,omitempty"`
	// Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.
	// Deprecated
	ProcessingType *string `json:"processingType,omitempty"`
	// The payment reference included in the transfer.
	// Deprecated
	PspPaymentReference *string `json:"pspPaymentReference,omitempty"`
	// Additional information about the status of the transfer.
	Reason *string `json:"reason,omitempty"`
	// Your reference for the transfer, used internally within your platform. If you don't provide this in the request, Adyen generates a unique reference.
	Reference *string `json:"reference,omitempty"`
	//  A reference that is sent to the recipient. This reference is also sent in all webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.   Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the `category`.  - **internal**: 80 characters  - **bank**: 35 characters when transferring to an IBAN, 15 characters for others.
	ReferenceForBeneficiary  *string                   `json:"referenceForBeneficiary,omitempty"`
	RelayedAuthorisationData *RelayedAuthorisationData `json:"relayedAuthorisationData,omitempty"`
	// The sequence number of the transfer notification. The numbers start from 1 and increase with each new notification for a specific transfer.  It can help you restore the correct sequence of events even if they arrive out of order.
	SequenceNumber *int32 `json:"sequenceNumber,omitempty"`
	// The result of the transfer.   For example, **authorised**, **refused**, or **error**.
	Status   string                                `json:"status"`
	Tracking *TransferNotificationTransferTracking `json:"tracking,omitempty"`
	// The ID of the transaction that is created based on the transfer.
	// Deprecated
	TransactionId          *string                 `json:"transactionId,omitempty"`
	TransactionRulesResult *TransactionRulesResult `json:"transactionRulesResult,omitempty"`
	// The type of transfer or transaction. For example, **refund**, **payment**, **internalTransfer**, **bankTransfer**.
	Type *string `json:"type,omitempty"`
	// The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information.
	// Deprecated
	ValidationFacts []TransferNotificationValidationFact `json:"validationFacts,omitempty"`
}

// NewTransferData instantiates a new TransferData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferData(amount Amount, category string, status string) *TransferData {
	this := TransferData{}
	this.Amount = amount
	this.Category = category
	this.Status = status
	return &this
}

// NewTransferDataWithDefaults instantiates a new TransferData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferDataWithDefaults() *TransferData {
	this := TransferData{}
	return &this
}

// GetAccountHolder returns the AccountHolder field value if set, zero value otherwise.
func (o *TransferData) GetAccountHolder() ResourceReference {
	if o == nil || common.IsNil(o.AccountHolder) {
		var ret ResourceReference
		return ret
	}
	return *o.AccountHolder
}

// GetAccountHolderOk returns a tuple with the AccountHolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetAccountHolderOk() (*ResourceReference, bool) {
	if o == nil || common.IsNil(o.AccountHolder) {
		return nil, false
	}
	return o.AccountHolder, true
}

// HasAccountHolder returns a boolean if a field has been set.
func (o *TransferData) HasAccountHolder() bool {
	if o != nil && !common.IsNil(o.AccountHolder) {
		return true
	}

	return false
}

// SetAccountHolder gets a reference to the given ResourceReference and assigns it to the AccountHolder field.
func (o *TransferData) SetAccountHolder(v ResourceReference) {
	o.AccountHolder = &v
}

// GetAmount returns the Amount field value
func (o *TransferData) GetAmount() Amount {
	if o == nil {
		var ret Amount
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransferData) GetAmountOk() (*Amount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransferData) SetAmount(v Amount) {
	o.Amount = v
}

// GetBalanceAccount returns the BalanceAccount field value if set, zero value otherwise.
func (o *TransferData) GetBalanceAccount() ResourceReference {
	if o == nil || common.IsNil(o.BalanceAccount) {
		var ret ResourceReference
		return ret
	}
	return *o.BalanceAccount
}

// GetBalanceAccountOk returns a tuple with the BalanceAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetBalanceAccountOk() (*ResourceReference, bool) {
	if o == nil || common.IsNil(o.BalanceAccount) {
		return nil, false
	}
	return o.BalanceAccount, true
}

// HasBalanceAccount returns a boolean if a field has been set.
func (o *TransferData) HasBalanceAccount() bool {
	if o != nil && !common.IsNil(o.BalanceAccount) {
		return true
	}

	return false
}

// SetBalanceAccount gets a reference to the given ResourceReference and assigns it to the BalanceAccount field.
func (o *TransferData) SetBalanceAccount(v ResourceReference) {
	o.BalanceAccount = &v
}

// GetBalanceAccountId returns the BalanceAccountId field value if set, zero value otherwise.
// Deprecated
func (o *TransferData) GetBalanceAccountId() string {
	if o == nil || common.IsNil(o.BalanceAccountId) {
		var ret string
		return ret
	}
	return *o.BalanceAccountId
}

// GetBalanceAccountIdOk returns a tuple with the BalanceAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TransferData) GetBalanceAccountIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.BalanceAccountId) {
		return nil, false
	}
	return o.BalanceAccountId, true
}

// HasBalanceAccountId returns a boolean if a field has been set.
func (o *TransferData) HasBalanceAccountId() bool {
	if o != nil && !common.IsNil(o.BalanceAccountId) {
		return true
	}

	return false
}

// SetBalanceAccountId gets a reference to the given string and assigns it to the BalanceAccountId field.
// Deprecated
func (o *TransferData) SetBalanceAccountId(v string) {
	o.BalanceAccountId = &v
}

// GetBalancePlatform returns the BalancePlatform field value if set, zero value otherwise.
func (o *TransferData) GetBalancePlatform() string {
	if o == nil || common.IsNil(o.BalancePlatform) {
		var ret string
		return ret
	}
	return *o.BalancePlatform
}

// GetBalancePlatformOk returns a tuple with the BalancePlatform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetBalancePlatformOk() (*string, bool) {
	if o == nil || common.IsNil(o.BalancePlatform) {
		return nil, false
	}
	return o.BalancePlatform, true
}

// HasBalancePlatform returns a boolean if a field has been set.
func (o *TransferData) HasBalancePlatform() bool {
	if o != nil && !common.IsNil(o.BalancePlatform) {
		return true
	}

	return false
}

// SetBalancePlatform gets a reference to the given string and assigns it to the BalancePlatform field.
func (o *TransferData) SetBalancePlatform(v string) {
	o.BalancePlatform = &v
}

// GetBalances returns the Balances field value if set, zero value otherwise.
func (o *TransferData) GetBalances() []BalanceMutation {
	if o == nil || common.IsNil(o.Balances) {
		var ret []BalanceMutation
		return ret
	}
	return o.Balances
}

// GetBalancesOk returns a tuple with the Balances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetBalancesOk() ([]BalanceMutation, bool) {
	if o == nil || common.IsNil(o.Balances) {
		return nil, false
	}
	return o.Balances, true
}

// HasBalances returns a boolean if a field has been set.
func (o *TransferData) HasBalances() bool {
	if o != nil && !common.IsNil(o.Balances) {
		return true
	}

	return false
}

// SetBalances gets a reference to the given []BalanceMutation and assigns it to the Balances field.
func (o *TransferData) SetBalances(v []BalanceMutation) {
	o.Balances = v
}

// GetCategory returns the Category field value
func (o *TransferData) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *TransferData) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *TransferData) SetCategory(v string) {
	o.Category = v
}

// GetCounterparty returns the Counterparty field value if set, zero value otherwise.
func (o *TransferData) GetCounterparty() CounterpartyV3 {
	if o == nil || common.IsNil(o.Counterparty) {
		var ret CounterpartyV3
		return ret
	}
	return *o.Counterparty
}

// GetCounterpartyOk returns a tuple with the Counterparty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetCounterpartyOk() (*CounterpartyV3, bool) {
	if o == nil || common.IsNil(o.Counterparty) {
		return nil, false
	}
	return o.Counterparty, true
}

// HasCounterparty returns a boolean if a field has been set.
func (o *TransferData) HasCounterparty() bool {
	if o != nil && !common.IsNil(o.Counterparty) {
		return true
	}

	return false
}

// SetCounterparty gets a reference to the given CounterpartyV3 and assigns it to the Counterparty field.
func (o *TransferData) SetCounterparty(v CounterpartyV3) {
	o.Counterparty = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *TransferData) GetCreationDate() time.Time {
	if o == nil || common.IsNil(o.CreationDate) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || common.IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *TransferData) HasCreationDate() bool {
	if o != nil && !common.IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *TransferData) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TransferData) GetDescription() string {
	if o == nil || common.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetDescriptionOk() (*string, bool) {
	if o == nil || common.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TransferData) HasDescription() bool {
	if o != nil && !common.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TransferData) SetDescription(v string) {
	o.Description = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *TransferData) GetDirection() string {
	if o == nil || common.IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetDirectionOk() (*string, bool) {
	if o == nil || common.IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *TransferData) HasDirection() bool {
	if o != nil && !common.IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *TransferData) SetDirection(v string) {
	o.Direction = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *TransferData) GetEvents() []TransferEvent {
	if o == nil || common.IsNil(o.Events) {
		var ret []TransferEvent
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetEventsOk() ([]TransferEvent, bool) {
	if o == nil || common.IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *TransferData) HasEvents() bool {
	if o != nil && !common.IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []TransferEvent and assigns it to the Events field.
func (o *TransferData) SetEvents(v []TransferEvent) {
	o.Events = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TransferData) GetId() string {
	if o == nil || common.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TransferData) HasId() bool {
	if o != nil && !common.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TransferData) SetId(v string) {
	o.Id = &v
}

// GetModificationMerchantReference returns the ModificationMerchantReference field value if set, zero value otherwise.
// Deprecated
func (o *TransferData) GetModificationMerchantReference() string {
	if o == nil || common.IsNil(o.ModificationMerchantReference) {
		var ret string
		return ret
	}
	return *o.ModificationMerchantReference
}

// GetModificationMerchantReferenceOk returns a tuple with the ModificationMerchantReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TransferData) GetModificationMerchantReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.ModificationMerchantReference) {
		return nil, false
	}
	return o.ModificationMerchantReference, true
}

// HasModificationMerchantReference returns a boolean if a field has been set.
func (o *TransferData) HasModificationMerchantReference() bool {
	if o != nil && !common.IsNil(o.ModificationMerchantReference) {
		return true
	}

	return false
}

// SetModificationMerchantReference gets a reference to the given string and assigns it to the ModificationMerchantReference field.
// Deprecated
func (o *TransferData) SetModificationMerchantReference(v string) {
	o.ModificationMerchantReference = &v
}

// GetModificationPspReference returns the ModificationPspReference field value if set, zero value otherwise.
// Deprecated
func (o *TransferData) GetModificationPspReference() string {
	if o == nil || common.IsNil(o.ModificationPspReference) {
		var ret string
		return ret
	}
	return *o.ModificationPspReference
}

// GetModificationPspReferenceOk returns a tuple with the ModificationPspReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TransferData) GetModificationPspReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.ModificationPspReference) {
		return nil, false
	}
	return o.ModificationPspReference, true
}

// HasModificationPspReference returns a boolean if a field has been set.
func (o *TransferData) HasModificationPspReference() bool {
	if o != nil && !common.IsNil(o.ModificationPspReference) {
		return true
	}

	return false
}

// SetModificationPspReference gets a reference to the given string and assigns it to the ModificationPspReference field.
// Deprecated
func (o *TransferData) SetModificationPspReference(v string) {
	o.ModificationPspReference = &v
}

// GetPanEntryMode returns the PanEntryMode field value if set, zero value otherwise.
// Deprecated
func (o *TransferData) GetPanEntryMode() string {
	if o == nil || common.IsNil(o.PanEntryMode) {
		var ret string
		return ret
	}
	return *o.PanEntryMode
}

// GetPanEntryModeOk returns a tuple with the PanEntryMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TransferData) GetPanEntryModeOk() (*string, bool) {
	if o == nil || common.IsNil(o.PanEntryMode) {
		return nil, false
	}
	return o.PanEntryMode, true
}

// HasPanEntryMode returns a boolean if a field has been set.
func (o *TransferData) HasPanEntryMode() bool {
	if o != nil && !common.IsNil(o.PanEntryMode) {
		return true
	}

	return false
}

// SetPanEntryMode gets a reference to the given string and assigns it to the PanEntryMode field.
// Deprecated
func (o *TransferData) SetPanEntryMode(v string) {
	o.PanEntryMode = &v
}

// GetPaymentInstrument returns the PaymentInstrument field value if set, zero value otherwise.
func (o *TransferData) GetPaymentInstrument() PaymentInstrument {
	if o == nil || common.IsNil(o.PaymentInstrument) {
		var ret PaymentInstrument
		return ret
	}
	return *o.PaymentInstrument
}

// GetPaymentInstrumentOk returns a tuple with the PaymentInstrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetPaymentInstrumentOk() (*PaymentInstrument, bool) {
	if o == nil || common.IsNil(o.PaymentInstrument) {
		return nil, false
	}
	return o.PaymentInstrument, true
}

// HasPaymentInstrument returns a boolean if a field has been set.
func (o *TransferData) HasPaymentInstrument() bool {
	if o != nil && !common.IsNil(o.PaymentInstrument) {
		return true
	}

	return false
}

// SetPaymentInstrument gets a reference to the given PaymentInstrument and assigns it to the PaymentInstrument field.
func (o *TransferData) SetPaymentInstrument(v PaymentInstrument) {
	o.PaymentInstrument = &v
}

// GetPaymentInstrumentId returns the PaymentInstrumentId field value if set, zero value otherwise.
// Deprecated
func (o *TransferData) GetPaymentInstrumentId() string {
	if o == nil || common.IsNil(o.PaymentInstrumentId) {
		var ret string
		return ret
	}
	return *o.PaymentInstrumentId
}

// GetPaymentInstrumentIdOk returns a tuple with the PaymentInstrumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TransferData) GetPaymentInstrumentIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.PaymentInstrumentId) {
		return nil, false
	}
	return o.PaymentInstrumentId, true
}

// HasPaymentInstrumentId returns a boolean if a field has been set.
func (o *TransferData) HasPaymentInstrumentId() bool {
	if o != nil && !common.IsNil(o.PaymentInstrumentId) {
		return true
	}

	return false
}

// SetPaymentInstrumentId gets a reference to the given string and assigns it to the PaymentInstrumentId field.
// Deprecated
func (o *TransferData) SetPaymentInstrumentId(v string) {
	o.PaymentInstrumentId = &v
}

// GetPaymentMerchantReference returns the PaymentMerchantReference field value if set, zero value otherwise.
// Deprecated
func (o *TransferData) GetPaymentMerchantReference() string {
	if o == nil || common.IsNil(o.PaymentMerchantReference) {
		var ret string
		return ret
	}
	return *o.PaymentMerchantReference
}

// GetPaymentMerchantReferenceOk returns a tuple with the PaymentMerchantReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TransferData) GetPaymentMerchantReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.PaymentMerchantReference) {
		return nil, false
	}
	return o.PaymentMerchantReference, true
}

// HasPaymentMerchantReference returns a boolean if a field has been set.
func (o *TransferData) HasPaymentMerchantReference() bool {
	if o != nil && !common.IsNil(o.PaymentMerchantReference) {
		return true
	}

	return false
}

// SetPaymentMerchantReference gets a reference to the given string and assigns it to the PaymentMerchantReference field.
// Deprecated
func (o *TransferData) SetPaymentMerchantReference(v string) {
	o.PaymentMerchantReference = &v
}

// GetPlatformPaymentType returns the PlatformPaymentType field value if set, zero value otherwise.
// Deprecated
func (o *TransferData) GetPlatformPaymentType() string {
	if o == nil || common.IsNil(o.PlatformPaymentType) {
		var ret string
		return ret
	}
	return *o.PlatformPaymentType
}

// GetPlatformPaymentTypeOk returns a tuple with the PlatformPaymentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TransferData) GetPlatformPaymentTypeOk() (*string, bool) {
	if o == nil || common.IsNil(o.PlatformPaymentType) {
		return nil, false
	}
	return o.PlatformPaymentType, true
}

// HasPlatformPaymentType returns a boolean if a field has been set.
func (o *TransferData) HasPlatformPaymentType() bool {
	if o != nil && !common.IsNil(o.PlatformPaymentType) {
		return true
	}

	return false
}

// SetPlatformPaymentType gets a reference to the given string and assigns it to the PlatformPaymentType field.
// Deprecated
func (o *TransferData) SetPlatformPaymentType(v string) {
	o.PlatformPaymentType = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *TransferData) GetPriority() string {
	if o == nil || common.IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetPriorityOk() (*string, bool) {
	if o == nil || common.IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *TransferData) HasPriority() bool {
	if o != nil && !common.IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *TransferData) SetPriority(v string) {
	o.Priority = &v
}

// GetProcessingType returns the ProcessingType field value if set, zero value otherwise.
// Deprecated
func (o *TransferData) GetProcessingType() string {
	if o == nil || common.IsNil(o.ProcessingType) {
		var ret string
		return ret
	}
	return *o.ProcessingType
}

// GetProcessingTypeOk returns a tuple with the ProcessingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TransferData) GetProcessingTypeOk() (*string, bool) {
	if o == nil || common.IsNil(o.ProcessingType) {
		return nil, false
	}
	return o.ProcessingType, true
}

// HasProcessingType returns a boolean if a field has been set.
func (o *TransferData) HasProcessingType() bool {
	if o != nil && !common.IsNil(o.ProcessingType) {
		return true
	}

	return false
}

// SetProcessingType gets a reference to the given string and assigns it to the ProcessingType field.
// Deprecated
func (o *TransferData) SetProcessingType(v string) {
	o.ProcessingType = &v
}

// GetPspPaymentReference returns the PspPaymentReference field value if set, zero value otherwise.
// Deprecated
func (o *TransferData) GetPspPaymentReference() string {
	if o == nil || common.IsNil(o.PspPaymentReference) {
		var ret string
		return ret
	}
	return *o.PspPaymentReference
}

// GetPspPaymentReferenceOk returns a tuple with the PspPaymentReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TransferData) GetPspPaymentReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.PspPaymentReference) {
		return nil, false
	}
	return o.PspPaymentReference, true
}

// HasPspPaymentReference returns a boolean if a field has been set.
func (o *TransferData) HasPspPaymentReference() bool {
	if o != nil && !common.IsNil(o.PspPaymentReference) {
		return true
	}

	return false
}

// SetPspPaymentReference gets a reference to the given string and assigns it to the PspPaymentReference field.
// Deprecated
func (o *TransferData) SetPspPaymentReference(v string) {
	o.PspPaymentReference = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *TransferData) GetReason() string {
	if o == nil || common.IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetReasonOk() (*string, bool) {
	if o == nil || common.IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *TransferData) HasReason() bool {
	if o != nil && !common.IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *TransferData) SetReason(v string) {
	o.Reason = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *TransferData) GetReference() string {
	if o == nil || common.IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *TransferData) HasReference() bool {
	if o != nil && !common.IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *TransferData) SetReference(v string) {
	o.Reference = &v
}

// GetReferenceForBeneficiary returns the ReferenceForBeneficiary field value if set, zero value otherwise.
func (o *TransferData) GetReferenceForBeneficiary() string {
	if o == nil || common.IsNil(o.ReferenceForBeneficiary) {
		var ret string
		return ret
	}
	return *o.ReferenceForBeneficiary
}

// GetReferenceForBeneficiaryOk returns a tuple with the ReferenceForBeneficiary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetReferenceForBeneficiaryOk() (*string, bool) {
	if o == nil || common.IsNil(o.ReferenceForBeneficiary) {
		return nil, false
	}
	return o.ReferenceForBeneficiary, true
}

// HasReferenceForBeneficiary returns a boolean if a field has been set.
func (o *TransferData) HasReferenceForBeneficiary() bool {
	if o != nil && !common.IsNil(o.ReferenceForBeneficiary) {
		return true
	}

	return false
}

// SetReferenceForBeneficiary gets a reference to the given string and assigns it to the ReferenceForBeneficiary field.
func (o *TransferData) SetReferenceForBeneficiary(v string) {
	o.ReferenceForBeneficiary = &v
}

// GetRelayedAuthorisationData returns the RelayedAuthorisationData field value if set, zero value otherwise.
func (o *TransferData) GetRelayedAuthorisationData() RelayedAuthorisationData {
	if o == nil || common.IsNil(o.RelayedAuthorisationData) {
		var ret RelayedAuthorisationData
		return ret
	}
	return *o.RelayedAuthorisationData
}

// GetRelayedAuthorisationDataOk returns a tuple with the RelayedAuthorisationData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetRelayedAuthorisationDataOk() (*RelayedAuthorisationData, bool) {
	if o == nil || common.IsNil(o.RelayedAuthorisationData) {
		return nil, false
	}
	return o.RelayedAuthorisationData, true
}

// HasRelayedAuthorisationData returns a boolean if a field has been set.
func (o *TransferData) HasRelayedAuthorisationData() bool {
	if o != nil && !common.IsNil(o.RelayedAuthorisationData) {
		return true
	}

	return false
}

// SetRelayedAuthorisationData gets a reference to the given RelayedAuthorisationData and assigns it to the RelayedAuthorisationData field.
func (o *TransferData) SetRelayedAuthorisationData(v RelayedAuthorisationData) {
	o.RelayedAuthorisationData = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *TransferData) GetSequenceNumber() int32 {
	if o == nil || common.IsNil(o.SequenceNumber) {
		var ret int32
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetSequenceNumberOk() (*int32, bool) {
	if o == nil || common.IsNil(o.SequenceNumber) {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *TransferData) HasSequenceNumber() bool {
	if o != nil && !common.IsNil(o.SequenceNumber) {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int32 and assigns it to the SequenceNumber field.
func (o *TransferData) SetSequenceNumber(v int32) {
	o.SequenceNumber = &v
}

// GetStatus returns the Status field value
func (o *TransferData) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TransferData) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TransferData) SetStatus(v string) {
	o.Status = v
}

// GetTracking returns the Tracking field value if set, zero value otherwise.
func (o *TransferData) GetTracking() TransferNotificationTransferTracking {
	if o == nil || common.IsNil(o.Tracking) {
		var ret TransferNotificationTransferTracking
		return ret
	}
	return *o.Tracking
}

// GetTrackingOk returns a tuple with the Tracking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetTrackingOk() (*TransferNotificationTransferTracking, bool) {
	if o == nil || common.IsNil(o.Tracking) {
		return nil, false
	}
	return o.Tracking, true
}

// HasTracking returns a boolean if a field has been set.
func (o *TransferData) HasTracking() bool {
	if o != nil && !common.IsNil(o.Tracking) {
		return true
	}

	return false
}

// SetTracking gets a reference to the given TransferNotificationTransferTracking and assigns it to the Tracking field.
func (o *TransferData) SetTracking(v TransferNotificationTransferTracking) {
	o.Tracking = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
// Deprecated
func (o *TransferData) GetTransactionId() string {
	if o == nil || common.IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TransferData) GetTransactionIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *TransferData) HasTransactionId() bool {
	if o != nil && !common.IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
// Deprecated
func (o *TransferData) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetTransactionRulesResult returns the TransactionRulesResult field value if set, zero value otherwise.
func (o *TransferData) GetTransactionRulesResult() TransactionRulesResult {
	if o == nil || common.IsNil(o.TransactionRulesResult) {
		var ret TransactionRulesResult
		return ret
	}
	return *o.TransactionRulesResult
}

// GetTransactionRulesResultOk returns a tuple with the TransactionRulesResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetTransactionRulesResultOk() (*TransactionRulesResult, bool) {
	if o == nil || common.IsNil(o.TransactionRulesResult) {
		return nil, false
	}
	return o.TransactionRulesResult, true
}

// HasTransactionRulesResult returns a boolean if a field has been set.
func (o *TransferData) HasTransactionRulesResult() bool {
	if o != nil && !common.IsNil(o.TransactionRulesResult) {
		return true
	}

	return false
}

// SetTransactionRulesResult gets a reference to the given TransactionRulesResult and assigns it to the TransactionRulesResult field.
func (o *TransferData) SetTransactionRulesResult(v TransactionRulesResult) {
	o.TransactionRulesResult = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TransferData) GetType() string {
	if o == nil || common.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferData) GetTypeOk() (*string, bool) {
	if o == nil || common.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TransferData) HasType() bool {
	if o != nil && !common.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TransferData) SetType(v string) {
	o.Type = &v
}

// GetValidationFacts returns the ValidationFacts field value if set, zero value otherwise.
// Deprecated
func (o *TransferData) GetValidationFacts() []TransferNotificationValidationFact {
	if o == nil || common.IsNil(o.ValidationFacts) {
		var ret []TransferNotificationValidationFact
		return ret
	}
	return o.ValidationFacts
}

// GetValidationFactsOk returns a tuple with the ValidationFacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TransferData) GetValidationFactsOk() ([]TransferNotificationValidationFact, bool) {
	if o == nil || common.IsNil(o.ValidationFacts) {
		return nil, false
	}
	return o.ValidationFacts, true
}

// HasValidationFacts returns a boolean if a field has been set.
func (o *TransferData) HasValidationFacts() bool {
	if o != nil && !common.IsNil(o.ValidationFacts) {
		return true
	}

	return false
}

// SetValidationFacts gets a reference to the given []TransferNotificationValidationFact and assigns it to the ValidationFacts field.
// Deprecated
func (o *TransferData) SetValidationFacts(v []TransferNotificationValidationFact) {
	o.ValidationFacts = v
}

func (o TransferData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.AccountHolder) {
		toSerialize["accountHolder"] = o.AccountHolder
	}
	toSerialize["amount"] = o.Amount
	if !common.IsNil(o.BalanceAccount) {
		toSerialize["balanceAccount"] = o.BalanceAccount
	}
	if !common.IsNil(o.BalanceAccountId) {
		toSerialize["balanceAccountId"] = o.BalanceAccountId
	}
	if !common.IsNil(o.BalancePlatform) {
		toSerialize["balancePlatform"] = o.BalancePlatform
	}
	if !common.IsNil(o.Balances) {
		toSerialize["balances"] = o.Balances
	}
	toSerialize["category"] = o.Category
	if !common.IsNil(o.Counterparty) {
		toSerialize["counterparty"] = o.Counterparty
	}
	if !common.IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !common.IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !common.IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !common.IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !common.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !common.IsNil(o.ModificationMerchantReference) {
		toSerialize["modificationMerchantReference"] = o.ModificationMerchantReference
	}
	if !common.IsNil(o.ModificationPspReference) {
		toSerialize["modificationPspReference"] = o.ModificationPspReference
	}
	if !common.IsNil(o.PanEntryMode) {
		toSerialize["panEntryMode"] = o.PanEntryMode
	}
	if !common.IsNil(o.PaymentInstrument) {
		toSerialize["paymentInstrument"] = o.PaymentInstrument
	}
	if !common.IsNil(o.PaymentInstrumentId) {
		toSerialize["paymentInstrumentId"] = o.PaymentInstrumentId
	}
	if !common.IsNil(o.PaymentMerchantReference) {
		toSerialize["paymentMerchantReference"] = o.PaymentMerchantReference
	}
	if !common.IsNil(o.PlatformPaymentType) {
		toSerialize["platformPaymentType"] = o.PlatformPaymentType
	}
	if !common.IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !common.IsNil(o.ProcessingType) {
		toSerialize["processingType"] = o.ProcessingType
	}
	if !common.IsNil(o.PspPaymentReference) {
		toSerialize["pspPaymentReference"] = o.PspPaymentReference
	}
	if !common.IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !common.IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !common.IsNil(o.ReferenceForBeneficiary) {
		toSerialize["referenceForBeneficiary"] = o.ReferenceForBeneficiary
	}
	if !common.IsNil(o.RelayedAuthorisationData) {
		toSerialize["relayedAuthorisationData"] = o.RelayedAuthorisationData
	}
	if !common.IsNil(o.SequenceNumber) {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	toSerialize["status"] = o.Status
	if !common.IsNil(o.Tracking) {
		toSerialize["tracking"] = o.Tracking
	}
	if !common.IsNil(o.TransactionId) {
		toSerialize["transactionId"] = o.TransactionId
	}
	if !common.IsNil(o.TransactionRulesResult) {
		toSerialize["transactionRulesResult"] = o.TransactionRulesResult
	}
	if !common.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !common.IsNil(o.ValidationFacts) {
		toSerialize["validationFacts"] = o.ValidationFacts
	}
	return toSerialize, nil
}

type NullableTransferData struct {
	value *TransferData
	isSet bool
}

func (v NullableTransferData) Get() *TransferData {
	return v.value
}

func (v *NullableTransferData) Set(val *TransferData) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferData) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferData(val *TransferData) *NullableTransferData {
	return &NullableTransferData{value: val, isSet: true}
}

func (v NullableTransferData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func (o *TransferData) isValidCategory() bool {
	var allowedEnumValues = []string{"bank", "internal", "issuedCard", "platformPayment"}
	for _, allowed := range allowedEnumValues {
		if o.GetCategory() == allowed {
			return true
		}
	}
	return false
}
func (o *TransferData) isValidDirection() bool {
	var allowedEnumValues = []string{"incoming", "outgoing"}
	for _, allowed := range allowedEnumValues {
		if o.GetDirection() == allowed {
			return true
		}
	}
	return false
}
func (o *TransferData) isValidPanEntryMode() bool {
	var allowedEnumValues = []string{"chip", "cof", "contactless", "ecommerce", "magstripe", "manual", "token"}
	for _, allowed := range allowedEnumValues {
		if o.GetPanEntryMode() == allowed {
			return true
		}
	}
	return false
}
func (o *TransferData) isValidPlatformPaymentType() bool {
	var allowedEnumValues = []string{"BalanceAccount", "Commission", "Default", "PaymentFee", "VAT"}
	for _, allowed := range allowedEnumValues {
		if o.GetPlatformPaymentType() == allowed {
			return true
		}
	}
	return false
}
func (o *TransferData) isValidPriority() bool {
	var allowedEnumValues = []string{"crossBorder", "directDebit", "fast", "instant", "internal", "regular", "wire"}
	for _, allowed := range allowedEnumValues {
		if o.GetPriority() == allowed {
			return true
		}
	}
	return false
}
func (o *TransferData) isValidProcessingType() bool {
	var allowedEnumValues = []string{"atmWithdraw", "balanceInquiry", "ecommerce", "moto", "pos", "purchaseWithCashback", "recurring", "token"}
	for _, allowed := range allowedEnumValues {
		if o.GetProcessingType() == allowed {
			return true
		}
	}
	return false
}
func (o *TransferData) isValidReason() bool {
	var allowedEnumValues = []string{"amountLimitExceeded", "approved", "counterpartyAccountBlocked", "counterpartyAccountClosed", "counterpartyAccountNotFound", "counterpartyAddressRequired", "counterpartyBankTimedOut", "counterpartyBankUnavailable", "error", "notEnoughBalance", "refusedByCounterpartyBank", "routeNotFound", "unknown"}
	for _, allowed := range allowedEnumValues {
		if o.GetReason() == allowed {
			return true
		}
	}
	return false
}
func (o *TransferData) isValidStatus() bool {
	var allowedEnumValues = []string{"approvalPending", "atmWithdrawal", "atmWithdrawalReversalPending", "atmWithdrawalReversed", "authAdjustmentAuthorised", "authAdjustmentError", "authAdjustmentRefused", "authorised", "bankTransfer", "bankTransferPending", "booked", "bookingPending", "cancelled", "capturePending", "captureReversalPending", "captureReversed", "captured", "capturedExternally", "chargeback", "chargebackExternally", "chargebackPending", "chargebackReversalPending", "chargebackReversed", "credited", "depositCorrection", "depositCorrectionPending", "dispute", "disputeClosed", "disputeExpired", "disputeNeedsReview", "error", "expired", "failed", "fee", "feePending", "internalTransfer", "internalTransferPending", "invoiceDeduction", "invoiceDeductionPending", "manualCorrectionPending", "manuallyCorrected", "matchedStatement", "matchedStatementPending", "merchantPayin", "merchantPayinPending", "merchantPayinReversed", "merchantPayinReversedPending", "miscCost", "miscCostPending", "operationAuthorized", "operationBooked", "operationPending", "operationReceived", "paymentCost", "paymentCostPending", "received", "refundPending", "refundReversalPending", "refundReversed", "refunded", "refundedExternally", "refused", "reserveAdjustment", "reserveAdjustmentPending", "returned", "secondChargeback", "secondChargebackPending", "undefined"}
	for _, allowed := range allowedEnumValues {
		if o.GetStatus() == allowed {
			return true
		}
	}
	return false
}
func (o *TransferData) isValidType() bool {
	var allowedEnumValues = []string{"atmWithdrawal", "atmWithdrawalReversal", "balanceAdjustment", "balanceRollover", "bankTransfer", "capture", "captureReversal", "cardTransfer", "chargeback", "chargebackReversal", "depositCorrection", "fee", "grant", "installment", "installmentReversal", "internalTransfer", "invoiceDeduction", "leftover", "manualCorrection", "miscCost", "payment", "paymentCost", "refund", "refundReversal", "repayment", "reserveAdjustment", "secondChargeback"}
	for _, allowed := range allowedEnumValues {
		if o.GetType() == allowed {
			return true
		}
	}
	return false
}
