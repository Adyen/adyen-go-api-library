/*
Transfer webhooks

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transferwebhook

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v8/src/common"
)

// checks if the TransferOperation type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &TransferOperation{}

// TransferOperation struct for TransferOperation
type TransferOperation struct {
	// The direction of the money movement.
	Direction *string `json:"direction,omitempty"`
	// The reference returned when the amend was initiated.
	Reference *string `json:"reference,omitempty"`
	// The type of amend for the transfer.
	Type *string `json:"type,omitempty"`
}

// NewTransferOperation instantiates a new TransferOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferOperation() *TransferOperation {
	this := TransferOperation{}
	return &this
}

// NewTransferOperationWithDefaults instantiates a new TransferOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferOperationWithDefaults() *TransferOperation {
	this := TransferOperation{}
	return &this
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *TransferOperation) GetDirection() string {
	if o == nil || common.IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferOperation) GetDirectionOk() (*string, bool) {
	if o == nil || common.IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *TransferOperation) HasDirection() bool {
	if o != nil && !common.IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *TransferOperation) SetDirection(v string) {
	o.Direction = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *TransferOperation) GetReference() string {
	if o == nil || common.IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferOperation) GetReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *TransferOperation) HasReference() bool {
	if o != nil && !common.IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *TransferOperation) SetReference(v string) {
	o.Reference = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TransferOperation) GetType() string {
	if o == nil || common.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferOperation) GetTypeOk() (*string, bool) {
	if o == nil || common.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TransferOperation) HasType() bool {
	if o != nil && !common.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TransferOperation) SetType(v string) {
	o.Type = &v
}

func (o TransferOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !common.IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !common.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableTransferOperation struct {
	value *TransferOperation
	isSet bool
}

func (v NullableTransferOperation) Get() *TransferOperation {
	return v.value
}

func (v *NullableTransferOperation) Set(val *TransferOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferOperation(val *TransferOperation) *NullableTransferOperation {
	return &NullableTransferOperation{value: val, isSet: true}
}

func (v NullableTransferOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
