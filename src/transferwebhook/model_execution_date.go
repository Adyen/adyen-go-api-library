/*
Transfer webhooks

API version: 4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transferwebhook

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v21/src/common"
)

// checks if the ExecutionDate type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &ExecutionDate{}

// ExecutionDate struct for ExecutionDate
type ExecutionDate struct {
	// The date when the transfer will be processed. This date must be: * Within 30 days of the current date. * In the [ISO 8601 format](https://www.iso.org/iso-8601-date-and-time-format.html) **YYYY-MM-DD**. For example: 2025-01-31
	Date *string `json:"date,omitempty"`
	// The timezone that applies to the execution date. Use a timezone identifier from the [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).  Example: **America/Los_Angeles**.  Default value: **Europe/Amsterdam**.
	Timezone *string `json:"timezone,omitempty"`
}

// NewExecutionDate instantiates a new ExecutionDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionDate() *ExecutionDate {
	this := ExecutionDate{}
	return &this
}

// NewExecutionDateWithDefaults instantiates a new ExecutionDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionDateWithDefaults() *ExecutionDate {
	this := ExecutionDate{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ExecutionDate) GetDate() string {
	if o == nil || common.IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionDate) GetDateOk() (*string, bool) {
	if o == nil || common.IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ExecutionDate) HasDate() bool {
	if o != nil && !common.IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *ExecutionDate) SetDate(v string) {
	o.Date = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *ExecutionDate) GetTimezone() string {
	if o == nil || common.IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionDate) GetTimezoneOk() (*string, bool) {
	if o == nil || common.IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *ExecutionDate) HasTimezone() bool {
	if o != nil && !common.IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *ExecutionDate) SetTimezone(v string) {
	o.Timezone = &v
}

func (o ExecutionDate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionDate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !common.IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	return toSerialize, nil
}

type NullableExecutionDate struct {
	value *ExecutionDate
	isSet bool
}

func (v NullableExecutionDate) Get() *ExecutionDate {
	return v.value
}

func (v *NullableExecutionDate) Set(val *ExecutionDate) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionDate) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionDate(val *ExecutionDate) *NullableExecutionDate {
	return &NullableExecutionDate{value: val, isSet: true}
}

func (v NullableExecutionDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
