/*
Adyen Checkout API

API version: 70
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"
	"fmt"
)

// CheckoutPaymentMethod - The type and required details of a payment method to use.
type CheckoutPaymentMethod struct {
	AchDetails                        *AchDetails
	AfterpayDetails                   *AfterpayDetails
	AmazonPayDetails                  *AmazonPayDetails
	AndroidPayDetails                 *AndroidPayDetails
	ApplePayDetails                   *ApplePayDetails
	BacsDirectDebitDetails            *BacsDirectDebitDetails
	BillDeskDetails                   *BillDeskDetails
	BlikDetails                       *BlikDetails
	CardDetails                       *CardDetails
	CellulantDetails                  *CellulantDetails
	DokuDetails                       *DokuDetails
	DotpayDetails                     *DotpayDetails
	DragonpayDetails                  *DragonpayDetails
	EcontextVoucherDetails            *EcontextVoucherDetails
	GenericIssuerPaymentMethodDetails *GenericIssuerPaymentMethodDetails
	GiropayDetails                    *GiropayDetails
	GooglePayDetails                  *GooglePayDetails
	IdealDetails                      *IdealDetails
	KlarnaDetails                     *KlarnaDetails
	MasterpassDetails                 *MasterpassDetails
	MbwayDetails                      *MbwayDetails
	MobilePayDetails                  *MobilePayDetails
	MolPayDetails                     *MolPayDetails
	OpenInvoiceDetails                *OpenInvoiceDetails
	PayPalDetails                     *PayPalDetails
	PayUUpiDetails                    *PayUUpiDetails
	PayWithGoogleDetails              *PayWithGoogleDetails
	PaymentDetails                    *PaymentDetails
	RatepayDetails                    *RatepayDetails
	SamsungPayDetails                 *SamsungPayDetails
	SepaDirectDebitDetails            *SepaDirectDebitDetails
	StoredPaymentMethodDetails        *StoredPaymentMethodDetails
	UpiCollectDetails                 *UpiCollectDetails
	UpiIntentDetails                  *UpiIntentDetails
	VippsDetails                      *VippsDetails
	VisaCheckoutDetails               *VisaCheckoutDetails
	WeChatPayDetails                  *WeChatPayDetails
	WeChatPayMiniProgramDetails       *WeChatPayMiniProgramDetails
	ZipDetails                        *ZipDetails
}

// AchDetailsAsCheckoutPaymentMethod is a convenience function that returns AchDetails wrapped in CheckoutPaymentMethod
func AchDetailsAsCheckoutPaymentMethod(v *AchDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		AchDetails: v,
	}
}

// AfterpayDetailsAsCheckoutPaymentMethod is a convenience function that returns AfterpayDetails wrapped in CheckoutPaymentMethod
func AfterpayDetailsAsCheckoutPaymentMethod(v *AfterpayDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		AfterpayDetails: v,
	}
}

// AmazonPayDetailsAsCheckoutPaymentMethod is a convenience function that returns AmazonPayDetails wrapped in CheckoutPaymentMethod
func AmazonPayDetailsAsCheckoutPaymentMethod(v *AmazonPayDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		AmazonPayDetails: v,
	}
}

// AndroidPayDetailsAsCheckoutPaymentMethod is a convenience function that returns AndroidPayDetails wrapped in CheckoutPaymentMethod
func AndroidPayDetailsAsCheckoutPaymentMethod(v *AndroidPayDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		AndroidPayDetails: v,
	}
}

// ApplePayDetailsAsCheckoutPaymentMethod is a convenience function that returns ApplePayDetails wrapped in CheckoutPaymentMethod
func ApplePayDetailsAsCheckoutPaymentMethod(v *ApplePayDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		ApplePayDetails: v,
	}
}

// BacsDirectDebitDetailsAsCheckoutPaymentMethod is a convenience function that returns BacsDirectDebitDetails wrapped in CheckoutPaymentMethod
func BacsDirectDebitDetailsAsCheckoutPaymentMethod(v *BacsDirectDebitDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		BacsDirectDebitDetails: v,
	}
}

// BillDeskDetailsAsCheckoutPaymentMethod is a convenience function that returns BillDeskDetails wrapped in CheckoutPaymentMethod
func BillDeskDetailsAsCheckoutPaymentMethod(v *BillDeskDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		BillDeskDetails: v,
	}
}

// BlikDetailsAsCheckoutPaymentMethod is a convenience function that returns BlikDetails wrapped in CheckoutPaymentMethod
func BlikDetailsAsCheckoutPaymentMethod(v *BlikDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		BlikDetails: v,
	}
}

// CardDetailsAsCheckoutPaymentMethod is a convenience function that returns CardDetails wrapped in CheckoutPaymentMethod
func CardDetailsAsCheckoutPaymentMethod(v *CardDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		CardDetails: v,
	}
}

// CellulantDetailsAsCheckoutPaymentMethod is a convenience function that returns CellulantDetails wrapped in CheckoutPaymentMethod
func CellulantDetailsAsCheckoutPaymentMethod(v *CellulantDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		CellulantDetails: v,
	}
}

// DokuDetailsAsCheckoutPaymentMethod is a convenience function that returns DokuDetails wrapped in CheckoutPaymentMethod
func DokuDetailsAsCheckoutPaymentMethod(v *DokuDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		DokuDetails: v,
	}
}

// DotpayDetailsAsCheckoutPaymentMethod is a convenience function that returns DotpayDetails wrapped in CheckoutPaymentMethod
func DotpayDetailsAsCheckoutPaymentMethod(v *DotpayDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		DotpayDetails: v,
	}
}

// DragonpayDetailsAsCheckoutPaymentMethod is a convenience function that returns DragonpayDetails wrapped in CheckoutPaymentMethod
func DragonpayDetailsAsCheckoutPaymentMethod(v *DragonpayDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		DragonpayDetails: v,
	}
}

// EcontextVoucherDetailsAsCheckoutPaymentMethod is a convenience function that returns EcontextVoucherDetails wrapped in CheckoutPaymentMethod
func EcontextVoucherDetailsAsCheckoutPaymentMethod(v *EcontextVoucherDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		EcontextVoucherDetails: v,
	}
}

// GenericIssuerPaymentMethodDetailsAsCheckoutPaymentMethod is a convenience function that returns GenericIssuerPaymentMethodDetails wrapped in CheckoutPaymentMethod
func GenericIssuerPaymentMethodDetailsAsCheckoutPaymentMethod(v *GenericIssuerPaymentMethodDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		GenericIssuerPaymentMethodDetails: v,
	}
}

// GiropayDetailsAsCheckoutPaymentMethod is a convenience function that returns GiropayDetails wrapped in CheckoutPaymentMethod
func GiropayDetailsAsCheckoutPaymentMethod(v *GiropayDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		GiropayDetails: v,
	}
}

// GooglePayDetailsAsCheckoutPaymentMethod is a convenience function that returns GooglePayDetails wrapped in CheckoutPaymentMethod
func GooglePayDetailsAsCheckoutPaymentMethod(v *GooglePayDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		GooglePayDetails: v,
	}
}

// IdealDetailsAsCheckoutPaymentMethod is a convenience function that returns IdealDetails wrapped in CheckoutPaymentMethod
func IdealDetailsAsCheckoutPaymentMethod(v *IdealDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		IdealDetails: v,
	}
}

// KlarnaDetailsAsCheckoutPaymentMethod is a convenience function that returns KlarnaDetails wrapped in CheckoutPaymentMethod
func KlarnaDetailsAsCheckoutPaymentMethod(v *KlarnaDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		KlarnaDetails: v,
	}
}

// MasterpassDetailsAsCheckoutPaymentMethod is a convenience function that returns MasterpassDetails wrapped in CheckoutPaymentMethod
func MasterpassDetailsAsCheckoutPaymentMethod(v *MasterpassDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		MasterpassDetails: v,
	}
}

// MbwayDetailsAsCheckoutPaymentMethod is a convenience function that returns MbwayDetails wrapped in CheckoutPaymentMethod
func MbwayDetailsAsCheckoutPaymentMethod(v *MbwayDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		MbwayDetails: v,
	}
}

// MobilePayDetailsAsCheckoutPaymentMethod is a convenience function that returns MobilePayDetails wrapped in CheckoutPaymentMethod
func MobilePayDetailsAsCheckoutPaymentMethod(v *MobilePayDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		MobilePayDetails: v,
	}
}

// MolPayDetailsAsCheckoutPaymentMethod is a convenience function that returns MolPayDetails wrapped in CheckoutPaymentMethod
func MolPayDetailsAsCheckoutPaymentMethod(v *MolPayDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		MolPayDetails: v,
	}
}

// OpenInvoiceDetailsAsCheckoutPaymentMethod is a convenience function that returns OpenInvoiceDetails wrapped in CheckoutPaymentMethod
func OpenInvoiceDetailsAsCheckoutPaymentMethod(v *OpenInvoiceDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		OpenInvoiceDetails: v,
	}
}

// PayPalDetailsAsCheckoutPaymentMethod is a convenience function that returns PayPalDetails wrapped in CheckoutPaymentMethod
func PayPalDetailsAsCheckoutPaymentMethod(v *PayPalDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		PayPalDetails: v,
	}
}

// PayUUpiDetailsAsCheckoutPaymentMethod is a convenience function that returns PayUUpiDetails wrapped in CheckoutPaymentMethod
func PayUUpiDetailsAsCheckoutPaymentMethod(v *PayUUpiDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		PayUUpiDetails: v,
	}
}

// PayWithGoogleDetailsAsCheckoutPaymentMethod is a convenience function that returns PayWithGoogleDetails wrapped in CheckoutPaymentMethod
func PayWithGoogleDetailsAsCheckoutPaymentMethod(v *PayWithGoogleDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		PayWithGoogleDetails: v,
	}
}

// PaymentDetailsAsCheckoutPaymentMethod is a convenience function that returns PaymentDetails wrapped in CheckoutPaymentMethod
func PaymentDetailsAsCheckoutPaymentMethod(v *PaymentDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		PaymentDetails: v,
	}
}

// RatepayDetailsAsCheckoutPaymentMethod is a convenience function that returns RatepayDetails wrapped in CheckoutPaymentMethod
func RatepayDetailsAsCheckoutPaymentMethod(v *RatepayDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		RatepayDetails: v,
	}
}

// SamsungPayDetailsAsCheckoutPaymentMethod is a convenience function that returns SamsungPayDetails wrapped in CheckoutPaymentMethod
func SamsungPayDetailsAsCheckoutPaymentMethod(v *SamsungPayDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		SamsungPayDetails: v,
	}
}

// SepaDirectDebitDetailsAsCheckoutPaymentMethod is a convenience function that returns SepaDirectDebitDetails wrapped in CheckoutPaymentMethod
func SepaDirectDebitDetailsAsCheckoutPaymentMethod(v *SepaDirectDebitDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		SepaDirectDebitDetails: v,
	}
}

// StoredPaymentMethodDetailsAsCheckoutPaymentMethod is a convenience function that returns StoredPaymentMethodDetails wrapped in CheckoutPaymentMethod
func StoredPaymentMethodDetailsAsCheckoutPaymentMethod(v *StoredPaymentMethodDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		StoredPaymentMethodDetails: v,
	}
}

// UpiCollectDetailsAsCheckoutPaymentMethod is a convenience function that returns UpiCollectDetails wrapped in CheckoutPaymentMethod
func UpiCollectDetailsAsCheckoutPaymentMethod(v *UpiCollectDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		UpiCollectDetails: v,
	}
}

// UpiIntentDetailsAsCheckoutPaymentMethod is a convenience function that returns UpiIntentDetails wrapped in CheckoutPaymentMethod
func UpiIntentDetailsAsCheckoutPaymentMethod(v *UpiIntentDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		UpiIntentDetails: v,
	}
}

// VippsDetailsAsCheckoutPaymentMethod is a convenience function that returns VippsDetails wrapped in CheckoutPaymentMethod
func VippsDetailsAsCheckoutPaymentMethod(v *VippsDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		VippsDetails: v,
	}
}

// VisaCheckoutDetailsAsCheckoutPaymentMethod is a convenience function that returns VisaCheckoutDetails wrapped in CheckoutPaymentMethod
func VisaCheckoutDetailsAsCheckoutPaymentMethod(v *VisaCheckoutDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		VisaCheckoutDetails: v,
	}
}

// WeChatPayDetailsAsCheckoutPaymentMethod is a convenience function that returns WeChatPayDetails wrapped in CheckoutPaymentMethod
func WeChatPayDetailsAsCheckoutPaymentMethod(v *WeChatPayDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		WeChatPayDetails: v,
	}
}

// WeChatPayMiniProgramDetailsAsCheckoutPaymentMethod is a convenience function that returns WeChatPayMiniProgramDetails wrapped in CheckoutPaymentMethod
func WeChatPayMiniProgramDetailsAsCheckoutPaymentMethod(v *WeChatPayMiniProgramDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		WeChatPayMiniProgramDetails: v,
	}
}

// ZipDetailsAsCheckoutPaymentMethod is a convenience function that returns ZipDetails wrapped in CheckoutPaymentMethod
func ZipDetailsAsCheckoutPaymentMethod(v *ZipDetails) CheckoutPaymentMethod {
	return CheckoutPaymentMethod{
		ZipDetails: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CheckoutPaymentMethod) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AchDetails
	err = json.Unmarshal(data, &dst.AchDetails)
	if err == nil {
		jsonAchDetails, _ := json.Marshal(dst.AchDetails)
		if string(jsonAchDetails) == "{}" { // empty struct
			dst.AchDetails = nil
		} else if dst.AchDetails.isValidType() {
			match++
		}
	} else {
		dst.AchDetails = nil
	}

	// try to unmarshal data into AfterpayDetails
	err = json.Unmarshal(data, &dst.AfterpayDetails)
	if err == nil {
		jsonAfterpayDetails, _ := json.Marshal(dst.AfterpayDetails)
		if string(jsonAfterpayDetails) == "{}" { // empty struct
			dst.AfterpayDetails = nil
		} else if dst.AfterpayDetails.isValidType() {
			match++
		}
	} else {
		dst.AfterpayDetails = nil
	}

	// try to unmarshal data into AmazonPayDetails
	err = json.Unmarshal(data, &dst.AmazonPayDetails)
	if err == nil {
		jsonAmazonPayDetails, _ := json.Marshal(dst.AmazonPayDetails)
		if string(jsonAmazonPayDetails) == "{}" { // empty struct
			dst.AmazonPayDetails = nil
		} else if dst.AmazonPayDetails.isValidType() {
			match++
		}
	} else {
		dst.AmazonPayDetails = nil
	}

	// try to unmarshal data into AndroidPayDetails
	err = json.Unmarshal(data, &dst.AndroidPayDetails)
	if err == nil {
		jsonAndroidPayDetails, _ := json.Marshal(dst.AndroidPayDetails)
		if string(jsonAndroidPayDetails) == "{}" { // empty struct
			dst.AndroidPayDetails = nil
		} else if dst.AndroidPayDetails.isValidType() {
			match++
		}
	} else {
		dst.AndroidPayDetails = nil
	}

	// try to unmarshal data into ApplePayDetails
	err = json.Unmarshal(data, &dst.ApplePayDetails)
	if err == nil {
		jsonApplePayDetails, _ := json.Marshal(dst.ApplePayDetails)
		if string(jsonApplePayDetails) == "{}" { // empty struct
			dst.ApplePayDetails = nil
		} else if dst.ApplePayDetails.isValidType() {
			match++
		}
	} else {
		dst.ApplePayDetails = nil
	}

	// try to unmarshal data into BacsDirectDebitDetails
	err = json.Unmarshal(data, &dst.BacsDirectDebitDetails)
	if err == nil {
		jsonBacsDirectDebitDetails, _ := json.Marshal(dst.BacsDirectDebitDetails)
		if string(jsonBacsDirectDebitDetails) == "{}" { // empty struct
			dst.BacsDirectDebitDetails = nil
		} else if dst.BacsDirectDebitDetails.isValidType() {
			match++
		}
	} else {
		dst.BacsDirectDebitDetails = nil
	}

	// try to unmarshal data into BillDeskDetails
	err = json.Unmarshal(data, &dst.BillDeskDetails)
	if err == nil {
		jsonBillDeskDetails, _ := json.Marshal(dst.BillDeskDetails)
		if string(jsonBillDeskDetails) == "{}" { // empty struct
			dst.BillDeskDetails = nil
		} else if dst.BillDeskDetails.isValidType() {
			match++
		}
	} else {
		dst.BillDeskDetails = nil
	}

	// try to unmarshal data into BlikDetails
	err = json.Unmarshal(data, &dst.BlikDetails)
	if err == nil {
		jsonBlikDetails, _ := json.Marshal(dst.BlikDetails)
		if string(jsonBlikDetails) == "{}" { // empty struct
			dst.BlikDetails = nil
		} else if dst.BlikDetails.isValidType() {
			match++
		}
	} else {
		dst.BlikDetails = nil
	}

	// try to unmarshal data into CardDetails
	err = json.Unmarshal(data, &dst.CardDetails)
	if err == nil {
		jsonCardDetails, _ := json.Marshal(dst.CardDetails)
		if string(jsonCardDetails) == "{}" { // empty struct
			dst.CardDetails = nil
		} else if dst.CardDetails.isValidType() {
			match++
		}
	} else {
		dst.CardDetails = nil
	}

	// try to unmarshal data into CellulantDetails
	err = json.Unmarshal(data, &dst.CellulantDetails)
	if err == nil {
		jsonCellulantDetails, _ := json.Marshal(dst.CellulantDetails)
		if string(jsonCellulantDetails) == "{}" { // empty struct
			dst.CellulantDetails = nil
		} else if dst.CellulantDetails.isValidType() {
			match++
		}
	} else {
		dst.CellulantDetails = nil
	}

	// try to unmarshal data into DokuDetails
	err = json.Unmarshal(data, &dst.DokuDetails)
	if err == nil {
		jsonDokuDetails, _ := json.Marshal(dst.DokuDetails)
		if string(jsonDokuDetails) == "{}" { // empty struct
			dst.DokuDetails = nil
		} else if dst.DokuDetails.isValidType() {
			match++
		}
	} else {
		dst.DokuDetails = nil
	}

	// try to unmarshal data into DotpayDetails
	err = json.Unmarshal(data, &dst.DotpayDetails)
	if err == nil {
		jsonDotpayDetails, _ := json.Marshal(dst.DotpayDetails)
		if string(jsonDotpayDetails) == "{}" { // empty struct
			dst.DotpayDetails = nil
		} else if dst.DotpayDetails.isValidType() {
			match++
		}
	} else {
		dst.DotpayDetails = nil
	}

	// try to unmarshal data into DragonpayDetails
	err = json.Unmarshal(data, &dst.DragonpayDetails)
	if err == nil {
		jsonDragonpayDetails, _ := json.Marshal(dst.DragonpayDetails)
		if string(jsonDragonpayDetails) == "{}" { // empty struct
			dst.DragonpayDetails = nil
		} else if dst.DragonpayDetails.isValidType() {
			match++
		}
	} else {
		dst.DragonpayDetails = nil
	}

	// try to unmarshal data into EcontextVoucherDetails
	err = json.Unmarshal(data, &dst.EcontextVoucherDetails)
	if err == nil {
		jsonEcontextVoucherDetails, _ := json.Marshal(dst.EcontextVoucherDetails)
		if string(jsonEcontextVoucherDetails) == "{}" { // empty struct
			dst.EcontextVoucherDetails = nil
		} else if dst.EcontextVoucherDetails.isValidType() {
			match++
		}
	} else {
		dst.EcontextVoucherDetails = nil
	}

	// try to unmarshal data into GenericIssuerPaymentMethodDetails
	err = json.Unmarshal(data, &dst.GenericIssuerPaymentMethodDetails)
	if err == nil {
		jsonGenericIssuerPaymentMethodDetails, _ := json.Marshal(dst.GenericIssuerPaymentMethodDetails)
		if string(jsonGenericIssuerPaymentMethodDetails) == "{}" { // empty struct
			dst.GenericIssuerPaymentMethodDetails = nil
		} else if dst.GenericIssuerPaymentMethodDetails.isValidType() {
			match++
		}
	} else {
		dst.GenericIssuerPaymentMethodDetails = nil
	}

	// try to unmarshal data into GiropayDetails
	err = json.Unmarshal(data, &dst.GiropayDetails)
	if err == nil {
		jsonGiropayDetails, _ := json.Marshal(dst.GiropayDetails)
		if string(jsonGiropayDetails) == "{}" { // empty struct
			dst.GiropayDetails = nil
		} else if dst.GiropayDetails.isValidType() {
			match++
		}
	} else {
		dst.GiropayDetails = nil
	}

	// try to unmarshal data into GooglePayDetails
	err = json.Unmarshal(data, &dst.GooglePayDetails)
	if err == nil {
		jsonGooglePayDetails, _ := json.Marshal(dst.GooglePayDetails)
		if string(jsonGooglePayDetails) == "{}" { // empty struct
			dst.GooglePayDetails = nil
		} else if dst.GooglePayDetails.isValidType() {
			match++
		}
	} else {
		dst.GooglePayDetails = nil
	}

	// try to unmarshal data into IdealDetails
	err = json.Unmarshal(data, &dst.IdealDetails)
	if err == nil {
		jsonIdealDetails, _ := json.Marshal(dst.IdealDetails)
		if string(jsonIdealDetails) == "{}" { // empty struct
			dst.IdealDetails = nil
		} else if dst.IdealDetails.isValidType() {
			match++
		}
	} else {
		dst.IdealDetails = nil
	}

	// try to unmarshal data into KlarnaDetails
	err = json.Unmarshal(data, &dst.KlarnaDetails)
	if err == nil {
		jsonKlarnaDetails, _ := json.Marshal(dst.KlarnaDetails)
		if string(jsonKlarnaDetails) == "{}" { // empty struct
			dst.KlarnaDetails = nil
		} else if dst.KlarnaDetails.isValidType() {
			match++
		}
	} else {
		dst.KlarnaDetails = nil
	}

	// try to unmarshal data into MasterpassDetails
	err = json.Unmarshal(data, &dst.MasterpassDetails)
	if err == nil {
		jsonMasterpassDetails, _ := json.Marshal(dst.MasterpassDetails)
		if string(jsonMasterpassDetails) == "{}" { // empty struct
			dst.MasterpassDetails = nil
		} else if dst.MasterpassDetails.isValidType() {
			match++
		}
	} else {
		dst.MasterpassDetails = nil
	}

	// try to unmarshal data into MbwayDetails
	err = json.Unmarshal(data, &dst.MbwayDetails)
	if err == nil {
		jsonMbwayDetails, _ := json.Marshal(dst.MbwayDetails)
		if string(jsonMbwayDetails) == "{}" { // empty struct
			dst.MbwayDetails = nil
		} else if dst.MbwayDetails.isValidType() {
			match++
		}
	} else {
		dst.MbwayDetails = nil
	}

	// try to unmarshal data into MobilePayDetails
	err = json.Unmarshal(data, &dst.MobilePayDetails)
	if err == nil {
		jsonMobilePayDetails, _ := json.Marshal(dst.MobilePayDetails)
		if string(jsonMobilePayDetails) == "{}" { // empty struct
			dst.MobilePayDetails = nil
		} else if dst.MobilePayDetails.isValidType() {
			match++
		}
	} else {
		dst.MobilePayDetails = nil
	}

	// try to unmarshal data into MolPayDetails
	err = json.Unmarshal(data, &dst.MolPayDetails)
	if err == nil {
		jsonMolPayDetails, _ := json.Marshal(dst.MolPayDetails)
		if string(jsonMolPayDetails) == "{}" { // empty struct
			dst.MolPayDetails = nil
		} else if dst.MolPayDetails.isValidType() {
			match++
		}
	} else {
		dst.MolPayDetails = nil
	}

	// try to unmarshal data into OpenInvoiceDetails
	err = json.Unmarshal(data, &dst.OpenInvoiceDetails)
	if err == nil {
		jsonOpenInvoiceDetails, _ := json.Marshal(dst.OpenInvoiceDetails)
		if string(jsonOpenInvoiceDetails) == "{}" { // empty struct
			dst.OpenInvoiceDetails = nil
		} else if dst.OpenInvoiceDetails.isValidType() {
			match++
		}
	} else {
		dst.OpenInvoiceDetails = nil
	}

	// try to unmarshal data into PayPalDetails
	err = json.Unmarshal(data, &dst.PayPalDetails)
	if err == nil {
		jsonPayPalDetails, _ := json.Marshal(dst.PayPalDetails)
		if string(jsonPayPalDetails) == "{}" { // empty struct
			dst.PayPalDetails = nil
		} else if dst.PayPalDetails.isValidType() {
			match++
		}
	} else {
		dst.PayPalDetails = nil
	}

	// try to unmarshal data into PayUUpiDetails
	err = json.Unmarshal(data, &dst.PayUUpiDetails)
	if err == nil {
		jsonPayUUpiDetails, _ := json.Marshal(dst.PayUUpiDetails)
		if string(jsonPayUUpiDetails) == "{}" { // empty struct
			dst.PayUUpiDetails = nil
		} else if dst.PayUUpiDetails.isValidType() {
			match++
		}
	} else {
		dst.PayUUpiDetails = nil
	}

	// try to unmarshal data into PayWithGoogleDetails
	err = json.Unmarshal(data, &dst.PayWithGoogleDetails)
	if err == nil {
		jsonPayWithGoogleDetails, _ := json.Marshal(dst.PayWithGoogleDetails)
		if string(jsonPayWithGoogleDetails) == "{}" { // empty struct
			dst.PayWithGoogleDetails = nil
		} else if dst.PayWithGoogleDetails.isValidType() {
			match++
		}
	} else {
		dst.PayWithGoogleDetails = nil
	}

	// try to unmarshal data into PaymentDetails
	err = json.Unmarshal(data, &dst.PaymentDetails)
	if err == nil {
		jsonPaymentDetails, _ := json.Marshal(dst.PaymentDetails)
		if string(jsonPaymentDetails) == "{}" { // empty struct
			dst.PaymentDetails = nil
		} else if dst.PaymentDetails.isValidType() {
			match++
		}
	} else {
		dst.PaymentDetails = nil
	}

	// try to unmarshal data into RatepayDetails
	err = json.Unmarshal(data, &dst.RatepayDetails)
	if err == nil {
		jsonRatepayDetails, _ := json.Marshal(dst.RatepayDetails)
		if string(jsonRatepayDetails) == "{}" { // empty struct
			dst.RatepayDetails = nil
		} else if dst.RatepayDetails.isValidType() {
			match++
		}
	} else {
		dst.RatepayDetails = nil
	}

	// try to unmarshal data into SamsungPayDetails
	err = json.Unmarshal(data, &dst.SamsungPayDetails)
	if err == nil {
		jsonSamsungPayDetails, _ := json.Marshal(dst.SamsungPayDetails)
		if string(jsonSamsungPayDetails) == "{}" { // empty struct
			dst.SamsungPayDetails = nil
		} else if dst.SamsungPayDetails.isValidType() {
			match++
		}
	} else {
		dst.SamsungPayDetails = nil
	}

	// try to unmarshal data into SepaDirectDebitDetails
	err = json.Unmarshal(data, &dst.SepaDirectDebitDetails)
	if err == nil {
		jsonSepaDirectDebitDetails, _ := json.Marshal(dst.SepaDirectDebitDetails)
		if string(jsonSepaDirectDebitDetails) == "{}" { // empty struct
			dst.SepaDirectDebitDetails = nil
		} else if dst.SepaDirectDebitDetails.isValidType() {
			match++
		}
	} else {
		dst.SepaDirectDebitDetails = nil
	}

	// try to unmarshal data into StoredPaymentMethodDetails
	err = json.Unmarshal(data, &dst.StoredPaymentMethodDetails)
	if err == nil {
		jsonStoredPaymentMethodDetails, _ := json.Marshal(dst.StoredPaymentMethodDetails)
		if string(jsonStoredPaymentMethodDetails) == "{}" { // empty struct
			dst.StoredPaymentMethodDetails = nil
		} else if dst.StoredPaymentMethodDetails.isValidType() {
			match++
		}
	} else {
		dst.StoredPaymentMethodDetails = nil
	}

	// try to unmarshal data into UpiCollectDetails
	err = json.Unmarshal(data, &dst.UpiCollectDetails)
	if err == nil {
		jsonUpiCollectDetails, _ := json.Marshal(dst.UpiCollectDetails)
		if string(jsonUpiCollectDetails) == "{}" { // empty struct
			dst.UpiCollectDetails = nil
		} else if dst.UpiCollectDetails.isValidType() {
			match++
		}
	} else {
		dst.UpiCollectDetails = nil
	}

	// try to unmarshal data into UpiIntentDetails
	err = json.Unmarshal(data, &dst.UpiIntentDetails)
	if err == nil {
		jsonUpiIntentDetails, _ := json.Marshal(dst.UpiIntentDetails)
		if string(jsonUpiIntentDetails) == "{}" { // empty struct
			dst.UpiIntentDetails = nil
		} else if dst.UpiIntentDetails.isValidType() {
			match++
		}
	} else {
		dst.UpiIntentDetails = nil
	}

	// try to unmarshal data into VippsDetails
	err = json.Unmarshal(data, &dst.VippsDetails)
	if err == nil {
		jsonVippsDetails, _ := json.Marshal(dst.VippsDetails)
		if string(jsonVippsDetails) == "{}" { // empty struct
			dst.VippsDetails = nil
		} else if dst.VippsDetails.isValidType() {
			match++
		}
	} else {
		dst.VippsDetails = nil
	}

	// try to unmarshal data into VisaCheckoutDetails
	err = json.Unmarshal(data, &dst.VisaCheckoutDetails)
	if err == nil {
		jsonVisaCheckoutDetails, _ := json.Marshal(dst.VisaCheckoutDetails)
		if string(jsonVisaCheckoutDetails) == "{}" { // empty struct
			dst.VisaCheckoutDetails = nil
		} else if dst.VisaCheckoutDetails.isValidType() {
			match++
		}
	} else {
		dst.VisaCheckoutDetails = nil
	}

	// try to unmarshal data into WeChatPayDetails
	err = json.Unmarshal(data, &dst.WeChatPayDetails)
	if err == nil {
		jsonWeChatPayDetails, _ := json.Marshal(dst.WeChatPayDetails)
		if string(jsonWeChatPayDetails) == "{}" { // empty struct
			dst.WeChatPayDetails = nil
		} else if dst.WeChatPayDetails.isValidType() {
			match++
		}
	} else {
		dst.WeChatPayDetails = nil
	}

	// try to unmarshal data into WeChatPayMiniProgramDetails
	err = json.Unmarshal(data, &dst.WeChatPayMiniProgramDetails)
	if err == nil {
		jsonWeChatPayMiniProgramDetails, _ := json.Marshal(dst.WeChatPayMiniProgramDetails)
		if string(jsonWeChatPayMiniProgramDetails) == "{}" { // empty struct
			dst.WeChatPayMiniProgramDetails = nil
		} else if dst.WeChatPayMiniProgramDetails.isValidType() {
			match++
		}
	} else {
		dst.WeChatPayMiniProgramDetails = nil
	}

	// try to unmarshal data into ZipDetails
	err = json.Unmarshal(data, &dst.ZipDetails)
	if err == nil {
		jsonZipDetails, _ := json.Marshal(dst.ZipDetails)
		if string(jsonZipDetails) == "{}" { // empty struct
			dst.ZipDetails = nil
		} else if dst.ZipDetails.isValidType() {
			match++
		}
	} else {
		dst.ZipDetails = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AchDetails = nil
		dst.AfterpayDetails = nil
		dst.AmazonPayDetails = nil
		dst.AndroidPayDetails = nil
		dst.ApplePayDetails = nil
		dst.BacsDirectDebitDetails = nil
		dst.BillDeskDetails = nil
		dst.BlikDetails = nil
		dst.CardDetails = nil
		dst.CellulantDetails = nil
		dst.DokuDetails = nil
		dst.DotpayDetails = nil
		dst.DragonpayDetails = nil
		dst.EcontextVoucherDetails = nil
		dst.GenericIssuerPaymentMethodDetails = nil
		dst.GiropayDetails = nil
		dst.GooglePayDetails = nil
		dst.IdealDetails = nil
		dst.KlarnaDetails = nil
		dst.MasterpassDetails = nil
		dst.MbwayDetails = nil
		dst.MobilePayDetails = nil
		dst.MolPayDetails = nil
		dst.OpenInvoiceDetails = nil
		dst.PayPalDetails = nil
		dst.PayUUpiDetails = nil
		dst.PayWithGoogleDetails = nil
		dst.PaymentDetails = nil
		dst.RatepayDetails = nil
		dst.SamsungPayDetails = nil
		dst.SepaDirectDebitDetails = nil
		dst.StoredPaymentMethodDetails = nil
		dst.UpiCollectDetails = nil
		dst.UpiIntentDetails = nil
		dst.VippsDetails = nil
		dst.VisaCheckoutDetails = nil
		dst.WeChatPayDetails = nil
		dst.WeChatPayMiniProgramDetails = nil
		dst.ZipDetails = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CheckoutPaymentMethod)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CheckoutPaymentMethod)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CheckoutPaymentMethod) MarshalJSON() ([]byte, error) {
	if src.AchDetails != nil {
		return json.Marshal(&src.AchDetails)
	}

	if src.AfterpayDetails != nil {
		return json.Marshal(&src.AfterpayDetails)
	}

	if src.AmazonPayDetails != nil {
		return json.Marshal(&src.AmazonPayDetails)
	}

	if src.AndroidPayDetails != nil {
		return json.Marshal(&src.AndroidPayDetails)
	}

	if src.ApplePayDetails != nil {
		return json.Marshal(&src.ApplePayDetails)
	}

	if src.BacsDirectDebitDetails != nil {
		return json.Marshal(&src.BacsDirectDebitDetails)
	}

	if src.BillDeskDetails != nil {
		return json.Marshal(&src.BillDeskDetails)
	}

	if src.BlikDetails != nil {
		return json.Marshal(&src.BlikDetails)
	}

	if src.CardDetails != nil {
		return json.Marshal(&src.CardDetails)
	}

	if src.CellulantDetails != nil {
		return json.Marshal(&src.CellulantDetails)
	}

	if src.DokuDetails != nil {
		return json.Marshal(&src.DokuDetails)
	}

	if src.DotpayDetails != nil {
		return json.Marshal(&src.DotpayDetails)
	}

	if src.DragonpayDetails != nil {
		return json.Marshal(&src.DragonpayDetails)
	}

	if src.EcontextVoucherDetails != nil {
		return json.Marshal(&src.EcontextVoucherDetails)
	}

	if src.GenericIssuerPaymentMethodDetails != nil {
		return json.Marshal(&src.GenericIssuerPaymentMethodDetails)
	}

	if src.GiropayDetails != nil {
		return json.Marshal(&src.GiropayDetails)
	}

	if src.GooglePayDetails != nil {
		return json.Marshal(&src.GooglePayDetails)
	}

	if src.IdealDetails != nil {
		return json.Marshal(&src.IdealDetails)
	}

	if src.KlarnaDetails != nil {
		return json.Marshal(&src.KlarnaDetails)
	}

	if src.MasterpassDetails != nil {
		return json.Marshal(&src.MasterpassDetails)
	}

	if src.MbwayDetails != nil {
		return json.Marshal(&src.MbwayDetails)
	}

	if src.MobilePayDetails != nil {
		return json.Marshal(&src.MobilePayDetails)
	}

	if src.MolPayDetails != nil {
		return json.Marshal(&src.MolPayDetails)
	}

	if src.OpenInvoiceDetails != nil {
		return json.Marshal(&src.OpenInvoiceDetails)
	}

	if src.PayPalDetails != nil {
		return json.Marshal(&src.PayPalDetails)
	}

	if src.PayUUpiDetails != nil {
		return json.Marshal(&src.PayUUpiDetails)
	}

	if src.PayWithGoogleDetails != nil {
		return json.Marshal(&src.PayWithGoogleDetails)
	}

	if src.PaymentDetails != nil {
		return json.Marshal(&src.PaymentDetails)
	}

	if src.RatepayDetails != nil {
		return json.Marshal(&src.RatepayDetails)
	}

	if src.SamsungPayDetails != nil {
		return json.Marshal(&src.SamsungPayDetails)
	}

	if src.SepaDirectDebitDetails != nil {
		return json.Marshal(&src.SepaDirectDebitDetails)
	}

	if src.StoredPaymentMethodDetails != nil {
		return json.Marshal(&src.StoredPaymentMethodDetails)
	}

	if src.UpiCollectDetails != nil {
		return json.Marshal(&src.UpiCollectDetails)
	}

	if src.UpiIntentDetails != nil {
		return json.Marshal(&src.UpiIntentDetails)
	}

	if src.VippsDetails != nil {
		return json.Marshal(&src.VippsDetails)
	}

	if src.VisaCheckoutDetails != nil {
		return json.Marshal(&src.VisaCheckoutDetails)
	}

	if src.WeChatPayDetails != nil {
		return json.Marshal(&src.WeChatPayDetails)
	}

	if src.WeChatPayMiniProgramDetails != nil {
		return json.Marshal(&src.WeChatPayMiniProgramDetails)
	}

	if src.ZipDetails != nil {
		return json.Marshal(&src.ZipDetails)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CheckoutPaymentMethod) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AchDetails != nil {
		return obj.AchDetails
	}

	if obj.AfterpayDetails != nil {
		return obj.AfterpayDetails
	}

	if obj.AmazonPayDetails != nil {
		return obj.AmazonPayDetails
	}

	if obj.AndroidPayDetails != nil {
		return obj.AndroidPayDetails
	}

	if obj.ApplePayDetails != nil {
		return obj.ApplePayDetails
	}

	if obj.BacsDirectDebitDetails != nil {
		return obj.BacsDirectDebitDetails
	}

	if obj.BillDeskDetails != nil {
		return obj.BillDeskDetails
	}

	if obj.BlikDetails != nil {
		return obj.BlikDetails
	}

	if obj.CardDetails != nil {
		return obj.CardDetails
	}

	if obj.CellulantDetails != nil {
		return obj.CellulantDetails
	}

	if obj.DokuDetails != nil {
		return obj.DokuDetails
	}

	if obj.DotpayDetails != nil {
		return obj.DotpayDetails
	}

	if obj.DragonpayDetails != nil {
		return obj.DragonpayDetails
	}

	if obj.EcontextVoucherDetails != nil {
		return obj.EcontextVoucherDetails
	}

	if obj.GenericIssuerPaymentMethodDetails != nil {
		return obj.GenericIssuerPaymentMethodDetails
	}

	if obj.GiropayDetails != nil {
		return obj.GiropayDetails
	}

	if obj.GooglePayDetails != nil {
		return obj.GooglePayDetails
	}

	if obj.IdealDetails != nil {
		return obj.IdealDetails
	}

	if obj.KlarnaDetails != nil {
		return obj.KlarnaDetails
	}

	if obj.MasterpassDetails != nil {
		return obj.MasterpassDetails
	}

	if obj.MbwayDetails != nil {
		return obj.MbwayDetails
	}

	if obj.MobilePayDetails != nil {
		return obj.MobilePayDetails
	}

	if obj.MolPayDetails != nil {
		return obj.MolPayDetails
	}

	if obj.OpenInvoiceDetails != nil {
		return obj.OpenInvoiceDetails
	}

	if obj.PayPalDetails != nil {
		return obj.PayPalDetails
	}

	if obj.PayUUpiDetails != nil {
		return obj.PayUUpiDetails
	}

	if obj.PayWithGoogleDetails != nil {
		return obj.PayWithGoogleDetails
	}

	if obj.PaymentDetails != nil {
		return obj.PaymentDetails
	}

	if obj.RatepayDetails != nil {
		return obj.RatepayDetails
	}

	if obj.SamsungPayDetails != nil {
		return obj.SamsungPayDetails
	}

	if obj.SepaDirectDebitDetails != nil {
		return obj.SepaDirectDebitDetails
	}

	if obj.StoredPaymentMethodDetails != nil {
		return obj.StoredPaymentMethodDetails
	}

	if obj.UpiCollectDetails != nil {
		return obj.UpiCollectDetails
	}

	if obj.UpiIntentDetails != nil {
		return obj.UpiIntentDetails
	}

	if obj.VippsDetails != nil {
		return obj.VippsDetails
	}

	if obj.VisaCheckoutDetails != nil {
		return obj.VisaCheckoutDetails
	}

	if obj.WeChatPayDetails != nil {
		return obj.WeChatPayDetails
	}

	if obj.WeChatPayMiniProgramDetails != nil {
		return obj.WeChatPayMiniProgramDetails
	}

	if obj.ZipDetails != nil {
		return obj.ZipDetails
	}

	// all schemas are nil
	return nil
}

type NullableCheckoutPaymentMethod struct {
	value *CheckoutPaymentMethod
	isSet bool
}

func (v NullableCheckoutPaymentMethod) Get() *CheckoutPaymentMethod {
	return v.value
}

func (v *NullableCheckoutPaymentMethod) Set(val *CheckoutPaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckoutPaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckoutPaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckoutPaymentMethod(val *CheckoutPaymentMethod) *NullableCheckoutPaymentMethod {
	return &NullableCheckoutPaymentMethod{value: val, isSet: true}
}

func (v NullableCheckoutPaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckoutPaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
