/*
Adyen Checkout API

API version: 70
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"context"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// PaymentLinksApi PaymentLinksApi service
type PaymentLinksApi common.Service

type PaymentLinksApiGetPaymentLinkConfig struct {
	ctx    context.Context
	linkId string
}

/*
GetPaymentLink Get a payment link

Retrieves the payment link details using the payment link `id`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param linkId Unique identifier of the payment link.
 @return PaymentLinksApiGetPaymentLinkConfig
*/
func (a *PaymentLinksApi) GetPaymentLinkConfig(ctx context.Context, linkId string) PaymentLinksApiGetPaymentLinkConfig {
	return PaymentLinksApiGetPaymentLinkConfig{
		ctx:    ctx,
		linkId: linkId,
	}
}

/*
Get a payment link
Retrieves the payment link details using the payment link &#x60;id&#x60;.
 * @param linkId Unique identifier of the payment link.
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentLinkResponse
*/

func (a *PaymentLinksApi) GetPaymentLink(r PaymentLinksApiGetPaymentLinkConfig) (PaymentLinkResponse, *_nethttp.Response, error) {
	res := &PaymentLinkResponse{}
	path := "/paymentLinks/{linkId}"
	path = strings.Replace(path, "{"+"linkId"+"}", url.PathEscape(common.ParameterValueToString(r.linkId, "linkId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		nil,
		res,
		_nethttp.MethodGet,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}

type PaymentLinksApiPaymentLinksConfig struct {
	ctx                      context.Context
	idempotencyKey           *string
	createPaymentLinkRequest *CreatePaymentLinkRequest
}

// A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
func (r PaymentLinksApiPaymentLinksConfig) IdempotencyKey(idempotencyKey string) PaymentLinksApiPaymentLinksConfig {
	r.idempotencyKey = &idempotencyKey
	return r
}

func (r PaymentLinksApiPaymentLinksConfig) CreatePaymentLinkRequest(createPaymentLinkRequest CreatePaymentLinkRequest) PaymentLinksApiPaymentLinksConfig {
	r.createPaymentLinkRequest = &createPaymentLinkRequest
	return r
}

/*
PaymentLinks Create a payment link

Creates a payment link to our hosted payment form where shoppers can pay. The list of payment methods presented to the shopper depends on the `currency` and `country` parameters sent in the request.

For more information, refer to [Pay by Link documentation](https://docs.adyen.com/online-payments/pay-by-link#create-payment-links-through-api).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PaymentLinksApiPaymentLinksConfig
*/
func (a *PaymentLinksApi) PaymentLinksConfig(ctx context.Context) PaymentLinksApiPaymentLinksConfig {
	return PaymentLinksApiPaymentLinksConfig{
		ctx: ctx,
	}
}

/*
Create a payment link
Creates a payment link to our hosted payment form where shoppers can pay. The list of payment methods presented to the shopper depends on the &#x60;currency&#x60; and &#x60;country&#x60; parameters sent in the request.  For more information, refer to [Pay by Link documentation](https://docs.adyen.com/online-payments/pay-by-link#create-payment-links-through-api).
 * @param req CreatePaymentLinkRequest - reference of CreatePaymentLinkRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentLinkResponse
*/

func (a *PaymentLinksApi) PaymentLinks(r PaymentLinksApiPaymentLinksConfig) (PaymentLinkResponse, *_nethttp.Response, error) {
	res := &PaymentLinkResponse{}
	path := "/paymentLinks"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.idempotencyKey != nil {
		common.ParameterAddToHeaderOrQuery(headerParams, "Idempotency-Key", r.idempotencyKey, "")
	}
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.createPaymentLinkRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}

type PaymentLinksApiUpdatePaymentLinkConfig struct {
	ctx                      context.Context
	linkId                   string
	updatePaymentLinkRequest *UpdatePaymentLinkRequest
}

func (r PaymentLinksApiUpdatePaymentLinkConfig) UpdatePaymentLinkRequest(updatePaymentLinkRequest UpdatePaymentLinkRequest) PaymentLinksApiUpdatePaymentLinkConfig {
	r.updatePaymentLinkRequest = &updatePaymentLinkRequest
	return r
}

/*
UpdatePaymentLink Update the status of a payment link

Updates the status of a payment link. Use this endpoint to [force the expiry of a payment link](https://docs.adyen.com/online-payments/pay-by-link#update-payment-link-status).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param linkId Unique identifier of the payment link.
 @return PaymentLinksApiUpdatePaymentLinkConfig
*/
func (a *PaymentLinksApi) UpdatePaymentLinkConfig(ctx context.Context, linkId string) PaymentLinksApiUpdatePaymentLinkConfig {
	return PaymentLinksApiUpdatePaymentLinkConfig{
		ctx:    ctx,
		linkId: linkId,
	}
}

/*
Update the status of a payment link
Updates the status of a payment link. Use this endpoint to [force the expiry of a payment link](https://docs.adyen.com/online-payments/pay-by-link#update-payment-link-status).
 * @param linkId Unique identifier of the payment link.
 * @param req UpdatePaymentLinkRequest - reference of UpdatePaymentLinkRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentLinkResponse
*/

func (a *PaymentLinksApi) UpdatePaymentLink(r PaymentLinksApiUpdatePaymentLinkConfig) (PaymentLinkResponse, *_nethttp.Response, error) {
	res := &PaymentLinkResponse{}
	path := "/paymentLinks/{linkId}"
	path = strings.Replace(path, "{"+"linkId"+"}", url.PathEscape(common.ParameterValueToString(r.linkId, "linkId")), -1)
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.updatePaymentLinkRequest,
		res,
		_nethttp.MethodPatch,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}
