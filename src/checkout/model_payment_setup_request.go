/*
Adyen Checkout API

API version: 71
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"
	"time"

	"github.com/adyen/adyen-go-api-library/v8/src/common"
)

// checks if the PaymentSetupRequest type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &PaymentSetupRequest{}

// PaymentSetupRequest struct for PaymentSetupRequest
type PaymentSetupRequest struct {
	AdditionalAmount *Amount `json:"additionalAmount,omitempty"`
	// This field contains additional data, which may be required for a particular payment request.  The `additionalData` object consists of entries, each of which includes the key and value.
	AdditionalData *map[string]string `json:"additionalData,omitempty"`
	// List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`
	AllowedPaymentMethods []string         `json:"allowedPaymentMethods,omitempty"`
	Amount                Amount           `json:"amount"`
	ApplicationInfo       *ApplicationInfo `json:"applicationInfo,omitempty"`
	BillingAddress        *Address         `json:"billingAddress,omitempty"`
	// List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`
	BlockedPaymentMethods []string `json:"blockedPaymentMethods,omitempty"`
	// The delay between the authorisation and scheduled auto-capture, specified in hours.
	CaptureDelayHours *int32 `json:"captureDelayHours,omitempty"`
	// The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.  Possible values: * iOS * Android * Web
	Channel *string `json:"channel,omitempty"`
	// Checkout attempt ID that corresponds to the Id generated by the client SDK for tracking user payment journey.
	CheckoutAttemptId *string        `json:"checkoutAttemptId,omitempty"`
	Company           *Company       `json:"company,omitempty"`
	Configuration     *Configuration `json:"configuration,omitempty"`
	// Conversion ID that corresponds to the Id generated by the client SDK for tracking user payment journey.
	// Deprecated
	ConversionId *string `json:"conversionId,omitempty"`
	// The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE
	CountryCode string `json:"countryCode"`
	// The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
	DateOfBirth     *string     `json:"dateOfBirth,omitempty"`
	DccQuote        *ForexQuote `json:"dccQuote,omitempty"`
	DeliveryAddress *Address    `json:"deliveryAddress,omitempty"`
	// The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00
	DeliveryDate *time.Time `json:"deliveryDate,omitempty"`
	// When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.
	EnableOneClick *bool `json:"enableOneClick,omitempty"`
	// When true and `shopperReference` is provided, the payment details will be tokenized for payouts.
	EnablePayOut *bool `json:"enablePayOut,omitempty"`
	// When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.
	EnableRecurring *bool `json:"enableRecurring,omitempty"`
	// The type of the entity the payment is processed for.
	EntityType *string `json:"entityType,omitempty"`
	// An integer value that is added to the normal fraud score. The value can be either positive or negative.
	FraudOffset  *int32        `json:"fraudOffset,omitempty"`
	Installments *Installments `json:"installments,omitempty"`
	// Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment). > This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.
	LineItems []LineItem `json:"lineItems,omitempty"`
	// The `localizedShopperStatement` field lets you use dynamic values for your shopper statement in a local character set. If not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.  Adyen currently supports the ja-Kana character set for Visa and Mastercard payments in Japan using Japanese cards. This character set supports:  * UTF-8 based Katakana, capital letters, numbers and special characters.  * Half-width or full-width characters.
	LocalizedShopperStatement *map[string]string `json:"localizedShopperStatement,omitempty"`
	Mandate                   *Mandate           `json:"mandate,omitempty"`
	// The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
	Mcc *string `json:"mcc,omitempty"`
	// The merchant account identifier, with which you want to process the transaction.
	MerchantAccount string `json:"merchantAccount"`
	// This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.
	MerchantOrderReference *string `json:"merchantOrderReference,omitempty"`
	// Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \"177\" error occurs: \"Metadata size exceeds limit\". * Maximum 20 characters per key. * Maximum 80 characters per value.
	Metadata *map[string]string `json:"metadata,omitempty"`
	// When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.
	OrderReference *string `json:"orderReference,omitempty"`
	// Required for the Web integration.  Set this parameter to the origin URL of the page that you are loading the SDK from.
	Origin                  *string                  `json:"origin,omitempty"`
	PlatformChargebackLogic *PlatformChargebackLogic `json:"platformChargebackLogic,omitempty"`
	// Date after which no further authorisations shall be performed. Only for 3D Secure 2.
	RecurringExpiry *string `json:"recurringExpiry,omitempty"`
	// Minimum number of days between authorisations. Only for 3D Secure 2.
	RecurringFrequency *string `json:"recurringFrequency,omitempty"`
	// The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.
	Reference string `json:"reference"`
	// The URL to return to in case of a redirection. The format depends on the channel. This URL can have a maximum of 1024 characters. * For web, include the protocol `http://` or `https://`. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: `https://your-company.com/checkout?shopperOrder=12xy` * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: `my-app://` * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: `my-app://your.package.name`
	ReturnUrl string    `json:"returnUrl"`
	RiskData  *RiskData `json:"riskData,omitempty"`
	// The version of the SDK you are using (for Web SDK integrations only).
	SdkVersion *string `json:"sdkVersion,omitempty"`
	// The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.  For example: 2020-07-18T15:42:40.428+01:00
	SessionValidity *string `json:"sessionValidity,omitempty"`
	// The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.
	ShopperEmail *string `json:"shopperEmail,omitempty"`
	// The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).
	ShopperIP *string `json:"shopperIP,omitempty"`
	// Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
	ShopperInteraction *string `json:"shopperInteraction,omitempty"`
	// The combination of a language code and a country code to specify the language to be used in the payment.
	ShopperLocale *string `json:"shopperLocale,omitempty"`
	ShopperName   *Name   `json:"shopperName,omitempty"`
	// Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.
	ShopperReference *string `json:"shopperReference,omitempty"`
	// The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /_**.
	ShopperStatement *string `json:"shopperStatement,omitempty"`
	// The shopper's social security number.
	SocialSecurityNumber *string `json:"socialSecurityNumber,omitempty"`
	// An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).
	Splits []Split `json:"splits,omitempty"`
	// The ecommerce or point-of-sale store that is processing the payment. Used in:  * [Partner platform integrations](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments) for the [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic). * [Platform setup integrations](https://docs.adyen.com/marketplaces-and-platforms/additional-for-platform-setup/route-payment-to-store) for the [Balance Platform](https://docs.adyen.com/marketplaces-and-platforms).
	Store *string `json:"store,omitempty"`
	// When true and `shopperReference` is provided, the payment details will be stored.
	StorePaymentMethod *bool `json:"storePaymentMethod,omitempty"`
	// The shopper's telephone number.
	TelephoneNumber *string `json:"telephoneNumber,omitempty"`
	// If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
	// Deprecated
	ThreeDSAuthenticationOnly *bool `json:"threeDSAuthenticationOnly,omitempty"`
	// The token obtained when initializing the SDK.  > This parameter is required for iOS and Android; not required for Web.
	Token *string `json:"token,omitempty"`
	// Set to true if the payment should be routed to a trusted MID.
	TrustedShopper *bool `json:"trustedShopper,omitempty"`
}

// NewPaymentSetupRequest instantiates a new PaymentSetupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentSetupRequest(amount Amount, countryCode string, merchantAccount string, reference string, returnUrl string) *PaymentSetupRequest {
	this := PaymentSetupRequest{}
	this.Amount = amount
	this.CountryCode = countryCode
	this.MerchantAccount = merchantAccount
	this.Reference = reference
	this.ReturnUrl = returnUrl
	var threeDSAuthenticationOnly bool = false
	this.ThreeDSAuthenticationOnly = &threeDSAuthenticationOnly
	return &this
}

// NewPaymentSetupRequestWithDefaults instantiates a new PaymentSetupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentSetupRequestWithDefaults() *PaymentSetupRequest {
	this := PaymentSetupRequest{}
	var threeDSAuthenticationOnly bool = false
	this.ThreeDSAuthenticationOnly = &threeDSAuthenticationOnly
	return &this
}

// GetAdditionalAmount returns the AdditionalAmount field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetAdditionalAmount() Amount {
	if o == nil || common.IsNil(o.AdditionalAmount) {
		var ret Amount
		return ret
	}
	return *o.AdditionalAmount
}

// GetAdditionalAmountOk returns a tuple with the AdditionalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetAdditionalAmountOk() (*Amount, bool) {
	if o == nil || common.IsNil(o.AdditionalAmount) {
		return nil, false
	}
	return o.AdditionalAmount, true
}

// HasAdditionalAmount returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasAdditionalAmount() bool {
	if o != nil && !common.IsNil(o.AdditionalAmount) {
		return true
	}

	return false
}

// SetAdditionalAmount gets a reference to the given Amount and assigns it to the AdditionalAmount field.
func (o *PaymentSetupRequest) SetAdditionalAmount(v Amount) {
	o.AdditionalAmount = &v
}

// GetAdditionalData returns the AdditionalData field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetAdditionalData() map[string]string {
	if o == nil || common.IsNil(o.AdditionalData) {
		var ret map[string]string
		return ret
	}
	return *o.AdditionalData
}

// GetAdditionalDataOk returns a tuple with the AdditionalData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetAdditionalDataOk() (*map[string]string, bool) {
	if o == nil || common.IsNil(o.AdditionalData) {
		return nil, false
	}
	return o.AdditionalData, true
}

// HasAdditionalData returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasAdditionalData() bool {
	if o != nil && !common.IsNil(o.AdditionalData) {
		return true
	}

	return false
}

// SetAdditionalData gets a reference to the given map[string]string and assigns it to the AdditionalData field.
func (o *PaymentSetupRequest) SetAdditionalData(v map[string]string) {
	o.AdditionalData = &v
}

// GetAllowedPaymentMethods returns the AllowedPaymentMethods field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetAllowedPaymentMethods() []string {
	if o == nil || common.IsNil(o.AllowedPaymentMethods) {
		var ret []string
		return ret
	}
	return o.AllowedPaymentMethods
}

// GetAllowedPaymentMethodsOk returns a tuple with the AllowedPaymentMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetAllowedPaymentMethodsOk() ([]string, bool) {
	if o == nil || common.IsNil(o.AllowedPaymentMethods) {
		return nil, false
	}
	return o.AllowedPaymentMethods, true
}

// HasAllowedPaymentMethods returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasAllowedPaymentMethods() bool {
	if o != nil && !common.IsNil(o.AllowedPaymentMethods) {
		return true
	}

	return false
}

// SetAllowedPaymentMethods gets a reference to the given []string and assigns it to the AllowedPaymentMethods field.
func (o *PaymentSetupRequest) SetAllowedPaymentMethods(v []string) {
	o.AllowedPaymentMethods = v
}

// GetAmount returns the Amount field value
func (o *PaymentSetupRequest) GetAmount() Amount {
	if o == nil {
		var ret Amount
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetAmountOk() (*Amount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PaymentSetupRequest) SetAmount(v Amount) {
	o.Amount = v
}

// GetApplicationInfo returns the ApplicationInfo field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetApplicationInfo() ApplicationInfo {
	if o == nil || common.IsNil(o.ApplicationInfo) {
		var ret ApplicationInfo
		return ret
	}
	return *o.ApplicationInfo
}

// GetApplicationInfoOk returns a tuple with the ApplicationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetApplicationInfoOk() (*ApplicationInfo, bool) {
	if o == nil || common.IsNil(o.ApplicationInfo) {
		return nil, false
	}
	return o.ApplicationInfo, true
}

// HasApplicationInfo returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasApplicationInfo() bool {
	if o != nil && !common.IsNil(o.ApplicationInfo) {
		return true
	}

	return false
}

// SetApplicationInfo gets a reference to the given ApplicationInfo and assigns it to the ApplicationInfo field.
func (o *PaymentSetupRequest) SetApplicationInfo(v ApplicationInfo) {
	o.ApplicationInfo = &v
}

// GetBillingAddress returns the BillingAddress field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetBillingAddress() Address {
	if o == nil || common.IsNil(o.BillingAddress) {
		var ret Address
		return ret
	}
	return *o.BillingAddress
}

// GetBillingAddressOk returns a tuple with the BillingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetBillingAddressOk() (*Address, bool) {
	if o == nil || common.IsNil(o.BillingAddress) {
		return nil, false
	}
	return o.BillingAddress, true
}

// HasBillingAddress returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasBillingAddress() bool {
	if o != nil && !common.IsNil(o.BillingAddress) {
		return true
	}

	return false
}

// SetBillingAddress gets a reference to the given Address and assigns it to the BillingAddress field.
func (o *PaymentSetupRequest) SetBillingAddress(v Address) {
	o.BillingAddress = &v
}

// GetBlockedPaymentMethods returns the BlockedPaymentMethods field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetBlockedPaymentMethods() []string {
	if o == nil || common.IsNil(o.BlockedPaymentMethods) {
		var ret []string
		return ret
	}
	return o.BlockedPaymentMethods
}

// GetBlockedPaymentMethodsOk returns a tuple with the BlockedPaymentMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetBlockedPaymentMethodsOk() ([]string, bool) {
	if o == nil || common.IsNil(o.BlockedPaymentMethods) {
		return nil, false
	}
	return o.BlockedPaymentMethods, true
}

// HasBlockedPaymentMethods returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasBlockedPaymentMethods() bool {
	if o != nil && !common.IsNil(o.BlockedPaymentMethods) {
		return true
	}

	return false
}

// SetBlockedPaymentMethods gets a reference to the given []string and assigns it to the BlockedPaymentMethods field.
func (o *PaymentSetupRequest) SetBlockedPaymentMethods(v []string) {
	o.BlockedPaymentMethods = v
}

// GetCaptureDelayHours returns the CaptureDelayHours field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetCaptureDelayHours() int32 {
	if o == nil || common.IsNil(o.CaptureDelayHours) {
		var ret int32
		return ret
	}
	return *o.CaptureDelayHours
}

// GetCaptureDelayHoursOk returns a tuple with the CaptureDelayHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetCaptureDelayHoursOk() (*int32, bool) {
	if o == nil || common.IsNil(o.CaptureDelayHours) {
		return nil, false
	}
	return o.CaptureDelayHours, true
}

// HasCaptureDelayHours returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasCaptureDelayHours() bool {
	if o != nil && !common.IsNil(o.CaptureDelayHours) {
		return true
	}

	return false
}

// SetCaptureDelayHours gets a reference to the given int32 and assigns it to the CaptureDelayHours field.
func (o *PaymentSetupRequest) SetCaptureDelayHours(v int32) {
	o.CaptureDelayHours = &v
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetChannel() string {
	if o == nil || common.IsNil(o.Channel) {
		var ret string
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetChannelOk() (*string, bool) {
	if o == nil || common.IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasChannel() bool {
	if o != nil && !common.IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given string and assigns it to the Channel field.
func (o *PaymentSetupRequest) SetChannel(v string) {
	o.Channel = &v
}

// GetCheckoutAttemptId returns the CheckoutAttemptId field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetCheckoutAttemptId() string {
	if o == nil || common.IsNil(o.CheckoutAttemptId) {
		var ret string
		return ret
	}
	return *o.CheckoutAttemptId
}

// GetCheckoutAttemptIdOk returns a tuple with the CheckoutAttemptId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetCheckoutAttemptIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.CheckoutAttemptId) {
		return nil, false
	}
	return o.CheckoutAttemptId, true
}

// HasCheckoutAttemptId returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasCheckoutAttemptId() bool {
	if o != nil && !common.IsNil(o.CheckoutAttemptId) {
		return true
	}

	return false
}

// SetCheckoutAttemptId gets a reference to the given string and assigns it to the CheckoutAttemptId field.
func (o *PaymentSetupRequest) SetCheckoutAttemptId(v string) {
	o.CheckoutAttemptId = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetCompany() Company {
	if o == nil || common.IsNil(o.Company) {
		var ret Company
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetCompanyOk() (*Company, bool) {
	if o == nil || common.IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasCompany() bool {
	if o != nil && !common.IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given Company and assigns it to the Company field.
func (o *PaymentSetupRequest) SetCompany(v Company) {
	o.Company = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetConfiguration() Configuration {
	if o == nil || common.IsNil(o.Configuration) {
		var ret Configuration
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetConfigurationOk() (*Configuration, bool) {
	if o == nil || common.IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasConfiguration() bool {
	if o != nil && !common.IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given Configuration and assigns it to the Configuration field.
func (o *PaymentSetupRequest) SetConfiguration(v Configuration) {
	o.Configuration = &v
}

// GetConversionId returns the ConversionId field value if set, zero value otherwise.
// Deprecated
func (o *PaymentSetupRequest) GetConversionId() string {
	if o == nil || common.IsNil(o.ConversionId) {
		var ret string
		return ret
	}
	return *o.ConversionId
}

// GetConversionIdOk returns a tuple with the ConversionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PaymentSetupRequest) GetConversionIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.ConversionId) {
		return nil, false
	}
	return o.ConversionId, true
}

// HasConversionId returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasConversionId() bool {
	if o != nil && !common.IsNil(o.ConversionId) {
		return true
	}

	return false
}

// SetConversionId gets a reference to the given string and assigns it to the ConversionId field.
// Deprecated
func (o *PaymentSetupRequest) SetConversionId(v string) {
	o.ConversionId = &v
}

// GetCountryCode returns the CountryCode field value
func (o *PaymentSetupRequest) GetCountryCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryCode, true
}

// SetCountryCode sets field value
func (o *PaymentSetupRequest) SetCountryCode(v string) {
	o.CountryCode = v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetDateOfBirth() string {
	if o == nil || common.IsNil(o.DateOfBirth) {
		var ret string
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetDateOfBirthOk() (*string, bool) {
	if o == nil || common.IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasDateOfBirth() bool {
	if o != nil && !common.IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given string and assigns it to the DateOfBirth field.
func (o *PaymentSetupRequest) SetDateOfBirth(v string) {
	o.DateOfBirth = &v
}

// GetDccQuote returns the DccQuote field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetDccQuote() ForexQuote {
	if o == nil || common.IsNil(o.DccQuote) {
		var ret ForexQuote
		return ret
	}
	return *o.DccQuote
}

// GetDccQuoteOk returns a tuple with the DccQuote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetDccQuoteOk() (*ForexQuote, bool) {
	if o == nil || common.IsNil(o.DccQuote) {
		return nil, false
	}
	return o.DccQuote, true
}

// HasDccQuote returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasDccQuote() bool {
	if o != nil && !common.IsNil(o.DccQuote) {
		return true
	}

	return false
}

// SetDccQuote gets a reference to the given ForexQuote and assigns it to the DccQuote field.
func (o *PaymentSetupRequest) SetDccQuote(v ForexQuote) {
	o.DccQuote = &v
}

// GetDeliveryAddress returns the DeliveryAddress field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetDeliveryAddress() Address {
	if o == nil || common.IsNil(o.DeliveryAddress) {
		var ret Address
		return ret
	}
	return *o.DeliveryAddress
}

// GetDeliveryAddressOk returns a tuple with the DeliveryAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetDeliveryAddressOk() (*Address, bool) {
	if o == nil || common.IsNil(o.DeliveryAddress) {
		return nil, false
	}
	return o.DeliveryAddress, true
}

// HasDeliveryAddress returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasDeliveryAddress() bool {
	if o != nil && !common.IsNil(o.DeliveryAddress) {
		return true
	}

	return false
}

// SetDeliveryAddress gets a reference to the given Address and assigns it to the DeliveryAddress field.
func (o *PaymentSetupRequest) SetDeliveryAddress(v Address) {
	o.DeliveryAddress = &v
}

// GetDeliveryDate returns the DeliveryDate field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetDeliveryDate() time.Time {
	if o == nil || common.IsNil(o.DeliveryDate) {
		var ret time.Time
		return ret
	}
	return *o.DeliveryDate
}

// GetDeliveryDateOk returns a tuple with the DeliveryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetDeliveryDateOk() (*time.Time, bool) {
	if o == nil || common.IsNil(o.DeliveryDate) {
		return nil, false
	}
	return o.DeliveryDate, true
}

// HasDeliveryDate returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasDeliveryDate() bool {
	if o != nil && !common.IsNil(o.DeliveryDate) {
		return true
	}

	return false
}

// SetDeliveryDate gets a reference to the given time.Time and assigns it to the DeliveryDate field.
func (o *PaymentSetupRequest) SetDeliveryDate(v time.Time) {
	o.DeliveryDate = &v
}

// GetEnableOneClick returns the EnableOneClick field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetEnableOneClick() bool {
	if o == nil || common.IsNil(o.EnableOneClick) {
		var ret bool
		return ret
	}
	return *o.EnableOneClick
}

// GetEnableOneClickOk returns a tuple with the EnableOneClick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetEnableOneClickOk() (*bool, bool) {
	if o == nil || common.IsNil(o.EnableOneClick) {
		return nil, false
	}
	return o.EnableOneClick, true
}

// HasEnableOneClick returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasEnableOneClick() bool {
	if o != nil && !common.IsNil(o.EnableOneClick) {
		return true
	}

	return false
}

// SetEnableOneClick gets a reference to the given bool and assigns it to the EnableOneClick field.
func (o *PaymentSetupRequest) SetEnableOneClick(v bool) {
	o.EnableOneClick = &v
}

// GetEnablePayOut returns the EnablePayOut field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetEnablePayOut() bool {
	if o == nil || common.IsNil(o.EnablePayOut) {
		var ret bool
		return ret
	}
	return *o.EnablePayOut
}

// GetEnablePayOutOk returns a tuple with the EnablePayOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetEnablePayOutOk() (*bool, bool) {
	if o == nil || common.IsNil(o.EnablePayOut) {
		return nil, false
	}
	return o.EnablePayOut, true
}

// HasEnablePayOut returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasEnablePayOut() bool {
	if o != nil && !common.IsNil(o.EnablePayOut) {
		return true
	}

	return false
}

// SetEnablePayOut gets a reference to the given bool and assigns it to the EnablePayOut field.
func (o *PaymentSetupRequest) SetEnablePayOut(v bool) {
	o.EnablePayOut = &v
}

// GetEnableRecurring returns the EnableRecurring field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetEnableRecurring() bool {
	if o == nil || common.IsNil(o.EnableRecurring) {
		var ret bool
		return ret
	}
	return *o.EnableRecurring
}

// GetEnableRecurringOk returns a tuple with the EnableRecurring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetEnableRecurringOk() (*bool, bool) {
	if o == nil || common.IsNil(o.EnableRecurring) {
		return nil, false
	}
	return o.EnableRecurring, true
}

// HasEnableRecurring returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasEnableRecurring() bool {
	if o != nil && !common.IsNil(o.EnableRecurring) {
		return true
	}

	return false
}

// SetEnableRecurring gets a reference to the given bool and assigns it to the EnableRecurring field.
func (o *PaymentSetupRequest) SetEnableRecurring(v bool) {
	o.EnableRecurring = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetEntityType() string {
	if o == nil || common.IsNil(o.EntityType) {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetEntityTypeOk() (*string, bool) {
	if o == nil || common.IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasEntityType() bool {
	if o != nil && !common.IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *PaymentSetupRequest) SetEntityType(v string) {
	o.EntityType = &v
}

// GetFraudOffset returns the FraudOffset field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetFraudOffset() int32 {
	if o == nil || common.IsNil(o.FraudOffset) {
		var ret int32
		return ret
	}
	return *o.FraudOffset
}

// GetFraudOffsetOk returns a tuple with the FraudOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetFraudOffsetOk() (*int32, bool) {
	if o == nil || common.IsNil(o.FraudOffset) {
		return nil, false
	}
	return o.FraudOffset, true
}

// HasFraudOffset returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasFraudOffset() bool {
	if o != nil && !common.IsNil(o.FraudOffset) {
		return true
	}

	return false
}

// SetFraudOffset gets a reference to the given int32 and assigns it to the FraudOffset field.
func (o *PaymentSetupRequest) SetFraudOffset(v int32) {
	o.FraudOffset = &v
}

// GetInstallments returns the Installments field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetInstallments() Installments {
	if o == nil || common.IsNil(o.Installments) {
		var ret Installments
		return ret
	}
	return *o.Installments
}

// GetInstallmentsOk returns a tuple with the Installments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetInstallmentsOk() (*Installments, bool) {
	if o == nil || common.IsNil(o.Installments) {
		return nil, false
	}
	return o.Installments, true
}

// HasInstallments returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasInstallments() bool {
	if o != nil && !common.IsNil(o.Installments) {
		return true
	}

	return false
}

// SetInstallments gets a reference to the given Installments and assigns it to the Installments field.
func (o *PaymentSetupRequest) SetInstallments(v Installments) {
	o.Installments = &v
}

// GetLineItems returns the LineItems field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetLineItems() []LineItem {
	if o == nil || common.IsNil(o.LineItems) {
		var ret []LineItem
		return ret
	}
	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetLineItemsOk() ([]LineItem, bool) {
	if o == nil || common.IsNil(o.LineItems) {
		return nil, false
	}
	return o.LineItems, true
}

// HasLineItems returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasLineItems() bool {
	if o != nil && !common.IsNil(o.LineItems) {
		return true
	}

	return false
}

// SetLineItems gets a reference to the given []LineItem and assigns it to the LineItems field.
func (o *PaymentSetupRequest) SetLineItems(v []LineItem) {
	o.LineItems = v
}

// GetLocalizedShopperStatement returns the LocalizedShopperStatement field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetLocalizedShopperStatement() map[string]string {
	if o == nil || common.IsNil(o.LocalizedShopperStatement) {
		var ret map[string]string
		return ret
	}
	return *o.LocalizedShopperStatement
}

// GetLocalizedShopperStatementOk returns a tuple with the LocalizedShopperStatement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetLocalizedShopperStatementOk() (*map[string]string, bool) {
	if o == nil || common.IsNil(o.LocalizedShopperStatement) {
		return nil, false
	}
	return o.LocalizedShopperStatement, true
}

// HasLocalizedShopperStatement returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasLocalizedShopperStatement() bool {
	if o != nil && !common.IsNil(o.LocalizedShopperStatement) {
		return true
	}

	return false
}

// SetLocalizedShopperStatement gets a reference to the given map[string]string and assigns it to the LocalizedShopperStatement field.
func (o *PaymentSetupRequest) SetLocalizedShopperStatement(v map[string]string) {
	o.LocalizedShopperStatement = &v
}

// GetMandate returns the Mandate field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetMandate() Mandate {
	if o == nil || common.IsNil(o.Mandate) {
		var ret Mandate
		return ret
	}
	return *o.Mandate
}

// GetMandateOk returns a tuple with the Mandate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetMandateOk() (*Mandate, bool) {
	if o == nil || common.IsNil(o.Mandate) {
		return nil, false
	}
	return o.Mandate, true
}

// HasMandate returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasMandate() bool {
	if o != nil && !common.IsNil(o.Mandate) {
		return true
	}

	return false
}

// SetMandate gets a reference to the given Mandate and assigns it to the Mandate field.
func (o *PaymentSetupRequest) SetMandate(v Mandate) {
	o.Mandate = &v
}

// GetMcc returns the Mcc field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetMcc() string {
	if o == nil || common.IsNil(o.Mcc) {
		var ret string
		return ret
	}
	return *o.Mcc
}

// GetMccOk returns a tuple with the Mcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetMccOk() (*string, bool) {
	if o == nil || common.IsNil(o.Mcc) {
		return nil, false
	}
	return o.Mcc, true
}

// HasMcc returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasMcc() bool {
	if o != nil && !common.IsNil(o.Mcc) {
		return true
	}

	return false
}

// SetMcc gets a reference to the given string and assigns it to the Mcc field.
func (o *PaymentSetupRequest) SetMcc(v string) {
	o.Mcc = &v
}

// GetMerchantAccount returns the MerchantAccount field value
func (o *PaymentSetupRequest) GetMerchantAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantAccount
}

// GetMerchantAccountOk returns a tuple with the MerchantAccount field value
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetMerchantAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantAccount, true
}

// SetMerchantAccount sets field value
func (o *PaymentSetupRequest) SetMerchantAccount(v string) {
	o.MerchantAccount = v
}

// GetMerchantOrderReference returns the MerchantOrderReference field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetMerchantOrderReference() string {
	if o == nil || common.IsNil(o.MerchantOrderReference) {
		var ret string
		return ret
	}
	return *o.MerchantOrderReference
}

// GetMerchantOrderReferenceOk returns a tuple with the MerchantOrderReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetMerchantOrderReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.MerchantOrderReference) {
		return nil, false
	}
	return o.MerchantOrderReference, true
}

// HasMerchantOrderReference returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasMerchantOrderReference() bool {
	if o != nil && !common.IsNil(o.MerchantOrderReference) {
		return true
	}

	return false
}

// SetMerchantOrderReference gets a reference to the given string and assigns it to the MerchantOrderReference field.
func (o *PaymentSetupRequest) SetMerchantOrderReference(v string) {
	o.MerchantOrderReference = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetMetadata() map[string]string {
	if o == nil || common.IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || common.IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasMetadata() bool {
	if o != nil && !common.IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *PaymentSetupRequest) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetOrderReference returns the OrderReference field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetOrderReference() string {
	if o == nil || common.IsNil(o.OrderReference) {
		var ret string
		return ret
	}
	return *o.OrderReference
}

// GetOrderReferenceOk returns a tuple with the OrderReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetOrderReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.OrderReference) {
		return nil, false
	}
	return o.OrderReference, true
}

// HasOrderReference returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasOrderReference() bool {
	if o != nil && !common.IsNil(o.OrderReference) {
		return true
	}

	return false
}

// SetOrderReference gets a reference to the given string and assigns it to the OrderReference field.
func (o *PaymentSetupRequest) SetOrderReference(v string) {
	o.OrderReference = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetOrigin() string {
	if o == nil || common.IsNil(o.Origin) {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetOriginOk() (*string, bool) {
	if o == nil || common.IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasOrigin() bool {
	if o != nil && !common.IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *PaymentSetupRequest) SetOrigin(v string) {
	o.Origin = &v
}

// GetPlatformChargebackLogic returns the PlatformChargebackLogic field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetPlatformChargebackLogic() PlatformChargebackLogic {
	if o == nil || common.IsNil(o.PlatformChargebackLogic) {
		var ret PlatformChargebackLogic
		return ret
	}
	return *o.PlatformChargebackLogic
}

// GetPlatformChargebackLogicOk returns a tuple with the PlatformChargebackLogic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetPlatformChargebackLogicOk() (*PlatformChargebackLogic, bool) {
	if o == nil || common.IsNil(o.PlatformChargebackLogic) {
		return nil, false
	}
	return o.PlatformChargebackLogic, true
}

// HasPlatformChargebackLogic returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasPlatformChargebackLogic() bool {
	if o != nil && !common.IsNil(o.PlatformChargebackLogic) {
		return true
	}

	return false
}

// SetPlatformChargebackLogic gets a reference to the given PlatformChargebackLogic and assigns it to the PlatformChargebackLogic field.
func (o *PaymentSetupRequest) SetPlatformChargebackLogic(v PlatformChargebackLogic) {
	o.PlatformChargebackLogic = &v
}

// GetRecurringExpiry returns the RecurringExpiry field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetRecurringExpiry() string {
	if o == nil || common.IsNil(o.RecurringExpiry) {
		var ret string
		return ret
	}
	return *o.RecurringExpiry
}

// GetRecurringExpiryOk returns a tuple with the RecurringExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetRecurringExpiryOk() (*string, bool) {
	if o == nil || common.IsNil(o.RecurringExpiry) {
		return nil, false
	}
	return o.RecurringExpiry, true
}

// HasRecurringExpiry returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasRecurringExpiry() bool {
	if o != nil && !common.IsNil(o.RecurringExpiry) {
		return true
	}

	return false
}

// SetRecurringExpiry gets a reference to the given string and assigns it to the RecurringExpiry field.
func (o *PaymentSetupRequest) SetRecurringExpiry(v string) {
	o.RecurringExpiry = &v
}

// GetRecurringFrequency returns the RecurringFrequency field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetRecurringFrequency() string {
	if o == nil || common.IsNil(o.RecurringFrequency) {
		var ret string
		return ret
	}
	return *o.RecurringFrequency
}

// GetRecurringFrequencyOk returns a tuple with the RecurringFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetRecurringFrequencyOk() (*string, bool) {
	if o == nil || common.IsNil(o.RecurringFrequency) {
		return nil, false
	}
	return o.RecurringFrequency, true
}

// HasRecurringFrequency returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasRecurringFrequency() bool {
	if o != nil && !common.IsNil(o.RecurringFrequency) {
		return true
	}

	return false
}

// SetRecurringFrequency gets a reference to the given string and assigns it to the RecurringFrequency field.
func (o *PaymentSetupRequest) SetRecurringFrequency(v string) {
	o.RecurringFrequency = &v
}

// GetReference returns the Reference field value
func (o *PaymentSetupRequest) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *PaymentSetupRequest) SetReference(v string) {
	o.Reference = v
}

// GetReturnUrl returns the ReturnUrl field value
func (o *PaymentSetupRequest) GetReturnUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReturnUrl
}

// GetReturnUrlOk returns a tuple with the ReturnUrl field value
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetReturnUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReturnUrl, true
}

// SetReturnUrl sets field value
func (o *PaymentSetupRequest) SetReturnUrl(v string) {
	o.ReturnUrl = v
}

// GetRiskData returns the RiskData field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetRiskData() RiskData {
	if o == nil || common.IsNil(o.RiskData) {
		var ret RiskData
		return ret
	}
	return *o.RiskData
}

// GetRiskDataOk returns a tuple with the RiskData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetRiskDataOk() (*RiskData, bool) {
	if o == nil || common.IsNil(o.RiskData) {
		return nil, false
	}
	return o.RiskData, true
}

// HasRiskData returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasRiskData() bool {
	if o != nil && !common.IsNil(o.RiskData) {
		return true
	}

	return false
}

// SetRiskData gets a reference to the given RiskData and assigns it to the RiskData field.
func (o *PaymentSetupRequest) SetRiskData(v RiskData) {
	o.RiskData = &v
}

// GetSdkVersion returns the SdkVersion field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetSdkVersion() string {
	if o == nil || common.IsNil(o.SdkVersion) {
		var ret string
		return ret
	}
	return *o.SdkVersion
}

// GetSdkVersionOk returns a tuple with the SdkVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetSdkVersionOk() (*string, bool) {
	if o == nil || common.IsNil(o.SdkVersion) {
		return nil, false
	}
	return o.SdkVersion, true
}

// HasSdkVersion returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasSdkVersion() bool {
	if o != nil && !common.IsNil(o.SdkVersion) {
		return true
	}

	return false
}

// SetSdkVersion gets a reference to the given string and assigns it to the SdkVersion field.
func (o *PaymentSetupRequest) SetSdkVersion(v string) {
	o.SdkVersion = &v
}

// GetSessionValidity returns the SessionValidity field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetSessionValidity() string {
	if o == nil || common.IsNil(o.SessionValidity) {
		var ret string
		return ret
	}
	return *o.SessionValidity
}

// GetSessionValidityOk returns a tuple with the SessionValidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetSessionValidityOk() (*string, bool) {
	if o == nil || common.IsNil(o.SessionValidity) {
		return nil, false
	}
	return o.SessionValidity, true
}

// HasSessionValidity returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasSessionValidity() bool {
	if o != nil && !common.IsNil(o.SessionValidity) {
		return true
	}

	return false
}

// SetSessionValidity gets a reference to the given string and assigns it to the SessionValidity field.
func (o *PaymentSetupRequest) SetSessionValidity(v string) {
	o.SessionValidity = &v
}

// GetShopperEmail returns the ShopperEmail field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetShopperEmail() string {
	if o == nil || common.IsNil(o.ShopperEmail) {
		var ret string
		return ret
	}
	return *o.ShopperEmail
}

// GetShopperEmailOk returns a tuple with the ShopperEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetShopperEmailOk() (*string, bool) {
	if o == nil || common.IsNil(o.ShopperEmail) {
		return nil, false
	}
	return o.ShopperEmail, true
}

// HasShopperEmail returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasShopperEmail() bool {
	if o != nil && !common.IsNil(o.ShopperEmail) {
		return true
	}

	return false
}

// SetShopperEmail gets a reference to the given string and assigns it to the ShopperEmail field.
func (o *PaymentSetupRequest) SetShopperEmail(v string) {
	o.ShopperEmail = &v
}

// GetShopperIP returns the ShopperIP field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetShopperIP() string {
	if o == nil || common.IsNil(o.ShopperIP) {
		var ret string
		return ret
	}
	return *o.ShopperIP
}

// GetShopperIPOk returns a tuple with the ShopperIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetShopperIPOk() (*string, bool) {
	if o == nil || common.IsNil(o.ShopperIP) {
		return nil, false
	}
	return o.ShopperIP, true
}

// HasShopperIP returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasShopperIP() bool {
	if o != nil && !common.IsNil(o.ShopperIP) {
		return true
	}

	return false
}

// SetShopperIP gets a reference to the given string and assigns it to the ShopperIP field.
func (o *PaymentSetupRequest) SetShopperIP(v string) {
	o.ShopperIP = &v
}

// GetShopperInteraction returns the ShopperInteraction field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetShopperInteraction() string {
	if o == nil || common.IsNil(o.ShopperInteraction) {
		var ret string
		return ret
	}
	return *o.ShopperInteraction
}

// GetShopperInteractionOk returns a tuple with the ShopperInteraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetShopperInteractionOk() (*string, bool) {
	if o == nil || common.IsNil(o.ShopperInteraction) {
		return nil, false
	}
	return o.ShopperInteraction, true
}

// HasShopperInteraction returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasShopperInteraction() bool {
	if o != nil && !common.IsNil(o.ShopperInteraction) {
		return true
	}

	return false
}

// SetShopperInteraction gets a reference to the given string and assigns it to the ShopperInteraction field.
func (o *PaymentSetupRequest) SetShopperInteraction(v string) {
	o.ShopperInteraction = &v
}

// GetShopperLocale returns the ShopperLocale field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetShopperLocale() string {
	if o == nil || common.IsNil(o.ShopperLocale) {
		var ret string
		return ret
	}
	return *o.ShopperLocale
}

// GetShopperLocaleOk returns a tuple with the ShopperLocale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetShopperLocaleOk() (*string, bool) {
	if o == nil || common.IsNil(o.ShopperLocale) {
		return nil, false
	}
	return o.ShopperLocale, true
}

// HasShopperLocale returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasShopperLocale() bool {
	if o != nil && !common.IsNil(o.ShopperLocale) {
		return true
	}

	return false
}

// SetShopperLocale gets a reference to the given string and assigns it to the ShopperLocale field.
func (o *PaymentSetupRequest) SetShopperLocale(v string) {
	o.ShopperLocale = &v
}

// GetShopperName returns the ShopperName field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetShopperName() Name {
	if o == nil || common.IsNil(o.ShopperName) {
		var ret Name
		return ret
	}
	return *o.ShopperName
}

// GetShopperNameOk returns a tuple with the ShopperName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetShopperNameOk() (*Name, bool) {
	if o == nil || common.IsNil(o.ShopperName) {
		return nil, false
	}
	return o.ShopperName, true
}

// HasShopperName returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasShopperName() bool {
	if o != nil && !common.IsNil(o.ShopperName) {
		return true
	}

	return false
}

// SetShopperName gets a reference to the given Name and assigns it to the ShopperName field.
func (o *PaymentSetupRequest) SetShopperName(v Name) {
	o.ShopperName = &v
}

// GetShopperReference returns the ShopperReference field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetShopperReference() string {
	if o == nil || common.IsNil(o.ShopperReference) {
		var ret string
		return ret
	}
	return *o.ShopperReference
}

// GetShopperReferenceOk returns a tuple with the ShopperReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetShopperReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.ShopperReference) {
		return nil, false
	}
	return o.ShopperReference, true
}

// HasShopperReference returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasShopperReference() bool {
	if o != nil && !common.IsNil(o.ShopperReference) {
		return true
	}

	return false
}

// SetShopperReference gets a reference to the given string and assigns it to the ShopperReference field.
func (o *PaymentSetupRequest) SetShopperReference(v string) {
	o.ShopperReference = &v
}

// GetShopperStatement returns the ShopperStatement field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetShopperStatement() string {
	if o == nil || common.IsNil(o.ShopperStatement) {
		var ret string
		return ret
	}
	return *o.ShopperStatement
}

// GetShopperStatementOk returns a tuple with the ShopperStatement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetShopperStatementOk() (*string, bool) {
	if o == nil || common.IsNil(o.ShopperStatement) {
		return nil, false
	}
	return o.ShopperStatement, true
}

// HasShopperStatement returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasShopperStatement() bool {
	if o != nil && !common.IsNil(o.ShopperStatement) {
		return true
	}

	return false
}

// SetShopperStatement gets a reference to the given string and assigns it to the ShopperStatement field.
func (o *PaymentSetupRequest) SetShopperStatement(v string) {
	o.ShopperStatement = &v
}

// GetSocialSecurityNumber returns the SocialSecurityNumber field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetSocialSecurityNumber() string {
	if o == nil || common.IsNil(o.SocialSecurityNumber) {
		var ret string
		return ret
	}
	return *o.SocialSecurityNumber
}

// GetSocialSecurityNumberOk returns a tuple with the SocialSecurityNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetSocialSecurityNumberOk() (*string, bool) {
	if o == nil || common.IsNil(o.SocialSecurityNumber) {
		return nil, false
	}
	return o.SocialSecurityNumber, true
}

// HasSocialSecurityNumber returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasSocialSecurityNumber() bool {
	if o != nil && !common.IsNil(o.SocialSecurityNumber) {
		return true
	}

	return false
}

// SetSocialSecurityNumber gets a reference to the given string and assigns it to the SocialSecurityNumber field.
func (o *PaymentSetupRequest) SetSocialSecurityNumber(v string) {
	o.SocialSecurityNumber = &v
}

// GetSplits returns the Splits field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetSplits() []Split {
	if o == nil || common.IsNil(o.Splits) {
		var ret []Split
		return ret
	}
	return o.Splits
}

// GetSplitsOk returns a tuple with the Splits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetSplitsOk() ([]Split, bool) {
	if o == nil || common.IsNil(o.Splits) {
		return nil, false
	}
	return o.Splits, true
}

// HasSplits returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasSplits() bool {
	if o != nil && !common.IsNil(o.Splits) {
		return true
	}

	return false
}

// SetSplits gets a reference to the given []Split and assigns it to the Splits field.
func (o *PaymentSetupRequest) SetSplits(v []Split) {
	o.Splits = v
}

// GetStore returns the Store field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetStore() string {
	if o == nil || common.IsNil(o.Store) {
		var ret string
		return ret
	}
	return *o.Store
}

// GetStoreOk returns a tuple with the Store field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetStoreOk() (*string, bool) {
	if o == nil || common.IsNil(o.Store) {
		return nil, false
	}
	return o.Store, true
}

// HasStore returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasStore() bool {
	if o != nil && !common.IsNil(o.Store) {
		return true
	}

	return false
}

// SetStore gets a reference to the given string and assigns it to the Store field.
func (o *PaymentSetupRequest) SetStore(v string) {
	o.Store = &v
}

// GetStorePaymentMethod returns the StorePaymentMethod field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetStorePaymentMethod() bool {
	if o == nil || common.IsNil(o.StorePaymentMethod) {
		var ret bool
		return ret
	}
	return *o.StorePaymentMethod
}

// GetStorePaymentMethodOk returns a tuple with the StorePaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetStorePaymentMethodOk() (*bool, bool) {
	if o == nil || common.IsNil(o.StorePaymentMethod) {
		return nil, false
	}
	return o.StorePaymentMethod, true
}

// HasStorePaymentMethod returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasStorePaymentMethod() bool {
	if o != nil && !common.IsNil(o.StorePaymentMethod) {
		return true
	}

	return false
}

// SetStorePaymentMethod gets a reference to the given bool and assigns it to the StorePaymentMethod field.
func (o *PaymentSetupRequest) SetStorePaymentMethod(v bool) {
	o.StorePaymentMethod = &v
}

// GetTelephoneNumber returns the TelephoneNumber field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetTelephoneNumber() string {
	if o == nil || common.IsNil(o.TelephoneNumber) {
		var ret string
		return ret
	}
	return *o.TelephoneNumber
}

// GetTelephoneNumberOk returns a tuple with the TelephoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetTelephoneNumberOk() (*string, bool) {
	if o == nil || common.IsNil(o.TelephoneNumber) {
		return nil, false
	}
	return o.TelephoneNumber, true
}

// HasTelephoneNumber returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasTelephoneNumber() bool {
	if o != nil && !common.IsNil(o.TelephoneNumber) {
		return true
	}

	return false
}

// SetTelephoneNumber gets a reference to the given string and assigns it to the TelephoneNumber field.
func (o *PaymentSetupRequest) SetTelephoneNumber(v string) {
	o.TelephoneNumber = &v
}

// GetThreeDSAuthenticationOnly returns the ThreeDSAuthenticationOnly field value if set, zero value otherwise.
// Deprecated
func (o *PaymentSetupRequest) GetThreeDSAuthenticationOnly() bool {
	if o == nil || common.IsNil(o.ThreeDSAuthenticationOnly) {
		var ret bool
		return ret
	}
	return *o.ThreeDSAuthenticationOnly
}

// GetThreeDSAuthenticationOnlyOk returns a tuple with the ThreeDSAuthenticationOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PaymentSetupRequest) GetThreeDSAuthenticationOnlyOk() (*bool, bool) {
	if o == nil || common.IsNil(o.ThreeDSAuthenticationOnly) {
		return nil, false
	}
	return o.ThreeDSAuthenticationOnly, true
}

// HasThreeDSAuthenticationOnly returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasThreeDSAuthenticationOnly() bool {
	if o != nil && !common.IsNil(o.ThreeDSAuthenticationOnly) {
		return true
	}

	return false
}

// SetThreeDSAuthenticationOnly gets a reference to the given bool and assigns it to the ThreeDSAuthenticationOnly field.
// Deprecated
func (o *PaymentSetupRequest) SetThreeDSAuthenticationOnly(v bool) {
	o.ThreeDSAuthenticationOnly = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetToken() string {
	if o == nil || common.IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetTokenOk() (*string, bool) {
	if o == nil || common.IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasToken() bool {
	if o != nil && !common.IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *PaymentSetupRequest) SetToken(v string) {
	o.Token = &v
}

// GetTrustedShopper returns the TrustedShopper field value if set, zero value otherwise.
func (o *PaymentSetupRequest) GetTrustedShopper() bool {
	if o == nil || common.IsNil(o.TrustedShopper) {
		var ret bool
		return ret
	}
	return *o.TrustedShopper
}

// GetTrustedShopperOk returns a tuple with the TrustedShopper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentSetupRequest) GetTrustedShopperOk() (*bool, bool) {
	if o == nil || common.IsNil(o.TrustedShopper) {
		return nil, false
	}
	return o.TrustedShopper, true
}

// HasTrustedShopper returns a boolean if a field has been set.
func (o *PaymentSetupRequest) HasTrustedShopper() bool {
	if o != nil && !common.IsNil(o.TrustedShopper) {
		return true
	}

	return false
}

// SetTrustedShopper gets a reference to the given bool and assigns it to the TrustedShopper field.
func (o *PaymentSetupRequest) SetTrustedShopper(v bool) {
	o.TrustedShopper = &v
}

func (o PaymentSetupRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentSetupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.AdditionalAmount) {
		toSerialize["additionalAmount"] = o.AdditionalAmount
	}
	if !common.IsNil(o.AdditionalData) {
		toSerialize["additionalData"] = o.AdditionalData
	}
	if !common.IsNil(o.AllowedPaymentMethods) {
		toSerialize["allowedPaymentMethods"] = o.AllowedPaymentMethods
	}
	toSerialize["amount"] = o.Amount
	if !common.IsNil(o.ApplicationInfo) {
		toSerialize["applicationInfo"] = o.ApplicationInfo
	}
	if !common.IsNil(o.BillingAddress) {
		toSerialize["billingAddress"] = o.BillingAddress
	}
	if !common.IsNil(o.BlockedPaymentMethods) {
		toSerialize["blockedPaymentMethods"] = o.BlockedPaymentMethods
	}
	if !common.IsNil(o.CaptureDelayHours) {
		toSerialize["captureDelayHours"] = o.CaptureDelayHours
	}
	if !common.IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if !common.IsNil(o.CheckoutAttemptId) {
		toSerialize["checkoutAttemptId"] = o.CheckoutAttemptId
	}
	if !common.IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !common.IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !common.IsNil(o.ConversionId) {
		toSerialize["conversionId"] = o.ConversionId
	}
	toSerialize["countryCode"] = o.CountryCode
	if !common.IsNil(o.DateOfBirth) {
		toSerialize["dateOfBirth"] = o.DateOfBirth
	}
	if !common.IsNil(o.DccQuote) {
		toSerialize["dccQuote"] = o.DccQuote
	}
	if !common.IsNil(o.DeliveryAddress) {
		toSerialize["deliveryAddress"] = o.DeliveryAddress
	}
	if !common.IsNil(o.DeliveryDate) {
		toSerialize["deliveryDate"] = o.DeliveryDate
	}
	if !common.IsNil(o.EnableOneClick) {
		toSerialize["enableOneClick"] = o.EnableOneClick
	}
	if !common.IsNil(o.EnablePayOut) {
		toSerialize["enablePayOut"] = o.EnablePayOut
	}
	if !common.IsNil(o.EnableRecurring) {
		toSerialize["enableRecurring"] = o.EnableRecurring
	}
	if !common.IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	if !common.IsNil(o.FraudOffset) {
		toSerialize["fraudOffset"] = o.FraudOffset
	}
	if !common.IsNil(o.Installments) {
		toSerialize["installments"] = o.Installments
	}
	if !common.IsNil(o.LineItems) {
		toSerialize["lineItems"] = o.LineItems
	}
	if !common.IsNil(o.LocalizedShopperStatement) {
		toSerialize["localizedShopperStatement"] = o.LocalizedShopperStatement
	}
	if !common.IsNil(o.Mandate) {
		toSerialize["mandate"] = o.Mandate
	}
	if !common.IsNil(o.Mcc) {
		toSerialize["mcc"] = o.Mcc
	}
	toSerialize["merchantAccount"] = o.MerchantAccount
	if !common.IsNil(o.MerchantOrderReference) {
		toSerialize["merchantOrderReference"] = o.MerchantOrderReference
	}
	if !common.IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !common.IsNil(o.OrderReference) {
		toSerialize["orderReference"] = o.OrderReference
	}
	if !common.IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !common.IsNil(o.PlatformChargebackLogic) {
		toSerialize["platformChargebackLogic"] = o.PlatformChargebackLogic
	}
	if !common.IsNil(o.RecurringExpiry) {
		toSerialize["recurringExpiry"] = o.RecurringExpiry
	}
	if !common.IsNil(o.RecurringFrequency) {
		toSerialize["recurringFrequency"] = o.RecurringFrequency
	}
	toSerialize["reference"] = o.Reference
	toSerialize["returnUrl"] = o.ReturnUrl
	if !common.IsNil(o.RiskData) {
		toSerialize["riskData"] = o.RiskData
	}
	if !common.IsNil(o.SdkVersion) {
		toSerialize["sdkVersion"] = o.SdkVersion
	}
	if !common.IsNil(o.SessionValidity) {
		toSerialize["sessionValidity"] = o.SessionValidity
	}
	if !common.IsNil(o.ShopperEmail) {
		toSerialize["shopperEmail"] = o.ShopperEmail
	}
	if !common.IsNil(o.ShopperIP) {
		toSerialize["shopperIP"] = o.ShopperIP
	}
	if !common.IsNil(o.ShopperInteraction) {
		toSerialize["shopperInteraction"] = o.ShopperInteraction
	}
	if !common.IsNil(o.ShopperLocale) {
		toSerialize["shopperLocale"] = o.ShopperLocale
	}
	if !common.IsNil(o.ShopperName) {
		toSerialize["shopperName"] = o.ShopperName
	}
	if !common.IsNil(o.ShopperReference) {
		toSerialize["shopperReference"] = o.ShopperReference
	}
	if !common.IsNil(o.ShopperStatement) {
		toSerialize["shopperStatement"] = o.ShopperStatement
	}
	if !common.IsNil(o.SocialSecurityNumber) {
		toSerialize["socialSecurityNumber"] = o.SocialSecurityNumber
	}
	if !common.IsNil(o.Splits) {
		toSerialize["splits"] = o.Splits
	}
	if !common.IsNil(o.Store) {
		toSerialize["store"] = o.Store
	}
	if !common.IsNil(o.StorePaymentMethod) {
		toSerialize["storePaymentMethod"] = o.StorePaymentMethod
	}
	if !common.IsNil(o.TelephoneNumber) {
		toSerialize["telephoneNumber"] = o.TelephoneNumber
	}
	if !common.IsNil(o.ThreeDSAuthenticationOnly) {
		toSerialize["threeDSAuthenticationOnly"] = o.ThreeDSAuthenticationOnly
	}
	if !common.IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !common.IsNil(o.TrustedShopper) {
		toSerialize["trustedShopper"] = o.TrustedShopper
	}
	return toSerialize, nil
}

type NullablePaymentSetupRequest struct {
	value *PaymentSetupRequest
	isSet bool
}

func (v NullablePaymentSetupRequest) Get() *PaymentSetupRequest {
	return v.value
}

func (v *NullablePaymentSetupRequest) Set(val *PaymentSetupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentSetupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentSetupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentSetupRequest(val *PaymentSetupRequest) *NullablePaymentSetupRequest {
	return &NullablePaymentSetupRequest{value: val, isSet: true}
}

func (v NullablePaymentSetupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentSetupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func (o *PaymentSetupRequest) isValidChannel() bool {
	var allowedEnumValues = []string{"iOS", "Android", "Web"}
	for _, allowed := range allowedEnumValues {
		if o.GetChannel() == allowed {
			return true
		}
	}
	return false
}
func (o *PaymentSetupRequest) isValidEntityType() bool {
	var allowedEnumValues = []string{"NaturalPerson", "CompanyName"}
	for _, allowed := range allowedEnumValues {
		if o.GetEntityType() == allowed {
			return true
		}
	}
	return false
}
func (o *PaymentSetupRequest) isValidShopperInteraction() bool {
	var allowedEnumValues = []string{"Ecommerce", "ContAuth", "Moto", "POS"}
	for _, allowed := range allowedEnumValues {
		if o.GetShopperInteraction() == allowed {
			return true
		}
	}
	return false
}
