/*
Adyen Checkout API

API version: 70
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"context"
	_nethttp "net/http"
	"net/url"

	"github.com/adyen/adyen-go-api-library/v6/src/common"
)

// OrdersApi OrdersApi service
type OrdersApi common.Service

type OrdersApiCancelOrderConfig struct {
	ctx                        context.Context
	idempotencyKey             *string
	checkoutCancelOrderRequest *CheckoutCancelOrderRequest
}

// A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
func (r OrdersApiCancelOrderConfig) IdempotencyKey(idempotencyKey string) OrdersApiCancelOrderConfig {
	r.idempotencyKey = &idempotencyKey
	return r
}

func (r OrdersApiCancelOrderConfig) CheckoutCancelOrderRequest(checkoutCancelOrderRequest CheckoutCancelOrderRequest) OrdersApiCancelOrderConfig {
	r.checkoutCancelOrderRequest = &checkoutCancelOrderRequest
	return r
}

/*
CancelOrder Cancel an order

Cancels an order. Cancellation of an order results in an automatic rollback of all payments made in the order, either by canceling or refunding the payment, depending on the type of payment method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return OrdersApiCancelOrderConfig
*/
func (a *OrdersApi) CancelOrderConfig(ctx context.Context) OrdersApiCancelOrderConfig {
	return OrdersApiCancelOrderConfig{
		ctx: ctx,
	}
}

/*
Cancel an order
Cancels an order. Cancellation of an order results in an automatic rollback of all payments made in the order, either by canceling or refunding the payment, depending on the type of payment method.
 * @param req CheckoutCancelOrderRequest - reference of CheckoutCancelOrderRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CheckoutCancelOrderResponse
*/

func (a *OrdersApi) CancelOrder(r OrdersApiCancelOrderConfig) (CheckoutCancelOrderResponse, *_nethttp.Response, error) {
	res := &CheckoutCancelOrderResponse{}
	path := "/orders/cancel"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.idempotencyKey != nil {
		common.ParameterAddToHeaderOrQuery(headerParams, "Idempotency-Key", r.idempotencyKey, "")
	}
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.checkoutCancelOrderRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}

type OrdersApiGetBalanceOfGiftCardConfig struct {
	ctx                         context.Context
	idempotencyKey              *string
	checkoutBalanceCheckRequest *CheckoutBalanceCheckRequest
}

// A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
func (r OrdersApiGetBalanceOfGiftCardConfig) IdempotencyKey(idempotencyKey string) OrdersApiGetBalanceOfGiftCardConfig {
	r.idempotencyKey = &idempotencyKey
	return r
}

func (r OrdersApiGetBalanceOfGiftCardConfig) CheckoutBalanceCheckRequest(checkoutBalanceCheckRequest CheckoutBalanceCheckRequest) OrdersApiGetBalanceOfGiftCardConfig {
	r.checkoutBalanceCheckRequest = &checkoutBalanceCheckRequest
	return r
}

/*
GetBalanceOfGiftCard Get the balance of a gift card

Retrieves the balance remaining on a shopper's gift card. To check a gift card's balance, make a POST `/paymentMethods/balance` call and include the gift card's details inside a `paymentMethod` object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return OrdersApiGetBalanceOfGiftCardConfig
*/
func (a *OrdersApi) GetBalanceOfGiftCardConfig(ctx context.Context) OrdersApiGetBalanceOfGiftCardConfig {
	return OrdersApiGetBalanceOfGiftCardConfig{
		ctx: ctx,
	}
}

/*
Get the balance of a gift card
Retrieves the balance remaining on a shopper&#39;s gift card. To check a gift card&#39;s balance, make a POST &#x60;/paymentMethods/balance&#x60; call and include the gift card&#39;s details inside a &#x60;paymentMethod&#x60; object.
 * @param req CheckoutBalanceCheckRequest - reference of CheckoutBalanceCheckRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CheckoutBalanceCheckResponse
*/

func (a *OrdersApi) GetBalanceOfGiftCard(r OrdersApiGetBalanceOfGiftCardConfig) (CheckoutBalanceCheckResponse, *_nethttp.Response, error) {
	res := &CheckoutBalanceCheckResponse{}
	path := "/paymentMethods/balance"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.idempotencyKey != nil {
		common.ParameterAddToHeaderOrQuery(headerParams, "Idempotency-Key", r.idempotencyKey, "")
	}
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.checkoutBalanceCheckRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}

type OrdersApiOrdersConfig struct {
	ctx                        context.Context
	idempotencyKey             *string
	checkoutCreateOrderRequest *CheckoutCreateOrderRequest
}

// A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
func (r OrdersApiOrdersConfig) IdempotencyKey(idempotencyKey string) OrdersApiOrdersConfig {
	r.idempotencyKey = &idempotencyKey
	return r
}

func (r OrdersApiOrdersConfig) CheckoutCreateOrderRequest(checkoutCreateOrderRequest CheckoutCreateOrderRequest) OrdersApiOrdersConfig {
	r.checkoutCreateOrderRequest = &checkoutCreateOrderRequest
	return r
}

/*
Orders Create an order

Creates an order to be used for partial payments. Make a POST `/orders` call before making a `/payments` call when processing payments with different payment methods.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return OrdersApiOrdersConfig
*/
func (a *OrdersApi) OrdersConfig(ctx context.Context) OrdersApiOrdersConfig {
	return OrdersApiOrdersConfig{
		ctx: ctx,
	}
}

/*
Create an order
Creates an order to be used for partial payments. Make a POST &#x60;/orders&#x60; call before making a &#x60;/payments&#x60; call when processing payments with different payment methods.
 * @param req CheckoutCreateOrderRequest - reference of CheckoutCreateOrderRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CheckoutCreateOrderResponse
*/

func (a *OrdersApi) Orders(r OrdersApiOrdersConfig) (CheckoutCreateOrderResponse, *_nethttp.Response, error) {
	res := &CheckoutCreateOrderResponse{}
	path := "/orders"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.idempotencyKey != nil {
		common.ParameterAddToHeaderOrQuery(headerParams, "Idempotency-Key", r.idempotencyKey, "")
	}
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.checkoutCreateOrderRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}
