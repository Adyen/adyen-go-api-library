/*
Adyen Checkout API

API version: 70
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	_context "context"
	_nethttp "net/http"
)

/*
Create an order
Creates an order to be used for partial payments. Make a POST &#x60;/orders&#x60; call before making a &#x60;/payments&#x60; call when processing payments with different payment methods.
 * @param req CheckoutCreateOrderRequest - reference of CheckoutCreateOrderRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CheckoutCreateOrderResponse
*/
func (a Checkout) Orders(req *CheckoutCreateOrderRequest, ctxs ..._context.Context) (CheckoutCreateOrderResponse, *_nethttp.Response, error) {
	res := &CheckoutCreateOrderResponse{}
	path := "/orders"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Cancel an order
Cancels an order. Cancellation of an order results in an automatic rollback of all payments made in the order, either by canceling or refunding the payment, depending on the type of payment method.
 * @param req CheckoutCancelOrderRequest - reference of CheckoutCancelOrderRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CheckoutCancelOrderResponse
*/
func (a Checkout) CancelOrder(req *CheckoutCancelOrderRequest, ctxs ..._context.Context) (CheckoutCancelOrderResponse, *_nethttp.Response, error) {
	res := &CheckoutCancelOrderResponse{}
	path := "/orders/cancel"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Get the balance of a gift card
Retrieves the balance remaining on a shopper&#39;s gift card. To check a gift card&#39;s balance, make a POST &#x60;/paymentMethods/balance&#x60; call and include the gift card&#39;s details inside a &#x60;paymentMethod&#x60; object.
 * @param req CheckoutBalanceCheckRequest - reference of CheckoutBalanceCheckRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CheckoutBalanceCheckResponse
*/
func (a Checkout) GetBalanceOfGiftCard(req *CheckoutBalanceCheckRequest, ctxs ..._context.Context) (CheckoutBalanceCheckResponse, *_nethttp.Response, error) {
	res := &CheckoutBalanceCheckResponse{}
	path := "/paymentMethods/balance"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}
