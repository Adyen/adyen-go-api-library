/*
Adyen Checkout API

API version: 70
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"context"
	"net/http"
	"net/url"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// OrdersApi service
type OrdersApi common.Service

// All parameters accepted by OrdersApi.CancelOrder
type OrdersApiCancelOrderInput struct {
	idempotencyKey             *string
	checkoutCancelOrderRequest *CheckoutCancelOrderRequest
}

// A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
func (r OrdersApiCancelOrderInput) IdempotencyKey(idempotencyKey string) OrdersApiCancelOrderInput {
	r.idempotencyKey = &idempotencyKey
	return r
}

func (r OrdersApiCancelOrderInput) CheckoutCancelOrderRequest(checkoutCancelOrderRequest CheckoutCancelOrderRequest) OrdersApiCancelOrderInput {
	r.checkoutCancelOrderRequest = &checkoutCancelOrderRequest
	return r
}

/*
Prepare a request for CancelOrder

@return OrdersApiCancelOrderInput
*/
func (a *OrdersApi) CancelOrderInput() OrdersApiCancelOrderInput {
	return OrdersApiCancelOrderInput{}
}

/*
CancelOrder Cancel an order

Cancels an order. Cancellation of an order results in an automatic rollback of all payments made in the order, either by canceling or refunding the payment, depending on the type of payment method.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r OrdersApiCancelOrderInput - Request parameters, see CancelOrderInput
@return CheckoutCancelOrderResponse, *http.Response, error
*/
func (a *OrdersApi) CancelOrder(ctx context.Context, r OrdersApiCancelOrderInput) (CheckoutCancelOrderResponse, *http.Response, error) {
	res := &CheckoutCancelOrderResponse{}
	path := "/orders/cancel"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.idempotencyKey != nil {
		common.ParameterAddToHeaderOrQuery(headerParams, "Idempotency-Key", r.idempotencyKey, "")
	}
	httpRes, err := common.SendAPIRequest(
		ctx,
		a.Client,
		r.checkoutCancelOrderRequest,
		res,
		http.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}

// All parameters accepted by OrdersApi.GetBalanceOfGiftCard
type OrdersApiGetBalanceOfGiftCardInput struct {
	idempotencyKey              *string
	checkoutBalanceCheckRequest *CheckoutBalanceCheckRequest
}

// A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
func (r OrdersApiGetBalanceOfGiftCardInput) IdempotencyKey(idempotencyKey string) OrdersApiGetBalanceOfGiftCardInput {
	r.idempotencyKey = &idempotencyKey
	return r
}

func (r OrdersApiGetBalanceOfGiftCardInput) CheckoutBalanceCheckRequest(checkoutBalanceCheckRequest CheckoutBalanceCheckRequest) OrdersApiGetBalanceOfGiftCardInput {
	r.checkoutBalanceCheckRequest = &checkoutBalanceCheckRequest
	return r
}

/*
Prepare a request for GetBalanceOfGiftCard

@return OrdersApiGetBalanceOfGiftCardInput
*/
func (a *OrdersApi) GetBalanceOfGiftCardInput() OrdersApiGetBalanceOfGiftCardInput {
	return OrdersApiGetBalanceOfGiftCardInput{}
}

/*
GetBalanceOfGiftCard Get the balance of a gift card

Retrieves the balance remaining on a shopper's gift card. To check a gift card's balance, make a POST `/paymentMethods/balance` call and include the gift card's details inside a `paymentMethod` object.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r OrdersApiGetBalanceOfGiftCardInput - Request parameters, see GetBalanceOfGiftCardInput
@return CheckoutBalanceCheckResponse, *http.Response, error
*/
func (a *OrdersApi) GetBalanceOfGiftCard(ctx context.Context, r OrdersApiGetBalanceOfGiftCardInput) (CheckoutBalanceCheckResponse, *http.Response, error) {
	res := &CheckoutBalanceCheckResponse{}
	path := "/paymentMethods/balance"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.idempotencyKey != nil {
		common.ParameterAddToHeaderOrQuery(headerParams, "Idempotency-Key", r.idempotencyKey, "")
	}
	httpRes, err := common.SendAPIRequest(
		ctx,
		a.Client,
		r.checkoutBalanceCheckRequest,
		res,
		http.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}

// All parameters accepted by OrdersApi.Orders
type OrdersApiOrdersInput struct {
	idempotencyKey             *string
	checkoutCreateOrderRequest *CheckoutCreateOrderRequest
}

// A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
func (r OrdersApiOrdersInput) IdempotencyKey(idempotencyKey string) OrdersApiOrdersInput {
	r.idempotencyKey = &idempotencyKey
	return r
}

func (r OrdersApiOrdersInput) CheckoutCreateOrderRequest(checkoutCreateOrderRequest CheckoutCreateOrderRequest) OrdersApiOrdersInput {
	r.checkoutCreateOrderRequest = &checkoutCreateOrderRequest
	return r
}

/*
Prepare a request for Orders

@return OrdersApiOrdersInput
*/
func (a *OrdersApi) OrdersInput() OrdersApiOrdersInput {
	return OrdersApiOrdersInput{}
}

/*
Orders Create an order

Creates an order to be used for partial payments. Make a POST `/orders` call before making a `/payments` call when processing payments with different payment methods.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r OrdersApiOrdersInput - Request parameters, see OrdersInput
@return CheckoutCreateOrderResponse, *http.Response, error
*/
func (a *OrdersApi) Orders(ctx context.Context, r OrdersApiOrdersInput) (CheckoutCreateOrderResponse, *http.Response, error) {
	res := &CheckoutCreateOrderResponse{}
	path := "/orders"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	if r.idempotencyKey != nil {
		common.ParameterAddToHeaderOrQuery(headerParams, "Idempotency-Key", r.idempotencyKey, "")
	}
	httpRes, err := common.SendAPIRequest(
		ctx,
		a.Client,
		r.checkoutCreateOrderRequest,
		res,
		http.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}
