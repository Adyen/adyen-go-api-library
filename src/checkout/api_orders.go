/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [Checkout documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to the Checkout API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_Checkout_API_key\" \\ ... ``` Note that when going live, you need to generate a new API Key to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v69/payments ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=69) to find out what changed in this version!
 *
 * API version: 69
 * Contact: developer-experience@adyen.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package checkout

import (
	_context "context"
    _nethttp "net/http"
)


/*
Orders Create an order
Creates an order to be used for partial payments. Make a POST &#x60;/orders&#x60; call before making a &#x60;/payments&#x60; call when processing payments with different payment methods.
 * @param req CheckoutCreateOrderRequest - reference of CheckoutCreateOrderRequest). 
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CheckoutCreateOrderResponse
*/
func (a Checkout) Orders(req *CheckoutCreateOrderRequest, ctxs ..._context.Context) (CheckoutCreateOrderResponse, *_nethttp.Response, error) {
    res := &CheckoutCreateOrderResponse{}
    httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath() + "/orders", ctxs...)
    return *res, httpRes, err
}


/*
OrdersCancel Cancel an order
Cancels an order. Cancellation of an order results in an automatic rollback of all payments made in the order, either by canceling or refunding the payment, depending on the type of payment method.
 * @param req CheckoutCancelOrderRequest - reference of CheckoutCancelOrderRequest). 
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CheckoutCancelOrderResponse
*/
func (a Checkout) OrdersCancel(req *CheckoutCancelOrderRequest, ctxs ..._context.Context) (CheckoutCancelOrderResponse, *_nethttp.Response, error) {
    res := &CheckoutCancelOrderResponse{}
    httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath() + "/orders/cancel", ctxs...)
    return *res, httpRes, err
}


/*
PaymentMethodsBalance Get the balance of a gift card
Retrieves the balance remaining on a shopper&#39;s gift card. To check a gift card&#39;s balance, make a POST &#x60;/paymentMethods/balance&#x60; call and include the gift card&#39;s details inside a &#x60;paymentMethod&#x60; object.
 * @param req CheckoutBalanceCheckRequest - reference of CheckoutBalanceCheckRequest). 
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CheckoutBalanceCheckResponse
*/
func (a Checkout) PaymentMethodsBalance(req *CheckoutBalanceCheckRequest, ctxs ..._context.Context) (CheckoutBalanceCheckResponse, *_nethttp.Response, error) {
    res := &CheckoutBalanceCheckResponse{}
    httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath() + "/paymentMethods/balance", ctxs...)
    return *res, httpRes, err
}

