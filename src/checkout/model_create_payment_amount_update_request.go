/*
Adyen Checkout API

API version: 70
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// checks if the CreatePaymentAmountUpdateRequest type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &CreatePaymentAmountUpdateRequest{}

// CreatePaymentAmountUpdateRequest struct for CreatePaymentAmountUpdateRequest
type CreatePaymentAmountUpdateRequest struct {
	Amount Amount `json:"amount"`
	// The reason for the amount update. Possible values:  * **delayedCharge**  * **noShow**  * **installment**
	IndustryUsage *string `json:"industryUsage,omitempty"`
	// The merchant account that is used to process the payment.
	MerchantAccount string `json:"merchantAccount"`
	// Your reference for the amount update request. Maximum length: 80 characters.
	Reference *string `json:"reference,omitempty"`
	// An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For details, refer to [Providing split information](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information).
	Splits []Split `json:"splits,omitempty"`
}

// NewCreatePaymentAmountUpdateRequest instantiates a new CreatePaymentAmountUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePaymentAmountUpdateRequest(amount Amount, merchantAccount string) *CreatePaymentAmountUpdateRequest {
	this := CreatePaymentAmountUpdateRequest{}
	this.Amount = amount
	this.MerchantAccount = merchantAccount
	return &this
}

// NewCreatePaymentAmountUpdateRequestWithDefaults instantiates a new CreatePaymentAmountUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePaymentAmountUpdateRequestWithDefaults() *CreatePaymentAmountUpdateRequest {
	this := CreatePaymentAmountUpdateRequest{}
	return &this
}

// GetAmount returns the Amount field value
func (o *CreatePaymentAmountUpdateRequest) GetAmount() Amount {
	if o == nil {
		var ret Amount
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CreatePaymentAmountUpdateRequest) GetAmountOk() (*Amount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CreatePaymentAmountUpdateRequest) SetAmount(v Amount) {
	o.Amount = v
}

// GetIndustryUsage returns the IndustryUsage field value if set, zero value otherwise.
func (o *CreatePaymentAmountUpdateRequest) GetIndustryUsage() string {
	if o == nil || common.IsNil(o.IndustryUsage) {
		var ret string
		return ret
	}
	return *o.IndustryUsage
}

// GetIndustryUsageOk returns a tuple with the IndustryUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePaymentAmountUpdateRequest) GetIndustryUsageOk() (*string, bool) {
	if o == nil || common.IsNil(o.IndustryUsage) {
		return nil, false
	}
	return o.IndustryUsage, true
}

// HasIndustryUsage returns a boolean if a field has been set.
func (o *CreatePaymentAmountUpdateRequest) HasIndustryUsage() bool {
	if o != nil && !common.IsNil(o.IndustryUsage) {
		return true
	}

	return false
}

// SetIndustryUsage gets a reference to the given string and assigns it to the IndustryUsage field.
func (o *CreatePaymentAmountUpdateRequest) SetIndustryUsage(v string) {
	o.IndustryUsage = &v
}

// GetMerchantAccount returns the MerchantAccount field value
func (o *CreatePaymentAmountUpdateRequest) GetMerchantAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantAccount
}

// GetMerchantAccountOk returns a tuple with the MerchantAccount field value
// and a boolean to check if the value has been set.
func (o *CreatePaymentAmountUpdateRequest) GetMerchantAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantAccount, true
}

// SetMerchantAccount sets field value
func (o *CreatePaymentAmountUpdateRequest) SetMerchantAccount(v string) {
	o.MerchantAccount = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *CreatePaymentAmountUpdateRequest) GetReference() string {
	if o == nil || common.IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePaymentAmountUpdateRequest) GetReferenceOk() (*string, bool) {
	if o == nil || common.IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *CreatePaymentAmountUpdateRequest) HasReference() bool {
	if o != nil && !common.IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *CreatePaymentAmountUpdateRequest) SetReference(v string) {
	o.Reference = &v
}

// GetSplits returns the Splits field value if set, zero value otherwise.
func (o *CreatePaymentAmountUpdateRequest) GetSplits() []Split {
	if o == nil || common.IsNil(o.Splits) {
		var ret []Split
		return ret
	}
	return o.Splits
}

// GetSplitsOk returns a tuple with the Splits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePaymentAmountUpdateRequest) GetSplitsOk() ([]Split, bool) {
	if o == nil || common.IsNil(o.Splits) {
		return nil, false
	}
	return o.Splits, true
}

// HasSplits returns a boolean if a field has been set.
func (o *CreatePaymentAmountUpdateRequest) HasSplits() bool {
	if o != nil && !common.IsNil(o.Splits) {
		return true
	}

	return false
}

// SetSplits gets a reference to the given []Split and assigns it to the Splits field.
func (o *CreatePaymentAmountUpdateRequest) SetSplits(v []Split) {
	o.Splits = v
}

func (o CreatePaymentAmountUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePaymentAmountUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	if !common.IsNil(o.IndustryUsage) {
		toSerialize["industryUsage"] = o.IndustryUsage
	}
	toSerialize["merchantAccount"] = o.MerchantAccount
	if !common.IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !common.IsNil(o.Splits) {
		toSerialize["splits"] = o.Splits
	}
	return toSerialize, nil
}

type NullableCreatePaymentAmountUpdateRequest struct {
	value *CreatePaymentAmountUpdateRequest
	isSet bool
}

func (v NullableCreatePaymentAmountUpdateRequest) Get() *CreatePaymentAmountUpdateRequest {
	return v.value
}

func (v *NullableCreatePaymentAmountUpdateRequest) Set(val *CreatePaymentAmountUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePaymentAmountUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePaymentAmountUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePaymentAmountUpdateRequest(val *CreatePaymentAmountUpdateRequest) *NullableCreatePaymentAmountUpdateRequest {
	return &NullableCreatePaymentAmountUpdateRequest{value: val, isSet: true}
}

func (v NullableCreatePaymentAmountUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePaymentAmountUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func (o *CreatePaymentAmountUpdateRequest) isValidIndustryUsage() bool {
	var allowedEnumValues = []string{"delayedCharge", "installment", "noShow"}
	for _, allowed := range allowedEnumValues {
		if o.GetIndustryUsage() == allowed {
			return true
		}
	}
	return false
}
