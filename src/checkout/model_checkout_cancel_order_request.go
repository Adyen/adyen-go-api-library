/*
Adyen Checkout API

API version: 70
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// checks if the CheckoutCancelOrderRequest type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &CheckoutCancelOrderRequest{}

// CheckoutCancelOrderRequest struct for CheckoutCancelOrderRequest
type CheckoutCancelOrderRequest struct {
	// The merchant account identifier that orderData belongs to.
	MerchantAccount string             `json:"merchantAccount"`
	Order           EncryptedOrderData `json:"order"`
}

// NewCheckoutCancelOrderRequest instantiates a new CheckoutCancelOrderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckoutCancelOrderRequest(merchantAccount string, order EncryptedOrderData) *CheckoutCancelOrderRequest {
	this := CheckoutCancelOrderRequest{}
	this.MerchantAccount = merchantAccount
	this.Order = order
	return &this
}

// NewCheckoutCancelOrderRequestWithDefaults instantiates a new CheckoutCancelOrderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckoutCancelOrderRequestWithDefaults() *CheckoutCancelOrderRequest {
	this := CheckoutCancelOrderRequest{}
	return &this
}

// GetMerchantAccount returns the MerchantAccount field value
func (o *CheckoutCancelOrderRequest) GetMerchantAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantAccount
}

// GetMerchantAccountOk returns a tuple with the MerchantAccount field value
// and a boolean to check if the value has been set.
func (o *CheckoutCancelOrderRequest) GetMerchantAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantAccount, true
}

// SetMerchantAccount sets field value
func (o *CheckoutCancelOrderRequest) SetMerchantAccount(v string) {
	o.MerchantAccount = v
}

// GetOrder returns the Order field value
func (o *CheckoutCancelOrderRequest) GetOrder() EncryptedOrderData {
	if o == nil {
		var ret EncryptedOrderData
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *CheckoutCancelOrderRequest) GetOrderOk() (*EncryptedOrderData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *CheckoutCancelOrderRequest) SetOrder(v EncryptedOrderData) {
	o.Order = v
}

func (o CheckoutCancelOrderRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckoutCancelOrderRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merchantAccount"] = o.MerchantAccount
	toSerialize["order"] = o.Order
	return toSerialize, nil
}

type NullableCheckoutCancelOrderRequest struct {
	value *CheckoutCancelOrderRequest
	isSet bool
}

func (v NullableCheckoutCancelOrderRequest) Get() *CheckoutCancelOrderRequest {
	return v.value
}

func (v *NullableCheckoutCancelOrderRequest) Set(val *CheckoutCancelOrderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckoutCancelOrderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckoutCancelOrderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckoutCancelOrderRequest(val *CheckoutCancelOrderRequest) *NullableCheckoutCancelOrderRequest {
	return &NullableCheckoutCancelOrderRequest{value: val, isSet: true}
}

func (v NullableCheckoutCancelOrderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckoutCancelOrderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
