/*
Adyen Checkout API

API version: 71
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v8/src/common"
)

// checks if the SubMerchantInfo type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &SubMerchantInfo{}

// SubMerchantInfo struct for SubMerchantInfo
type SubMerchantInfo struct {
	Address *BillingAddress `json:"address,omitempty"`
	Id      *string         `json:"id,omitempty"`
	Mcc     *string         `json:"mcc,omitempty"`
	Name    *string         `json:"name,omitempty"`
	TaxId   *string         `json:"taxId,omitempty"`
}

// NewSubMerchantInfo instantiates a new SubMerchantInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubMerchantInfo() *SubMerchantInfo {
	this := SubMerchantInfo{}
	return &this
}

// NewSubMerchantInfoWithDefaults instantiates a new SubMerchantInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubMerchantInfoWithDefaults() *SubMerchantInfo {
	this := SubMerchantInfo{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *SubMerchantInfo) GetAddress() BillingAddress {
	if o == nil || common.IsNil(o.Address) {
		var ret BillingAddress
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubMerchantInfo) GetAddressOk() (*BillingAddress, bool) {
	if o == nil || common.IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *SubMerchantInfo) HasAddress() bool {
	if o != nil && !common.IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given BillingAddress and assigns it to the Address field.
func (o *SubMerchantInfo) SetAddress(v BillingAddress) {
	o.Address = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubMerchantInfo) GetId() string {
	if o == nil || common.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubMerchantInfo) GetIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubMerchantInfo) HasId() bool {
	if o != nil && !common.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubMerchantInfo) SetId(v string) {
	o.Id = &v
}

// GetMcc returns the Mcc field value if set, zero value otherwise.
func (o *SubMerchantInfo) GetMcc() string {
	if o == nil || common.IsNil(o.Mcc) {
		var ret string
		return ret
	}
	return *o.Mcc
}

// GetMccOk returns a tuple with the Mcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubMerchantInfo) GetMccOk() (*string, bool) {
	if o == nil || common.IsNil(o.Mcc) {
		return nil, false
	}
	return o.Mcc, true
}

// HasMcc returns a boolean if a field has been set.
func (o *SubMerchantInfo) HasMcc() bool {
	if o != nil && !common.IsNil(o.Mcc) {
		return true
	}

	return false
}

// SetMcc gets a reference to the given string and assigns it to the Mcc field.
func (o *SubMerchantInfo) SetMcc(v string) {
	o.Mcc = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SubMerchantInfo) GetName() string {
	if o == nil || common.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubMerchantInfo) GetNameOk() (*string, bool) {
	if o == nil || common.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SubMerchantInfo) HasName() bool {
	if o != nil && !common.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SubMerchantInfo) SetName(v string) {
	o.Name = &v
}

// GetTaxId returns the TaxId field value if set, zero value otherwise.
func (o *SubMerchantInfo) GetTaxId() string {
	if o == nil || common.IsNil(o.TaxId) {
		var ret string
		return ret
	}
	return *o.TaxId
}

// GetTaxIdOk returns a tuple with the TaxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubMerchantInfo) GetTaxIdOk() (*string, bool) {
	if o == nil || common.IsNil(o.TaxId) {
		return nil, false
	}
	return o.TaxId, true
}

// HasTaxId returns a boolean if a field has been set.
func (o *SubMerchantInfo) HasTaxId() bool {
	if o != nil && !common.IsNil(o.TaxId) {
		return true
	}

	return false
}

// SetTaxId gets a reference to the given string and assigns it to the TaxId field.
func (o *SubMerchantInfo) SetTaxId(v string) {
	o.TaxId = &v
}

func (o SubMerchantInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubMerchantInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !common.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !common.IsNil(o.Mcc) {
		toSerialize["mcc"] = o.Mcc
	}
	if !common.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !common.IsNil(o.TaxId) {
		toSerialize["taxId"] = o.TaxId
	}
	return toSerialize, nil
}

type NullableSubMerchantInfo struct {
	value *SubMerchantInfo
	isSet bool
}

func (v NullableSubMerchantInfo) Get() *SubMerchantInfo {
	return v.value
}

func (v *NullableSubMerchantInfo) Set(val *SubMerchantInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSubMerchantInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSubMerchantInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubMerchantInfo(val *SubMerchantInfo) *NullableSubMerchantInfo {
	return &NullableSubMerchantInfo{value: val, isSet: true}
}

func (v NullableSubMerchantInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubMerchantInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
