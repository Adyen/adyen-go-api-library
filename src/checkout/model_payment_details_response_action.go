/*
Adyen Checkout API

API version: 71
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"
    "github.com/adyen/adyen-go-api-library/v21/src/common"
	"fmt"
)

// PaymentDetailsResponseAction - Action to be taken for completing the payment. When returned, only the 3D Secure action is needed in most cases.
type PaymentDetailsResponseAction struct {
	CheckoutThreeDS2Action *CheckoutThreeDS2Action
}

// CheckoutThreeDS2ActionAsPaymentDetailsResponseAction is a convenience function that returns CheckoutThreeDS2Action wrapped in PaymentDetailsResponseAction
func CheckoutThreeDS2ActionAsPaymentDetailsResponseAction(v *CheckoutThreeDS2Action) PaymentDetailsResponseAction {
	return PaymentDetailsResponseAction{
		CheckoutThreeDS2Action: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PaymentDetailsResponseAction) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CheckoutThreeDS2Action
	err = json.Unmarshal(data, &dst.CheckoutThreeDS2Action)
	if err == nil {
		jsonCheckoutThreeDS2Action, _ := json.Marshal(dst.CheckoutThreeDS2Action)
		if string(jsonCheckoutThreeDS2Action) == "{}" || !dst.CheckoutThreeDS2Action.isValidType() { // empty struct
			dst.CheckoutThreeDS2Action = nil
        } else {
			match++
		}
	} else {
		dst.CheckoutThreeDS2Action = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CheckoutThreeDS2Action = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PaymentDetailsResponseAction)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PaymentDetailsResponseAction)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PaymentDetailsResponseAction) MarshalJSON() ([]byte, error) {
	if src.CheckoutThreeDS2Action != nil {
		return json.Marshal(&src.CheckoutThreeDS2Action)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PaymentDetailsResponseAction) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CheckoutThreeDS2Action != nil {
		return obj.CheckoutThreeDS2Action
	}

	// all schemas are nil
	return nil
}

type NullablePaymentDetailsResponseAction struct {
	value *PaymentDetailsResponseAction
	isSet bool
}

func (v NullablePaymentDetailsResponseAction) Get() *PaymentDetailsResponseAction {
	return v.value
}

func (v *NullablePaymentDetailsResponseAction) Set(val *PaymentDetailsResponseAction) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentDetailsResponseAction) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentDetailsResponseAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentDetailsResponseAction(val *PaymentDetailsResponseAction) *NullablePaymentDetailsResponseAction {
	return &NullablePaymentDetailsResponseAction{value: val, isSet: true}
}

func (v NullablePaymentDetailsResponseAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentDetailsResponseAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


