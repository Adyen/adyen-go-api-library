/*
Adyen Checkout API

API version: 71
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"
	"fmt"
)

// Result the model 'Result'
type Result string

// List of Result
const (
	VALID   Result = "VALID"
	INVALID Result = "INVALID"
	UNKNOWN Result = "UNKNOWN"
)

// All allowed values of Result enum
var AllowedResultEnumValues = []Result{
	"VALID",
	"INVALID",
	"UNKNOWN",
}

func (v *Result) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Result(value)
	for _, existing := range AllowedResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Result", value)
}

// NewResultFromValue returns a pointer to a valid Result
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResultFromValue(v string) (*Result, error) {
	ev := Result(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Result: valid values are %v", v, AllowedResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Result) IsValid() bool {
	for _, existing := range AllowedResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Result value
func (v Result) Ptr() *Result {
	return &v
}

type NullableResult struct {
	value *Result
	isSet bool
}

func (v NullableResult) Get() *Result {
	return v.value
}

func (v *NullableResult) Set(val *Result) {
	v.value = val
	v.isSet = true
}

func (v NullableResult) IsSet() bool {
	return v.isSet
}

func (v *NullableResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResult(val *Result) *NullableResult {
	return &NullableResult{value: val, isSet: true}
}

func (v NullableResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
