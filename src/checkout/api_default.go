/*
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [Checkout documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to the Checkout API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_Checkout_API_key\" \\ ... ``` Note that when going live, you need to generate a new API Key to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Checkout API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v67/payments ```
 *
 * API version: 67
 * Contact: developer-experience@adyen.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package checkout

import (
	_context "context"
	_nethttp "net/http"

	"github.com/adyen/adyen-go-api-library/v5/src/common"
)

// Checkout Checkout service
type Checkout common.Service

/*
GetPaymentLink Retrieve a payment link.
Retrieves the payment link details using the payment link &#x60;id&#x60;.
 * @param linkId Unique identifier of the payment link.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentLinkResource
*/
func (a Checkout) GetPaymentLink(linkId string, ctxs ..._context.Context) (PaymentLinkResource, *_nethttp.Response, error) {
	res := &PaymentLinkResource{}
	httpRes, err := a.Client.MakeHTTPGetRequest(res, a.BasePath()+"/paymentLinks/"+linkId, ctxs...)
	return *res, httpRes, err
}

/*
UpdatePaymentLink Update the status of a payment link
Updates the status of a payment link. Use this endpoint to [force the expiry of a payment link](https://docs.adyen.com/online-payments/pay-by-link#update-payment-link-status).
 * @param linkId Unique identifier of the payment link.
 * @param request UpdatePaymentLinkRequest - reference of UpdatePaymentLinkRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentLinkResource
*/
func (a Checkout) UpdatePaymentLink(linkId string, req *UpdatePaymentLinkRequest, ctxs ..._context.Context) (PaymentLinkResource, *_nethttp.Response, error) {
	res := &PaymentLinkResource{}
	httpRes, err := a.Client.MakeHTTPPatchRequest(req, res, a.BasePath()+"/paymentLinks/"+linkId, ctxs...)
	return *res, httpRes, err
}

/*
Orders Creates an order for the given amount.
Creates an order to be used for partial payments. Make a POST &#x60;/orders&#x60; call before making a &#x60;/payments&#x60; call when processing payments with different payment methods.
 * @param request CheckoutCreateOrderRequest - reference of CheckoutCreateOrderRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CheckoutCreateOrderResponse
*/
func (a Checkout) Orders(req *CheckoutCreateOrderRequest, ctxs ..._context.Context) (CheckoutCreateOrderResponse, *_nethttp.Response, error) {
	res := &CheckoutCreateOrderResponse{}
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+"/orders", ctxs...)
	return *res, httpRes, err
}

/*
OrdersCancel Cancels the given order.
Cancels an order. Cancellation of an order results in an automatic rollback of all payments made in the order, either by canceling or refunding the payment, depending on the type of payment method.
 * @param request CheckoutCancelOrderRequest - reference of CheckoutCancelOrderRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CheckoutCancelOrderResponse
*/
func (a Checkout) OrdersCancel(req *CheckoutCancelOrderRequest, ctxs ..._context.Context) (CheckoutCancelOrderResponse, *_nethttp.Response, error) {
	res := &CheckoutCancelOrderResponse{}
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+"/orders/cancel", ctxs...)
	return *res, httpRes, err
}

/*
OriginKeys Create originKey values for one or more merchant domains.
This operation takes the origin domains and returns a JSON object containing the corresponding origin keys for the domains.  &gt; If you&#39;re still using origin key for your Web Drop-in or Components integration, we recommend [switching to client key](https://docs.adyen.com/development-resources/client-side-authentication/migrate-from-origin-key-to-client-key). This allows you to use a single key for all origins, add or remove origins without generating a new key, and detect the card type from the number entered in your payment form.
 * @param request CheckoutUtilityRequest - reference of CheckoutUtilityRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CheckoutUtilityResponse
*/
func (a Checkout) OriginKeys(req *CheckoutUtilityRequest, ctxs ..._context.Context) (CheckoutUtilityResponse, *_nethttp.Response, error) {
	res := &CheckoutUtilityResponse{}
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+"/originKeys", ctxs...)
	return *res, httpRes, err
}

/*
PaymentLinks Creates a payment link.
Creates a payment link to our hosted payment form where shoppers can pay. The list of payment methods presented to the shopper depends on the &#x60;currency&#x60; and &#x60;country&#x60; parameters sent in the request.  For more information, refer to [Pay by Link documentation](https://docs.adyen.com/online-payments/pay-by-link#create-payment-links-through-api).
 * @param request CreatePaymentLinkRequest - reference of CreatePaymentLinkRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentLinkResource
*/
func (a Checkout) PaymentLinks(req *CreatePaymentLinkRequest, ctxs ..._context.Context) (PaymentLinkResource, *_nethttp.Response, error) {
	res := &PaymentLinkResource{}
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+"/paymentLinks", ctxs...)
	return *res, httpRes, err
}

/*
PaymentMethods Returns available payment methods.
Queries the available payment methods for a transaction based on the transaction context (like amount, country, and currency). Besides giving back a list of the available payment methods, the response also returns which input details you need to collect from the shopper (to be submitted to &#x60;/payments&#x60;).  Although we highly recommend using this endpoint to ensure you are always offering the most up-to-date list of payment methods, its usage is optional. You can, for example, also cache the &#x60;/paymentMethods&#x60; response and update it once a week.
 * @param request PaymentMethodsRequest - reference of PaymentMethodsRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentMethodsResponse
*/
func (a Checkout) PaymentMethods(req *PaymentMethodsRequest, ctxs ..._context.Context) (PaymentMethodsResponse, *_nethttp.Response, error) {
	res := &PaymentMethodsResponse{}
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+"/paymentMethods", ctxs...)
	return *res, httpRes, err
}

/*
PaymentMethodsBalance Returns the available balance on gift card.
Retrieves the balance remaining on a shopper&#39;s gift card. To check a gift card&#39;s balance, make a POST &#x60;/paymentMethods/balance&#x60; call and include the gift card&#39;s details inside a &#x60;paymentMethod&#x60; object.
 * @param request CheckoutBalanceCheckRequest - reference of CheckoutBalanceCheckRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return CheckoutBalanceCheckResponse
*/
func (a Checkout) PaymentMethodsBalance(req *CheckoutBalanceCheckRequest, ctxs ..._context.Context) (CheckoutBalanceCheckResponse, *_nethttp.Response, error) {
	res := &CheckoutBalanceCheckResponse{}
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+"/paymentMethods/balance", ctxs...)
	return *res, httpRes, err
}

/*
PaymentSession Creates a payment session.
Provides the data object that can be used to start the Checkout SDK. To set up the payment, pass its amount, currency, and other required parameters. We use this to optimise the payment flow and perform better risk assessment of the transaction.  For more information, refer to [How it works](https://docs.adyen.com/online-payments).
 * @param request PaymentSetupRequest - reference of PaymentSetupRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentSetupResponse
*/
func (a Checkout) PaymentSession(req *PaymentSetupRequest, ctxs ..._context.Context) (PaymentSetupResponse, *_nethttp.Response, error) {
	res := &PaymentSetupResponse{}
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+"/paymentSession", ctxs...)
	return *res, httpRes, err
}

/*
Payments Starts a transaction.
Sends payment parameters (like amount, country, and currency) together with other required input details collected from the shopper. To know more about required parameters for specific payment methods, refer to our [payment method guides](https://docs.adyen.com/payment-methods). The response returns the result of the payment request: * For some payment methods (e.g. Visa, Mastercard, and SEPA Direct Debits) you&#39;ll get a final state in the &#x60;resultCode&#x60; (e.g. **Authorised** or **Refused**). * For other payment methods, you&#39;ll receive **RedirectShopper** as &#x60;resultCode&#x60; together with a &#x60;redirectUrl&#x60;. In this case, the shopper must finalize the payment on the page behind the &#x60;redirectUrl&#x60;.
 * @param request PaymentRequest - reference of PaymentRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentResponse
*/
func (a Checkout) Payments(req *PaymentRequest, ctxs ..._context.Context) (PaymentResponse, *_nethttp.Response, error) {
	res := &PaymentResponse{}
	adyenLib := &CommonField{
		Name:    common.LibName,
		Version: common.LibVersion,
	}
	if req.ApplicationInfo == nil {
		req.ApplicationInfo = &ApplicationInfo{}
	}
	req.ApplicationInfo.AdyenLibrary = adyenLib

	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+"/payments", ctxs...)
	return *res, httpRes, err
}

/*
PaymentsDetails Submits details for a payment.
Submits details for a payment created using &#x60;/payments&#x60;. This step is only needed when no final state has been reached on the &#x60;/payments&#x60; request, for example when the shopper was redirected to another page to complete the payment.
 * @param request DetailsRequest - reference of DetailsRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentDetailsResponse
*/
func (a Checkout) PaymentsDetails(req *DetailsRequest, ctxs ..._context.Context) (PaymentDetailsResponse, *_nethttp.Response, error) {
	res := &PaymentDetailsResponse{}
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+"/payments/details", ctxs...)
	return *res, httpRes, err
}

/*
PaymentsResult Verifies payment result.
Verifies the payment result using the payload returned from the Checkout SDK.  For more information, refer to [How it works](https://docs.adyen.com/online-payments).
 * @param request PaymentVerificationRequest - reference of PaymentVerificationRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return PaymentVerificationResponse
*/
func (a Checkout) PaymentsResult(req *PaymentVerificationRequest, ctxs ..._context.Context) (PaymentVerificationResponse, *_nethttp.Response, error) {
	res := &PaymentVerificationResponse{}
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+"/payments/result", ctxs...)
	return *res, httpRes, err
}
