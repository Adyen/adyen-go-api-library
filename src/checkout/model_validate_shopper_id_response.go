/*
Adyen Checkout API

API version: 71
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v21/src/common"
)

// checks if the ValidateShopperIdResponse type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &ValidateShopperIdResponse{}

// ValidateShopperIdResponse struct for ValidateShopperIdResponse
type ValidateShopperIdResponse struct {
	Reason *string `json:"reason,omitempty"`
	Result *Result `json:"result,omitempty"`
}

// NewValidateShopperIdResponse instantiates a new ValidateShopperIdResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateShopperIdResponse() *ValidateShopperIdResponse {
	this := ValidateShopperIdResponse{}
	return &this
}

// NewValidateShopperIdResponseWithDefaults instantiates a new ValidateShopperIdResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateShopperIdResponseWithDefaults() *ValidateShopperIdResponse {
	this := ValidateShopperIdResponse{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ValidateShopperIdResponse) GetReason() string {
	if o == nil || common.IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateShopperIdResponse) GetReasonOk() (*string, bool) {
	if o == nil || common.IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ValidateShopperIdResponse) HasReason() bool {
	if o != nil && !common.IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ValidateShopperIdResponse) SetReason(v string) {
	o.Reason = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *ValidateShopperIdResponse) GetResult() Result {
	if o == nil || common.IsNil(o.Result) {
		var ret Result
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateShopperIdResponse) GetResultOk() (*Result, bool) {
	if o == nil || common.IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *ValidateShopperIdResponse) HasResult() bool {
	if o != nil && !common.IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given Result and assigns it to the Result field.
func (o *ValidateShopperIdResponse) SetResult(v Result) {
	o.Result = &v
}

func (o ValidateShopperIdResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidateShopperIdResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !common.IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableValidateShopperIdResponse struct {
	value *ValidateShopperIdResponse
	isSet bool
}

func (v NullableValidateShopperIdResponse) Get() *ValidateShopperIdResponse {
	return v.value
}

func (v *NullableValidateShopperIdResponse) Set(val *ValidateShopperIdResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateShopperIdResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateShopperIdResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateShopperIdResponse(val *ValidateShopperIdResponse) *NullableValidateShopperIdResponse {
	return &NullableValidateShopperIdResponse{value: val, isSet: true}
}

func (v NullableValidateShopperIdResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateShopperIdResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
