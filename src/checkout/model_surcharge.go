/*
Adyen Checkout API

API version: 71
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v20/src/common"
)

// checks if the Surcharge type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &Surcharge{}

// Surcharge struct for Surcharge
type Surcharge struct {
	// The [surcharge](https://docs.adyen.com/online-payments/surcharge/) amount to apply to the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes). When you apply surcharge, include the surcharge in the `amount.value` field.  Review our [Surcharge compliance guide](https://docs.adyen.com/development-resources/surcharge-compliance/) to learn about how to comply with regulatory requirements when applying surcharge.
	Value int64 `json:"value"`
}

// NewSurcharge instantiates a new Surcharge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSurcharge(value int64) *Surcharge {
	this := Surcharge{}
	this.Value = value
	return &this
}

// NewSurchargeWithDefaults instantiates a new Surcharge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSurchargeWithDefaults() *Surcharge {
	this := Surcharge{}
	return &this
}

// GetValue returns the Value field value
func (o *Surcharge) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Surcharge) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Surcharge) SetValue(v int64) {
	o.Value = v
}

func (o Surcharge) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Surcharge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableSurcharge struct {
	value *Surcharge
	isSet bool
}

func (v NullableSurcharge) Get() *Surcharge {
	return v.value
}

func (v *NullableSurcharge) Set(val *Surcharge) {
	v.value = val
	v.isSet = true
}

func (v NullableSurcharge) IsSet() bool {
	return v.isSet
}

func (v *NullableSurcharge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSurcharge(val *Surcharge) *NullableSurcharge {
	return &NullableSurcharge{value: val, isSet: true}
}

func (v NullableSurcharge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSurcharge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
