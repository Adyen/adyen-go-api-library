/*
Adyen Checkout API

API version: 71
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package checkout

import (
	"encoding/json"

	"github.com/adyen/adyen-go-api-library/v8/src/common"
)

// checks if the ShopperInput type satisfies the MappedNullable interface at compile time
var _ common.MappedNullable = &ShopperInput{}

// ShopperInput struct for ShopperInput
type ShopperInput struct {
	// Specifies visibility of billing address fields.  Permitted values: * editable * hidden * readOnly
	BillingAddress *string `json:"billingAddress,omitempty"`
	// Specifies visibility of delivery address fields.  Permitted values: * editable * hidden * readOnly
	DeliveryAddress *string `json:"deliveryAddress,omitempty"`
	// Specifies visibility of personal details.  Permitted values: * editable * hidden * readOnly
	PersonalDetails *string `json:"personalDetails,omitempty"`
}

// NewShopperInput instantiates a new ShopperInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShopperInput() *ShopperInput {
	this := ShopperInput{}
	return &this
}

// NewShopperInputWithDefaults instantiates a new ShopperInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShopperInputWithDefaults() *ShopperInput {
	this := ShopperInput{}
	return &this
}

// GetBillingAddress returns the BillingAddress field value if set, zero value otherwise.
func (o *ShopperInput) GetBillingAddress() string {
	if o == nil || common.IsNil(o.BillingAddress) {
		var ret string
		return ret
	}
	return *o.BillingAddress
}

// GetBillingAddressOk returns a tuple with the BillingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopperInput) GetBillingAddressOk() (*string, bool) {
	if o == nil || common.IsNil(o.BillingAddress) {
		return nil, false
	}
	return o.BillingAddress, true
}

// HasBillingAddress returns a boolean if a field has been set.
func (o *ShopperInput) HasBillingAddress() bool {
	if o != nil && !common.IsNil(o.BillingAddress) {
		return true
	}

	return false
}

// SetBillingAddress gets a reference to the given string and assigns it to the BillingAddress field.
func (o *ShopperInput) SetBillingAddress(v string) {
	o.BillingAddress = &v
}

// GetDeliveryAddress returns the DeliveryAddress field value if set, zero value otherwise.
func (o *ShopperInput) GetDeliveryAddress() string {
	if o == nil || common.IsNil(o.DeliveryAddress) {
		var ret string
		return ret
	}
	return *o.DeliveryAddress
}

// GetDeliveryAddressOk returns a tuple with the DeliveryAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopperInput) GetDeliveryAddressOk() (*string, bool) {
	if o == nil || common.IsNil(o.DeliveryAddress) {
		return nil, false
	}
	return o.DeliveryAddress, true
}

// HasDeliveryAddress returns a boolean if a field has been set.
func (o *ShopperInput) HasDeliveryAddress() bool {
	if o != nil && !common.IsNil(o.DeliveryAddress) {
		return true
	}

	return false
}

// SetDeliveryAddress gets a reference to the given string and assigns it to the DeliveryAddress field.
func (o *ShopperInput) SetDeliveryAddress(v string) {
	o.DeliveryAddress = &v
}

// GetPersonalDetails returns the PersonalDetails field value if set, zero value otherwise.
func (o *ShopperInput) GetPersonalDetails() string {
	if o == nil || common.IsNil(o.PersonalDetails) {
		var ret string
		return ret
	}
	return *o.PersonalDetails
}

// GetPersonalDetailsOk returns a tuple with the PersonalDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopperInput) GetPersonalDetailsOk() (*string, bool) {
	if o == nil || common.IsNil(o.PersonalDetails) {
		return nil, false
	}
	return o.PersonalDetails, true
}

// HasPersonalDetails returns a boolean if a field has been set.
func (o *ShopperInput) HasPersonalDetails() bool {
	if o != nil && !common.IsNil(o.PersonalDetails) {
		return true
	}

	return false
}

// SetPersonalDetails gets a reference to the given string and assigns it to the PersonalDetails field.
func (o *ShopperInput) SetPersonalDetails(v string) {
	o.PersonalDetails = &v
}

func (o ShopperInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShopperInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !common.IsNil(o.BillingAddress) {
		toSerialize["billingAddress"] = o.BillingAddress
	}
	if !common.IsNil(o.DeliveryAddress) {
		toSerialize["deliveryAddress"] = o.DeliveryAddress
	}
	if !common.IsNil(o.PersonalDetails) {
		toSerialize["personalDetails"] = o.PersonalDetails
	}
	return toSerialize, nil
}

type NullableShopperInput struct {
	value *ShopperInput
	isSet bool
}

func (v NullableShopperInput) Get() *ShopperInput {
	return v.value
}

func (v *NullableShopperInput) Set(val *ShopperInput) {
	v.value = val
	v.isSet = true
}

func (v NullableShopperInput) IsSet() bool {
	return v.isSet
}

func (v *NullableShopperInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShopperInput(val *ShopperInput) *NullableShopperInput {
	return &NullableShopperInput{value: val, isSet: true}
}

func (v NullableShopperInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShopperInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func (o *ShopperInput) isValidBillingAddress() bool {
	var allowedEnumValues = []string{"editable", "hidden", "readOnly"}
	for _, allowed := range allowedEnumValues {
		if o.GetBillingAddress() == allowed {
			return true
		}
	}
	return false
}
func (o *ShopperInput) isValidDeliveryAddress() bool {
	var allowedEnumValues = []string{"editable", "hidden", "readOnly"}
	for _, allowed := range allowedEnumValues {
		if o.GetDeliveryAddress() == allowed {
			return true
		}
	}
	return false
}
func (o *ShopperInput) isValidPersonalDetails() bool {
	var allowedEnumValues = []string{"editable", "hidden", "readOnly"}
	for _, allowed := range allowedEnumValues {
		if o.GetPersonalDetails() == allowed {
			return true
		}
	}
	return false
}
