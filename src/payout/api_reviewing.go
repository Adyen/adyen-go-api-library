/*
Adyen Payout API

API version: 68
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package payout

import (
	"context"
	_nethttp "net/http"
	"net/url"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// ReviewingApi ReviewingApi service
type ReviewingApi common.Service

type ReviewingApiConfirmThirdPartyConfig struct {
	ctx           context.Context
	modifyRequest *ModifyRequest
}

func (r ReviewingApiConfirmThirdPartyConfig) ModifyRequest(modifyRequest ModifyRequest) ReviewingApiConfirmThirdPartyConfig {
	r.modifyRequest = &modifyRequest
	return r
}

/*
ConfirmThirdParty Confirm a payout

Confirms a previously submitted payout.

To cancel a payout, use the `/declineThirdParty` endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReviewingApiConfirmThirdPartyConfig
*/
func (a *ReviewingApi) ConfirmThirdPartyConfig(ctx context.Context) ReviewingApiConfirmThirdPartyConfig {
	return ReviewingApiConfirmThirdPartyConfig{
		ctx: ctx,
	}
}

/*
Confirm a payout
Confirms a previously submitted payout.  To cancel a payout, use the &#x60;/declineThirdParty&#x60; endpoint.
 * @param req ModifyRequest - reference of ModifyRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ModifyResponse
*/

func (a *ReviewingApi) ConfirmThirdParty(r ReviewingApiConfirmThirdPartyConfig) (ModifyResponse, *_nethttp.Response, error) {
	res := &ModifyResponse{}
	path := "/confirmThirdParty"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.modifyRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}

type ReviewingApiDeclineThirdPartyConfig struct {
	ctx           context.Context
	modifyRequest *ModifyRequest
}

func (r ReviewingApiDeclineThirdPartyConfig) ModifyRequest(modifyRequest ModifyRequest) ReviewingApiDeclineThirdPartyConfig {
	r.modifyRequest = &modifyRequest
	return r
}

/*
DeclineThirdParty Cancel a payout

Cancels a previously submitted payout.

To confirm and send a payout, use the `/confirmThirdParty` endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReviewingApiDeclineThirdPartyConfig
*/
func (a *ReviewingApi) DeclineThirdPartyConfig(ctx context.Context) ReviewingApiDeclineThirdPartyConfig {
	return ReviewingApiDeclineThirdPartyConfig{
		ctx: ctx,
	}
}

/*
Cancel a payout
Cancels a previously submitted payout.  To confirm and send a payout, use the &#x60;/confirmThirdParty&#x60; endpoint.
 * @param req ModifyRequest - reference of ModifyRequest).
 * @param ctxs ...context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ModifyResponse
*/

func (a *ReviewingApi) DeclineThirdParty(r ReviewingApiDeclineThirdPartyConfig) (ModifyResponse, *_nethttp.Response, error) {
	res := &ModifyResponse{}
	path := "/declineThirdParty"
	queryParams := url.Values{}
	headerParams := make(map[string]string)
	httpRes, err := common.SendAPIRequest(
		r.ctx,
		a.Client,
		r.modifyRequest,
		res,
		_nethttp.MethodPost,
		a.BasePath()+path,
		queryParams,
		headerParams,
	)

	return *res, httpRes, err
}
