/*
POS Terminal Management API

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package posterminalmanagement

import (
	"context"
	_context "context"
	_nethttp "net/http"

	"github.com/adyen/adyen-go-api-library/v6/src/common"
)

// GeneralApi GeneralApi service
type GeneralApi common.Service

type GeneralApiAssignTerminalsConfig struct {
	ctx                    context.Context
	assignTerminalsRequest *AssignTerminalsRequest
}

func (r GeneralApiAssignTerminalsConfig) AssignTerminalsRequest(assignTerminalsRequest AssignTerminalsRequest) GeneralApiAssignTerminalsConfig {
	r.assignTerminalsRequest = &assignTerminalsRequest
	return r
}

/*
AssignTerminals Assign terminals

Assigns one or more payment terminals to a merchant account or a store. You can also use this endpoint to reassign terminals between merchant accounts or stores, and to unassign a terminal and return it to company inventory.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GeneralApiAssignTerminalsConfig
*/
func (a *GeneralApi) AssignTerminalsConfig(ctx context.Context) GeneralApiAssignTerminalsConfig {
	return GeneralApiAssignTerminalsConfig{
		ctx: ctx,
	}
}

/*
Assign terminals
Assigns one or more payment terminals to a merchant account or a store. You can also use this endpoint to reassign terminals between merchant accounts or stores, and to unassign a terminal and return it to company inventory.
 * @param req AssignTerminalsRequest - reference of AssignTerminalsRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return AssignTerminalsResponse
*/

func (a *GeneralApi) AssignTerminals(r GeneralApiAssignTerminalsConfig) (AssignTerminalsResponse, *_nethttp.Response, error) {
	res := &AssignTerminalsResponse{}
	path := "/assignTerminals"
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodPost, r.assignTerminalsRequest, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type GeneralApiFindTerminalConfig struct {
	ctx                 context.Context
	findTerminalRequest *FindTerminalRequest
}

func (r GeneralApiFindTerminalConfig) FindTerminalRequest(findTerminalRequest FindTerminalRequest) GeneralApiFindTerminalConfig {
	r.findTerminalRequest = &findTerminalRequest
	return r
}

/*
FindTerminal Get the account or store of a terminal

Returns the company account, merchant account, or store that a payment terminal is assigned to.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GeneralApiFindTerminalConfig
*/
func (a *GeneralApi) FindTerminalConfig(ctx context.Context) GeneralApiFindTerminalConfig {
	return GeneralApiFindTerminalConfig{
		ctx: ctx,
	}
}

/*
Get the account or store of a terminal
Returns the company account, merchant account, or store that a payment terminal is assigned to.
 * @param req FindTerminalRequest - reference of FindTerminalRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return FindTerminalResponse
*/

func (a *GeneralApi) FindTerminal(r GeneralApiFindTerminalConfig) (FindTerminalResponse, *_nethttp.Response, error) {
	res := &FindTerminalResponse{}
	path := "/findTerminal"
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodPost, r.findTerminalRequest, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type GeneralApiGetStoresUnderAccountConfig struct {
	ctx                          context.Context
	getStoresUnderAccountRequest *GetStoresUnderAccountRequest
}

func (r GeneralApiGetStoresUnderAccountConfig) GetStoresUnderAccountRequest(getStoresUnderAccountRequest GetStoresUnderAccountRequest) GeneralApiGetStoresUnderAccountConfig {
	r.getStoresUnderAccountRequest = &getStoresUnderAccountRequest
	return r
}

/*
GetStoresUnderAccount Get the stores of an account

Returns a list of stores associated with a company account or a merchant account, including the status of each store.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GeneralApiGetStoresUnderAccountConfig
*/
func (a *GeneralApi) GetStoresUnderAccountConfig(ctx context.Context) GeneralApiGetStoresUnderAccountConfig {
	return GeneralApiGetStoresUnderAccountConfig{
		ctx: ctx,
	}
}

/*
Get the stores of an account
Returns a list of stores associated with a company account or a merchant account, including the status of each store.
 * @param req GetStoresUnderAccountRequest - reference of GetStoresUnderAccountRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return GetStoresUnderAccountResponse
*/

func (a *GeneralApi) GetStoresUnderAccount(r GeneralApiGetStoresUnderAccountConfig) (GetStoresUnderAccountResponse, *_nethttp.Response, error) {
	res := &GetStoresUnderAccountResponse{}
	path := "/getStoresUnderAccount"
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodPost, r.getStoresUnderAccountRequest, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type GeneralApiGetTerminalDetailsConfig struct {
	ctx                       context.Context
	getTerminalDetailsRequest *GetTerminalDetailsRequest
}

func (r GeneralApiGetTerminalDetailsConfig) GetTerminalDetailsRequest(getTerminalDetailsRequest GetTerminalDetailsRequest) GeneralApiGetTerminalDetailsConfig {
	r.getTerminalDetailsRequest = &getTerminalDetailsRequest
	return r
}

/*
GetTerminalDetails Get the details of a terminal

Returns the details of a payment terminal, including where the terminal is assigned to. The response returns the same details that are provided in the terminal list in your Customer Area and in the Terminal Fleet report.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GeneralApiGetTerminalDetailsConfig
*/
func (a *GeneralApi) GetTerminalDetailsConfig(ctx context.Context) GeneralApiGetTerminalDetailsConfig {
	return GeneralApiGetTerminalDetailsConfig{
		ctx: ctx,
	}
}

/*
Get the details of a terminal
Returns the details of a payment terminal, including where the terminal is assigned to. The response returns the same details that are provided in the terminal list in your Customer Area and in the Terminal Fleet report.
 * @param req GetTerminalDetailsRequest - reference of GetTerminalDetailsRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return GetTerminalDetailsResponse
*/

func (a *GeneralApi) GetTerminalDetails(r GeneralApiGetTerminalDetailsConfig) (GetTerminalDetailsResponse, *_nethttp.Response, error) {
	res := &GetTerminalDetailsResponse{}
	path := "/getTerminalDetails"
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodPost, r.getTerminalDetailsRequest, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type GeneralApiGetTerminalsUnderAccountConfig struct {
	ctx                             context.Context
	getTerminalsUnderAccountRequest *GetTerminalsUnderAccountRequest
}

func (r GeneralApiGetTerminalsUnderAccountConfig) GetTerminalsUnderAccountRequest(getTerminalsUnderAccountRequest GetTerminalsUnderAccountRequest) GeneralApiGetTerminalsUnderAccountConfig {
	r.getTerminalsUnderAccountRequest = &getTerminalsUnderAccountRequest
	return r
}

/*
GetTerminalsUnderAccount Get the list of terminals

Returns a list of payment terminals associated with a company account, merchant account, or store. The response shows whether the terminals are in the inventory, or in-store (ready for boarding or already boarded).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GeneralApiGetTerminalsUnderAccountConfig
*/
func (a *GeneralApi) GetTerminalsUnderAccountConfig(ctx context.Context) GeneralApiGetTerminalsUnderAccountConfig {
	return GeneralApiGetTerminalsUnderAccountConfig{
		ctx: ctx,
	}
}

/*
Get the list of terminals
Returns a list of payment terminals associated with a company account, merchant account, or store. The response shows whether the terminals are in the inventory, or in-store (ready for boarding or already boarded).
 * @param req GetTerminalsUnderAccountRequest - reference of GetTerminalsUnderAccountRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return GetTerminalsUnderAccountResponse
*/

func (a *GeneralApi) GetTerminalsUnderAccount(r GeneralApiGetTerminalsUnderAccountConfig) (GetTerminalsUnderAccountResponse, *_nethttp.Response, error) {
	res := &GetTerminalsUnderAccountResponse{}
	path := "/getTerminalsUnderAccount"
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodPost, r.getTerminalsUnderAccountRequest, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}
