/*
Legal Entity Management API

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package legalentity

import (
	"context"
	_context "context"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// DocumentsApi DocumentsApi service
type DocumentsApi common.Service

type DocumentsApiDeleteDocumentConfig struct {
	ctx context.Context
	id  string
}

/*
DeleteDocument Delete a document

Deletes a document.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of the document to be deleted.
 @return DocumentsApiDeleteDocumentConfig
*/
func (a *DocumentsApi) DeleteDocumentConfig(ctx context.Context, id string) DocumentsApiDeleteDocumentConfig {
	return DocumentsApiDeleteDocumentConfig{
		ctx: ctx,
		id:  id,
	}
}

/*
Delete a document
Deletes a document.
 * @param id The unique identifier of the document to be deleted.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return map[string]interface{}
*/

func (a *DocumentsApi) DeleteDocument(r DocumentsApiDeleteDocumentConfig) (map[string]interface{}, *_nethttp.Response, error) {
	res := &map[string]interface{}{}
	path := "/documents/{id}"
	path = strings.Replace(path, "{"+"id"+"}", url.PathEscape(common.ParameterValueToString(r.id, "id")), -1)
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodDelete, nil, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type DocumentsApiGetDocumentConfig struct {
	ctx context.Context
	id  string
}

/*
GetDocument Get a document

Returns a document.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of the document.
 @return DocumentsApiGetDocumentConfig
*/
func (a *DocumentsApi) GetDocumentConfig(ctx context.Context, id string) DocumentsApiGetDocumentConfig {
	return DocumentsApiGetDocumentConfig{
		ctx: ctx,
		id:  id,
	}
}

/*
Get a document
Returns a document.
 * @param id The unique identifier of the document.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return Document
*/

func (a *DocumentsApi) GetDocument(r DocumentsApiGetDocumentConfig) (Document, *_nethttp.Response, error) {
	res := &Document{}
	path := "/documents/{id}"
	path = strings.Replace(path, "{"+"id"+"}", url.PathEscape(common.ParameterValueToString(r.id, "id")), -1)
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodGet, nil, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type DocumentsApiUpdateDocumentConfig struct {
	ctx      context.Context
	id       string
	document *Document
}

func (r DocumentsApiUpdateDocumentConfig) Document(document Document) DocumentsApiUpdateDocumentConfig {
	r.document = &document
	return r
}

/*
UpdateDocument Update a document

Updates a document.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of the document to be updated.
 @return DocumentsApiUpdateDocumentConfig
*/
func (a *DocumentsApi) UpdateDocumentConfig(ctx context.Context, id string) DocumentsApiUpdateDocumentConfig {
	return DocumentsApiUpdateDocumentConfig{
		ctx: ctx,
		id:  id,
	}
}

/*
Update a document
Updates a document.
 * @param id The unique identifier of the document to be updated.
 * @param req Document - reference of Document).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return Document
*/

func (a *DocumentsApi) UpdateDocument(r DocumentsApiUpdateDocumentConfig) (Document, *_nethttp.Response, error) {
	res := &Document{}
	path := "/documents/{id}"
	path = strings.Replace(path, "{"+"id"+"}", url.PathEscape(common.ParameterValueToString(r.id, "id")), -1)
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodPatch, r.document, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type DocumentsApiUploadDocumentForVerificationChecksConfig struct {
	ctx      context.Context
	document *Document
}

func (r DocumentsApiUploadDocumentForVerificationChecksConfig) Document(document Document) DocumentsApiUploadDocumentForVerificationChecksConfig {
	r.document = &document
	return r
}

/*
UploadDocumentForVerificationChecks Upload a document for verification checks

Uploads a document for verification checks.

 Adyen uses the information from the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities) to run automated verification checks. If these checks fail, you will be notified to provide additional documents.

 You should only upload documents when Adyen requests additional information for the legal entity.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DocumentsApiUploadDocumentForVerificationChecksConfig
*/
func (a *DocumentsApi) UploadDocumentForVerificationChecksConfig(ctx context.Context) DocumentsApiUploadDocumentForVerificationChecksConfig {
	return DocumentsApiUploadDocumentForVerificationChecksConfig{
		ctx: ctx,
	}
}

/*
Upload a document for verification checks
Uploads a document for verification checks.   Adyen uses the information from the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities) to run automated verification checks. If these checks fail, you will be notified to provide additional documents.   You should only upload documents when Adyen requests additional information for the legal entity.
 * @param req Document - reference of Document).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return Document
*/

func (a *DocumentsApi) UploadDocumentForVerificationChecks(r DocumentsApiUploadDocumentForVerificationChecksConfig) (Document, *_nethttp.Response, error) {
	res := &Document{}
	path := "/documents"
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodPost, r.document, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}
