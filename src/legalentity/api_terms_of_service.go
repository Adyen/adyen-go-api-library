/*
Legal Entity Management API

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package legalentity

import (
	"context"
	_context "context"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v6/src/common"
)

// TermsOfServiceApi TermsOfServiceApi service
type TermsOfServiceApi common.Service

type TermsOfServiceApiAcceptTermsOfServiceConfig struct {
	ctx                         context.Context
	id                          string
	termsofservicedocumentid    string
	acceptTermsOfServiceRequest *AcceptTermsOfServiceRequest
}

func (r TermsOfServiceApiAcceptTermsOfServiceConfig) AcceptTermsOfServiceRequest(acceptTermsOfServiceRequest AcceptTermsOfServiceRequest) TermsOfServiceApiAcceptTermsOfServiceConfig {
	r.acceptTermsOfServiceRequest = &acceptTermsOfServiceRequest
	return r
}

/*
AcceptTermsOfService Accept Terms of Service

Accepts Terms of Service.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of the legal entity.
 @param termsofservicedocumentid The unique identifier of the Terms of Service document.
 @return TermsOfServiceApiAcceptTermsOfServiceConfig
*/
func (a *TermsOfServiceApi) AcceptTermsOfServiceConfig(ctx context.Context, id string, termsofservicedocumentid string) TermsOfServiceApiAcceptTermsOfServiceConfig {
	return TermsOfServiceApiAcceptTermsOfServiceConfig{
		ctx:                      ctx,
		id:                       id,
		termsofservicedocumentid: termsofservicedocumentid,
	}
}

/*
Accept Terms of Service
Accepts Terms of Service.
 * @param id The unique identifier of the legal entity.
 * @param termsofservicedocumentid The unique identifier of the Terms of Service document.
 * @param req AcceptTermsOfServiceRequest - reference of AcceptTermsOfServiceRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return AcceptTermsOfServiceResponse
*/

func (a *TermsOfServiceApi) AcceptTermsOfService(r TermsOfServiceApiAcceptTermsOfServiceConfig) (AcceptTermsOfServiceResponse, *_nethttp.Response, error) {
	res := &AcceptTermsOfServiceResponse{}
	path := "/legalEntities/{id}/termsOfService/{termsofservicedocumentid}"
	path = strings.Replace(path, "{"+"id"+"}", url.PathEscape(common.ParameterValueToString(r.id, "id")), -1)
	path = strings.Replace(path, "{"+"termsofservicedocumentid"+"}", url.PathEscape(common.ParameterValueToString(r.termsofservicedocumentid, "termsofservicedocumentid")), -1)
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodPatch, r.acceptTermsOfServiceRequest, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type TermsOfServiceApiGetTermsOfServiceDocumentConfig struct {
	ctx                              context.Context
	id                               string
	getTermsOfServiceDocumentRequest *GetTermsOfServiceDocumentRequest
}

func (r TermsOfServiceApiGetTermsOfServiceDocumentConfig) GetTermsOfServiceDocumentRequest(getTermsOfServiceDocumentRequest GetTermsOfServiceDocumentRequest) TermsOfServiceApiGetTermsOfServiceDocumentConfig {
	r.getTermsOfServiceDocumentRequest = &getTermsOfServiceDocumentRequest
	return r
}

/*
GetTermsOfServiceDocument Get Terms of Service document

Returns the Terms of Service document for a legal entity.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of the legal entity.
 @return TermsOfServiceApiGetTermsOfServiceDocumentConfig
*/
func (a *TermsOfServiceApi) GetTermsOfServiceDocumentConfig(ctx context.Context, id string) TermsOfServiceApiGetTermsOfServiceDocumentConfig {
	return TermsOfServiceApiGetTermsOfServiceDocumentConfig{
		ctx: ctx,
		id:  id,
	}
}

/*
Get Terms of Service document
Returns the Terms of Service document for a legal entity.
 * @param id The unique identifier of the legal entity.
 * @param req GetTermsOfServiceDocumentRequest - reference of GetTermsOfServiceDocumentRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return GetTermsOfServiceDocumentResponse
*/

func (a *TermsOfServiceApi) GetTermsOfServiceDocument(r TermsOfServiceApiGetTermsOfServiceDocumentConfig) (GetTermsOfServiceDocumentResponse, *_nethttp.Response, error) {
	res := &GetTermsOfServiceDocumentResponse{}
	path := "/legalEntities/{id}/termsOfService"
	path = strings.Replace(path, "{"+"id"+"}", url.PathEscape(common.ParameterValueToString(r.id, "id")), -1)
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodPost, r.getTermsOfServiceDocumentRequest, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type TermsOfServiceApiGetTermsOfServiceInformationForLegalEntityConfig struct {
	ctx context.Context
	id  string
}

/*
GetTermsOfServiceInformationForLegalEntity Get Terms of Service information for a legal entity

Returns Terms of Service information for a legal entity.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of the legal entity.
 @return TermsOfServiceApiGetTermsOfServiceInformationForLegalEntityConfig
*/
func (a *TermsOfServiceApi) GetTermsOfServiceInformationForLegalEntityConfig(ctx context.Context, id string) TermsOfServiceApiGetTermsOfServiceInformationForLegalEntityConfig {
	return TermsOfServiceApiGetTermsOfServiceInformationForLegalEntityConfig{
		ctx: ctx,
		id:  id,
	}
}

/*
Get Terms of Service information for a legal entity
Returns Terms of Service information for a legal entity.
 * @param id The unique identifier of the legal entity.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return GetTermsOfServiceAcceptanceInfosResponse
*/

func (a *TermsOfServiceApi) GetTermsOfServiceInformationForLegalEntity(r TermsOfServiceApiGetTermsOfServiceInformationForLegalEntityConfig) (GetTermsOfServiceAcceptanceInfosResponse, *_nethttp.Response, error) {
	res := &GetTermsOfServiceAcceptanceInfosResponse{}
	path := "/legalEntities/{id}/termsOfServiceAcceptanceInfos"
	path = strings.Replace(path, "{"+"id"+"}", url.PathEscape(common.ParameterValueToString(r.id, "id")), -1)
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodGet, nil, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}
