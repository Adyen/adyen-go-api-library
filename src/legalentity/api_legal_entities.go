/*
Legal Entity Management API

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package legalentity

import (
	"context"
	_context "context"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v7/src/common"
)

// LegalEntitiesApi LegalEntitiesApi service
type LegalEntitiesApi common.Service

type LegalEntitiesApiCheckLegalEntitysVerificationErrorsConfig struct {
	ctx context.Context
	id  string
}

/*
CheckLegalEntitysVerificationErrors Check a legal entity's verification errors

Returns the verification errors for a legal entity and its supporting entities.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of the legal entity.
 @return LegalEntitiesApiCheckLegalEntitysVerificationErrorsConfig
*/
func (a *LegalEntitiesApi) CheckLegalEntitysVerificationErrorsConfig(ctx context.Context, id string) LegalEntitiesApiCheckLegalEntitysVerificationErrorsConfig {
	return LegalEntitiesApiCheckLegalEntitysVerificationErrorsConfig{
		ctx: ctx,
		id:  id,
	}
}

/*
Check a legal entity's verification errors
Returns the verification errors for a legal entity and its supporting entities.
 * @param id The unique identifier of the legal entity.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return VerificationErrors
*/

func (a *LegalEntitiesApi) CheckLegalEntitysVerificationErrors(r LegalEntitiesApiCheckLegalEntitysVerificationErrorsConfig) (VerificationErrors, *_nethttp.Response, error) {
	res := &VerificationErrors{}
	path := "/legalEntities/{id}/checkVerificationErrors"
	path = strings.Replace(path, "{"+"id"+"}", url.PathEscape(common.ParameterValueToString(r.id, "id")), -1)
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodPost, nil, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type LegalEntitiesApiCreateLegalEntityConfig struct {
	ctx                         context.Context
	legalEntityInfoRequiredType *LegalEntityInfoRequiredType
}

func (r LegalEntitiesApiCreateLegalEntityConfig) LegalEntityInfoRequiredType(legalEntityInfoRequiredType LegalEntityInfoRequiredType) LegalEntitiesApiCreateLegalEntityConfig {
	r.legalEntityInfoRequiredType = &legalEntityInfoRequiredType
	return r
}

/*
CreateLegalEntity Create a legal entity

Creates a legal entity.

This resource contains information about the user that will be onboarded in your platform. Adyen uses this information to perform verification checks as required by payment industry regulations. Adyen informs you of the verification results through webhooks or API responses.



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LegalEntitiesApiCreateLegalEntityConfig
*/
func (a *LegalEntitiesApi) CreateLegalEntityConfig(ctx context.Context) LegalEntitiesApiCreateLegalEntityConfig {
	return LegalEntitiesApiCreateLegalEntityConfig{
		ctx: ctx,
	}
}

/*
Create a legal entity
Creates a legal entity.   This resource contains information about the user that will be onboarded in your platform. Adyen uses this information to perform verification checks as required by payment industry regulations. Adyen informs you of the verification results through webhooks or API responses.
 * @param req LegalEntityInfoRequiredType - reference of LegalEntityInfoRequiredType).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return LegalEntity
*/

func (a *LegalEntitiesApi) CreateLegalEntity(r LegalEntitiesApiCreateLegalEntityConfig) (LegalEntity, *_nethttp.Response, error) {
	res := &LegalEntity{}
	path := "/legalEntities"
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodPost, r.legalEntityInfoRequiredType, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type LegalEntitiesApiGetAllBusinessLinesUnderLegalEntityConfig struct {
	ctx context.Context
	id  string
}

/*
GetAllBusinessLinesUnderLegalEntity Get all business lines under a legal entity

Returns the business lines owned by a legal entity.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of the legal entity.
 @return LegalEntitiesApiGetAllBusinessLinesUnderLegalEntityConfig
*/
func (a *LegalEntitiesApi) GetAllBusinessLinesUnderLegalEntityConfig(ctx context.Context, id string) LegalEntitiesApiGetAllBusinessLinesUnderLegalEntityConfig {
	return LegalEntitiesApiGetAllBusinessLinesUnderLegalEntityConfig{
		ctx: ctx,
		id:  id,
	}
}

/*
Get all business lines under a legal entity
Returns the business lines owned by a legal entity.
 * @param id The unique identifier of the legal entity.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return BusinessLines
*/

func (a *LegalEntitiesApi) GetAllBusinessLinesUnderLegalEntity(r LegalEntitiesApiGetAllBusinessLinesUnderLegalEntityConfig) (BusinessLines, *_nethttp.Response, error) {
	res := &BusinessLines{}
	path := "/legalEntities/{id}/businessLines"
	path = strings.Replace(path, "{"+"id"+"}", url.PathEscape(common.ParameterValueToString(r.id, "id")), -1)
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodGet, nil, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type LegalEntitiesApiGetLegalEntityConfig struct {
	ctx context.Context
	id  string
}

/*
GetLegalEntity Get a legal entity

Returns a legal entity.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of the legal entity.
 @return LegalEntitiesApiGetLegalEntityConfig
*/
func (a *LegalEntitiesApi) GetLegalEntityConfig(ctx context.Context, id string) LegalEntitiesApiGetLegalEntityConfig {
	return LegalEntitiesApiGetLegalEntityConfig{
		ctx: ctx,
		id:  id,
	}
}

/*
Get a legal entity
Returns a legal entity.
 * @param id The unique identifier of the legal entity.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return LegalEntity
*/

func (a *LegalEntitiesApi) GetLegalEntity(r LegalEntitiesApiGetLegalEntityConfig) (LegalEntity, *_nethttp.Response, error) {
	res := &LegalEntity{}
	path := "/legalEntities/{id}"
	path = strings.Replace(path, "{"+"id"+"}", url.PathEscape(common.ParameterValueToString(r.id, "id")), -1)
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodGet, nil, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type LegalEntitiesApiUpdateLegalEntityConfig struct {
	ctx             context.Context
	id              string
	legalEntityInfo *LegalEntityInfo
}

func (r LegalEntitiesApiUpdateLegalEntityConfig) LegalEntityInfo(legalEntityInfo LegalEntityInfo) LegalEntitiesApiUpdateLegalEntityConfig {
	r.legalEntityInfo = &legalEntityInfo
	return r
}

/*
UpdateLegalEntity Update a legal entity

Updates a legal entity.

 >To change the legal entity type, include only the new `type` in your request. To update the `entityAssociations` array, you need to replace the entire array. For example, if the array has 3 entries and you want to remove 1 entry, you need to PATCH the resource with the remaining 2 entries.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of the legal entity.
 @return LegalEntitiesApiUpdateLegalEntityConfig
*/
func (a *LegalEntitiesApi) UpdateLegalEntityConfig(ctx context.Context, id string) LegalEntitiesApiUpdateLegalEntityConfig {
	return LegalEntitiesApiUpdateLegalEntityConfig{
		ctx: ctx,
		id:  id,
	}
}

/*
Update a legal entity
Updates a legal entity.   &gt;To change the legal entity type, include only the new &#x60;type&#x60; in your request. To update the &#x60;entityAssociations&#x60; array, you need to replace the entire array. For example, if the array has 3 entries and you want to remove 1 entry, you need to PATCH the resource with the remaining 2 entries.
 * @param id The unique identifier of the legal entity.
 * @param req LegalEntityInfo - reference of LegalEntityInfo).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return LegalEntity
*/

func (a *LegalEntitiesApi) UpdateLegalEntity(r LegalEntitiesApiUpdateLegalEntityConfig) (LegalEntity, *_nethttp.Response, error) {
	res := &LegalEntity{}
	path := "/legalEntities/{id}"
	path = strings.Replace(path, "{"+"id"+"}", url.PathEscape(common.ParameterValueToString(r.id, "id")), -1)
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodPatch, r.legalEntityInfo, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}
