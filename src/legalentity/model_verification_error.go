/*
Legal Entity Management API

The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication To connect to the Legal Entity Management API, you must use the basic authentication credentials of your web service user. If you don't have one, contact the [Adyen Support Team](https://www.adyen.help/hc/en-us/requests/new). Use the web service user credentials to authenticate your request, for example:  ``` curl -U \"ws12345@Scope.BalancePlatform_YourBalancePlatform\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Legal Entity Management API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  

API version: 2
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package legalentity

import (
	"encoding/json"
)

// checks if the VerificationError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerificationError{}

// VerificationError struct for VerificationError
type VerificationError struct {
	Capabilities []string `json:"capabilities,omitempty"`
	Code *string `json:"code,omitempty"`
	Entity *CapabilityProblemEntity `json:"entity,omitempty"`
	Message *string `json:"message,omitempty"`
	RemediatingActions []RemediatingAction `json:"remediatingActions,omitempty"`
	SubErrors []VerificationErrorRecursive `json:"subErrors,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewVerificationError instantiates a new VerificationError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerificationError() *VerificationError {
	this := VerificationError{}
	return &this
}

// NewVerificationErrorWithDefaults instantiates a new VerificationError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerificationErrorWithDefaults() *VerificationError {
	this := VerificationError{}
	return &this
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *VerificationError) GetCapabilities() []string {
	if o == nil || IsNil(o.Capabilities) {
		var ret []string
		return ret
	}
	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationError) GetCapabilitiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Capabilities) {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *VerificationError) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given []string and assigns it to the Capabilities field.
func (o *VerificationError) SetCapabilities(v []string) {
	o.Capabilities = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *VerificationError) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationError) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *VerificationError) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *VerificationError) SetCode(v string) {
	o.Code = &v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *VerificationError) GetEntity() CapabilityProblemEntity {
	if o == nil || IsNil(o.Entity) {
		var ret CapabilityProblemEntity
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationError) GetEntityOk() (*CapabilityProblemEntity, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *VerificationError) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given CapabilityProblemEntity and assigns it to the Entity field.
func (o *VerificationError) SetEntity(v CapabilityProblemEntity) {
	o.Entity = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *VerificationError) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationError) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *VerificationError) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *VerificationError) SetMessage(v string) {
	o.Message = &v
}

// GetRemediatingActions returns the RemediatingActions field value if set, zero value otherwise.
func (o *VerificationError) GetRemediatingActions() []RemediatingAction {
	if o == nil || IsNil(o.RemediatingActions) {
		var ret []RemediatingAction
		return ret
	}
	return o.RemediatingActions
}

// GetRemediatingActionsOk returns a tuple with the RemediatingActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationError) GetRemediatingActionsOk() ([]RemediatingAction, bool) {
	if o == nil || IsNil(o.RemediatingActions) {
		return nil, false
	}
	return o.RemediatingActions, true
}

// HasRemediatingActions returns a boolean if a field has been set.
func (o *VerificationError) HasRemediatingActions() bool {
	if o != nil && !IsNil(o.RemediatingActions) {
		return true
	}

	return false
}

// SetRemediatingActions gets a reference to the given []RemediatingAction and assigns it to the RemediatingActions field.
func (o *VerificationError) SetRemediatingActions(v []RemediatingAction) {
	o.RemediatingActions = v
}

// GetSubErrors returns the SubErrors field value if set, zero value otherwise.
func (o *VerificationError) GetSubErrors() []VerificationErrorRecursive {
	if o == nil || IsNil(o.SubErrors) {
		var ret []VerificationErrorRecursive
		return ret
	}
	return o.SubErrors
}

// GetSubErrorsOk returns a tuple with the SubErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationError) GetSubErrorsOk() ([]VerificationErrorRecursive, bool) {
	if o == nil || IsNil(o.SubErrors) {
		return nil, false
	}
	return o.SubErrors, true
}

// HasSubErrors returns a boolean if a field has been set.
func (o *VerificationError) HasSubErrors() bool {
	if o != nil && !IsNil(o.SubErrors) {
		return true
	}

	return false
}

// SetSubErrors gets a reference to the given []VerificationErrorRecursive and assigns it to the SubErrors field.
func (o *VerificationError) SetSubErrors(v []VerificationErrorRecursive) {
	o.SubErrors = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VerificationError) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationError) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VerificationError) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VerificationError) SetType(v string) {
	o.Type = &v
}

func (o VerificationError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerificationError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Capabilities) {
		toSerialize["capabilities"] = o.Capabilities
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.RemediatingActions) {
		toSerialize["remediatingActions"] = o.RemediatingActions
	}
	if !IsNil(o.SubErrors) {
		toSerialize["subErrors"] = o.SubErrors
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableVerificationError struct {
	value *VerificationError
	isSet bool
}

func (v NullableVerificationError) Get() *VerificationError {
	return v.value
}

func (v *NullableVerificationError) Set(val *VerificationError) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationError) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationError(val *VerificationError) *NullableVerificationError {
	return &NullableVerificationError{value: val, isSet: true}
}

func (v NullableVerificationError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


