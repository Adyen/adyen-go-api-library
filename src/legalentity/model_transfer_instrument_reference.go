/*
Legal Entity Management API

The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication To connect to the Legal Entity Management API, you must use the basic authentication credentials of your web service user. If you don't have one, contact the [Adyen Support Team](https://www.adyen.help/hc/en-us/requests/new). Use the web service user credentials to authenticate your request, for example:  ``` curl -U \"ws12345@Scope.BalancePlatform_YourBalancePlatform\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Legal Entity Management API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  

API version: 2
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package legalentity

import (
	"encoding/json"
)

// checks if the TransferInstrumentReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransferInstrumentReference{}

// TransferInstrumentReference struct for TransferInstrumentReference
type TransferInstrumentReference struct {
	// The masked IBAN or bank account number.
	AccountIdentifier string `json:"accountIdentifier"`
	// The unique identifier of the resource.
	Id string `json:"id"`
}

// NewTransferInstrumentReference instantiates a new TransferInstrumentReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferInstrumentReference(accountIdentifier string, id string) *TransferInstrumentReference {
	this := TransferInstrumentReference{}
	this.AccountIdentifier = accountIdentifier
	this.Id = id
	return &this
}

// NewTransferInstrumentReferenceWithDefaults instantiates a new TransferInstrumentReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferInstrumentReferenceWithDefaults() *TransferInstrumentReference {
	this := TransferInstrumentReference{}
	return &this
}

// GetAccountIdentifier returns the AccountIdentifier field value
func (o *TransferInstrumentReference) GetAccountIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountIdentifier
}

// GetAccountIdentifierOk returns a tuple with the AccountIdentifier field value
// and a boolean to check if the value has been set.
func (o *TransferInstrumentReference) GetAccountIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountIdentifier, true
}

// SetAccountIdentifier sets field value
func (o *TransferInstrumentReference) SetAccountIdentifier(v string) {
	o.AccountIdentifier = v
}

// GetId returns the Id field value
func (o *TransferInstrumentReference) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TransferInstrumentReference) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TransferInstrumentReference) SetId(v string) {
	o.Id = v
}

func (o TransferInstrumentReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferInstrumentReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountIdentifier"] = o.AccountIdentifier
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

type NullableTransferInstrumentReference struct {
	value *TransferInstrumentReference
	isSet bool
}

func (v NullableTransferInstrumentReference) Get() *TransferInstrumentReference {
	return v.value
}

func (v *NullableTransferInstrumentReference) Set(val *TransferInstrumentReference) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferInstrumentReference) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferInstrumentReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferInstrumentReference(val *TransferInstrumentReference) *NullableTransferInstrumentReference {
	return &NullableTransferInstrumentReference{value: val, isSet: true}
}

func (v NullableTransferInstrumentReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferInstrumentReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


