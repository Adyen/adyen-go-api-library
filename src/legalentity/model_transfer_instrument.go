/*
Legal Entity Management API

The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication To connect to the Legal Entity Management API, you must use the basic authentication credentials of your web service user. If you don't have one, contact the [Adyen Support Team](https://www.adyen.help/hc/en-us/requests/new). Use the web service user credentials to authenticate your request, for example:  ``` curl -U \"ws12345@Scope.BalancePlatform_YourBalancePlatform\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Legal Entity Management API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  

API version: 2
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package legalentity

import (
	"encoding/json"
)

// checks if the TransferInstrument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransferInstrument{}

// TransferInstrument struct for TransferInstrument
type TransferInstrument struct {
	BankAccount BankAccountInfo `json:"bankAccount"`
	// List of documents uploaded for the transfer instrument.
	DocumentDetails []DocumentReference `json:"documentDetails,omitempty"`
	// The unique identifier of the transfer instrument.
	Id string `json:"id"`
	// The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) that owns the transfer instrument.
	LegalEntityId string `json:"legalEntityId"`
	// The type of transfer instrument.  Possible value: **bankAccount**.
	Type string `json:"type"`
}

// NewTransferInstrument instantiates a new TransferInstrument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferInstrument(bankAccount BankAccountInfo, id string, legalEntityId string, type_ string) *TransferInstrument {
	this := TransferInstrument{}
	this.BankAccount = bankAccount
	this.Id = id
	this.LegalEntityId = legalEntityId
	this.Type = type_
	return &this
}

// NewTransferInstrumentWithDefaults instantiates a new TransferInstrument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferInstrumentWithDefaults() *TransferInstrument {
	this := TransferInstrument{}
	return &this
}

// GetBankAccount returns the BankAccount field value
func (o *TransferInstrument) GetBankAccount() BankAccountInfo {
	if o == nil {
		var ret BankAccountInfo
		return ret
	}

	return o.BankAccount
}

// GetBankAccountOk returns a tuple with the BankAccount field value
// and a boolean to check if the value has been set.
func (o *TransferInstrument) GetBankAccountOk() (*BankAccountInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BankAccount, true
}

// SetBankAccount sets field value
func (o *TransferInstrument) SetBankAccount(v BankAccountInfo) {
	o.BankAccount = v
}

// GetDocumentDetails returns the DocumentDetails field value if set, zero value otherwise.
func (o *TransferInstrument) GetDocumentDetails() []DocumentReference {
	if o == nil || IsNil(o.DocumentDetails) {
		var ret []DocumentReference
		return ret
	}
	return o.DocumentDetails
}

// GetDocumentDetailsOk returns a tuple with the DocumentDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferInstrument) GetDocumentDetailsOk() ([]DocumentReference, bool) {
	if o == nil || IsNil(o.DocumentDetails) {
		return nil, false
	}
	return o.DocumentDetails, true
}

// HasDocumentDetails returns a boolean if a field has been set.
func (o *TransferInstrument) HasDocumentDetails() bool {
	if o != nil && !IsNil(o.DocumentDetails) {
		return true
	}

	return false
}

// SetDocumentDetails gets a reference to the given []DocumentReference and assigns it to the DocumentDetails field.
func (o *TransferInstrument) SetDocumentDetails(v []DocumentReference) {
	o.DocumentDetails = v
}

// GetId returns the Id field value
func (o *TransferInstrument) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TransferInstrument) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TransferInstrument) SetId(v string) {
	o.Id = v
}

// GetLegalEntityId returns the LegalEntityId field value
func (o *TransferInstrument) GetLegalEntityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LegalEntityId
}

// GetLegalEntityIdOk returns a tuple with the LegalEntityId field value
// and a boolean to check if the value has been set.
func (o *TransferInstrument) GetLegalEntityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LegalEntityId, true
}

// SetLegalEntityId sets field value
func (o *TransferInstrument) SetLegalEntityId(v string) {
	o.LegalEntityId = v
}

// GetType returns the Type field value
func (o *TransferInstrument) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TransferInstrument) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TransferInstrument) SetType(v string) {
	o.Type = v
}

func (o TransferInstrument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferInstrument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bankAccount"] = o.BankAccount
	if !IsNil(o.DocumentDetails) {
		toSerialize["documentDetails"] = o.DocumentDetails
	}
	// skip: id is readOnly
	toSerialize["legalEntityId"] = o.LegalEntityId
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableTransferInstrument struct {
	value *TransferInstrument
	isSet bool
}

func (v NullableTransferInstrument) Get() *TransferInstrument {
	return v.value
}

func (v *NullableTransferInstrument) Set(val *TransferInstrument) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferInstrument) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferInstrument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferInstrument(val *TransferInstrument) *NullableTransferInstrument {
	return &NullableTransferInstrument{value: val, isSet: true}
}

func (v NullableTransferInstrument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferInstrument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


