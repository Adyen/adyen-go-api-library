/*
Legal Entity Management API

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package legalentity

import (
	"context"
	_context "context"
	_nethttp "net/http"
	"net/url"
	"strings"

	"github.com/adyen/adyen-go-api-library/v6/src/common"
)

// TransferInstrumentsApi TransferInstrumentsApi service
type TransferInstrumentsApi common.Service

type TransferInstrumentsApiCreateTransferInstrumentConfig struct {
	ctx                    context.Context
	transferInstrumentInfo *TransferInstrumentInfo
}

func (r TransferInstrumentsApiCreateTransferInstrumentConfig) TransferInstrumentInfo(transferInstrumentInfo TransferInstrumentInfo) TransferInstrumentsApiCreateTransferInstrumentConfig {
	r.transferInstrumentInfo = &transferInstrumentInfo
	return r
}

/*
CreateTransferInstrument Create a transfer instrument

Creates a transfer instrument.

A transfer instrument is a bank account that a legal entity owns. Adyen performs verification checks on the transfer instrument as required by payment industry regulations. We inform you of the verification results through webhooks or API responses.

When the transfer instrument passes the verification checks, you can start sending funds from the balance platform to the transfer instrument (such as payouts).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return TransferInstrumentsApiCreateTransferInstrumentConfig
*/
func (a *TransferInstrumentsApi) CreateTransferInstrumentConfig(ctx context.Context) TransferInstrumentsApiCreateTransferInstrumentConfig {
	return TransferInstrumentsApiCreateTransferInstrumentConfig{
		ctx: ctx,
	}
}

/*
Create a transfer instrument
Creates a transfer instrument.   A transfer instrument is a bank account that a legal entity owns. Adyen performs verification checks on the transfer instrument as required by payment industry regulations. We inform you of the verification results through webhooks or API responses.  When the transfer instrument passes the verification checks, you can start sending funds from the balance platform to the transfer instrument (such as payouts).
 * @param req TransferInstrumentInfo - reference of TransferInstrumentInfo).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return TransferInstrument
*/

func (a *TransferInstrumentsApi) CreateTransferInstrument(r TransferInstrumentsApiCreateTransferInstrumentConfig) (TransferInstrument, *_nethttp.Response, error) {
	res := &TransferInstrument{}
	path := "/transferInstruments"
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodPost, r.transferInstrumentInfo, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type TransferInstrumentsApiDeleteTransferInstrumentConfig struct {
	ctx context.Context
	id  string
}

/*
DeleteTransferInstrument Delete a transfer instrument

Deletes a transfer instrument.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of the transfer instrument to be deleted.
 @return TransferInstrumentsApiDeleteTransferInstrumentConfig
*/
func (a *TransferInstrumentsApi) DeleteTransferInstrumentConfig(ctx context.Context, id string) TransferInstrumentsApiDeleteTransferInstrumentConfig {
	return TransferInstrumentsApiDeleteTransferInstrumentConfig{
		ctx: ctx,
		id:  id,
	}
}

/*
Delete a transfer instrument
Deletes a transfer instrument.
 * @param id The unique identifier of the transfer instrument to be deleted.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
*/

func (a *TransferInstrumentsApi) DeleteTransferInstrument(r TransferInstrumentsApiDeleteTransferInstrumentConfig) (*_nethttp.Response, error) {
	var res interface{}
	path := "/transferInstruments/{id}"
	path = strings.Replace(path, "{"+"id"+"}", url.PathEscape(common.ParameterValueToString(r.id, "id")), -1)
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodDelete, nil, res, a.BasePath()+path, []_context.Context{r.ctx})
	return httpRes, err
}

type TransferInstrumentsApiGetTransferInstrumentConfig struct {
	ctx context.Context
	id  string
}

/*
GetTransferInstrument Get a transfer instrument

Returns the details of a transfer instrument.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of the transfer instrument.
 @return TransferInstrumentsApiGetTransferInstrumentConfig
*/
func (a *TransferInstrumentsApi) GetTransferInstrumentConfig(ctx context.Context, id string) TransferInstrumentsApiGetTransferInstrumentConfig {
	return TransferInstrumentsApiGetTransferInstrumentConfig{
		ctx: ctx,
		id:  id,
	}
}

/*
Get a transfer instrument
Returns the details of a transfer instrument.
 * @param id The unique identifier of the transfer instrument.
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return TransferInstrument
*/

func (a *TransferInstrumentsApi) GetTransferInstrument(r TransferInstrumentsApiGetTransferInstrumentConfig) (TransferInstrument, *_nethttp.Response, error) {
	res := &TransferInstrument{}
	path := "/transferInstruments/{id}"
	path = strings.Replace(path, "{"+"id"+"}", url.PathEscape(common.ParameterValueToString(r.id, "id")), -1)
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodGet, nil, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}

type TransferInstrumentsApiUpdateTransferInstrumentConfig struct {
	ctx                    context.Context
	id                     string
	transferInstrumentInfo *TransferInstrumentInfo
}

func (r TransferInstrumentsApiUpdateTransferInstrumentConfig) TransferInstrumentInfo(transferInstrumentInfo TransferInstrumentInfo) TransferInstrumentsApiUpdateTransferInstrumentConfig {
	r.transferInstrumentInfo = &transferInstrumentInfo
	return r
}

/*
UpdateTransferInstrument Update a transfer instrument

Updates a transfer instrument.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier of the transfer instrument.
 @return TransferInstrumentsApiUpdateTransferInstrumentConfig
*/
func (a *TransferInstrumentsApi) UpdateTransferInstrumentConfig(ctx context.Context, id string) TransferInstrumentsApiUpdateTransferInstrumentConfig {
	return TransferInstrumentsApiUpdateTransferInstrumentConfig{
		ctx: ctx,
		id:  id,
	}
}

/*
Update a transfer instrument
Updates a transfer instrument.
 * @param id The unique identifier of the transfer instrument.
 * @param req TransferInstrumentInfo - reference of TransferInstrumentInfo).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return TransferInstrument
*/

func (a *TransferInstrumentsApi) UpdateTransferInstrument(r TransferInstrumentsApiUpdateTransferInstrumentConfig) (TransferInstrument, *_nethttp.Response, error) {
	res := &TransferInstrument{}
	path := "/transferInstruments/{id}"
	path = strings.Replace(path, "{"+"id"+"}", url.PathEscape(common.ParameterValueToString(r.id, "id")), -1)
	httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.MethodPatch, r.transferInstrumentInfo, res, a.BasePath()+path, []_context.Context{r.ctx})
	return *res, httpRes, err
}
