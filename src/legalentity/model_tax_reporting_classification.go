/*
Legal Entity Management API

The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication To connect to the Legal Entity Management API, you must use the basic authentication credentials of your web service user. If you don't have one, contact the [Adyen Support Team](https://www.adyen.help/hc/en-us/requests/new). Use the web service user credentials to authenticate your request, for example:  ``` curl -U \"ws12345@Scope.BalancePlatform_YourBalancePlatform\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Legal Entity Management API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  

API version: 2
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package legalentity

import (
	"encoding/json"
)

// checks if the TaxReportingClassification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxReportingClassification{}

// TaxReportingClassification struct for TaxReportingClassification
type TaxReportingClassification struct {
	// The organization's business type.  Possible values: **other**, **listedPublicCompany**, **subsidiaryOfListedPublicCompany**, **governmentalOrganization**, **internationalOrganization**, **financialInstitution**.
	BusinessType *string `json:"businessType,omitempty"`
	// The Global Intermediary Identification Number (GIIN) required for FATCA.
	FinancialInstitutionNumber *string `json:"financialInstitutionNumber,omitempty"`
	// The organization's main source of income.  Possible values: **businessOperation**, **realEstateSales**, **investmentInterestOrRoyalty**, **propertyRental**, **other**.
	MainSourceOfIncome *string `json:"mainSourceOfIncome,omitempty"`
	// The tax reporting classification type.  Possible values: **nonFinancialNonReportable**, **financialNonReportable**, **nonFinancialActive**, **nonFinancialPassive**.
	Type *string `json:"type,omitempty"`
}

// NewTaxReportingClassification instantiates a new TaxReportingClassification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxReportingClassification() *TaxReportingClassification {
	this := TaxReportingClassification{}
	return &this
}

// NewTaxReportingClassificationWithDefaults instantiates a new TaxReportingClassification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxReportingClassificationWithDefaults() *TaxReportingClassification {
	this := TaxReportingClassification{}
	return &this
}

// GetBusinessType returns the BusinessType field value if set, zero value otherwise.
func (o *TaxReportingClassification) GetBusinessType() string {
	if o == nil || IsNil(o.BusinessType) {
		var ret string
		return ret
	}
	return *o.BusinessType
}

// GetBusinessTypeOk returns a tuple with the BusinessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxReportingClassification) GetBusinessTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessType) {
		return nil, false
	}
	return o.BusinessType, true
}

// HasBusinessType returns a boolean if a field has been set.
func (o *TaxReportingClassification) HasBusinessType() bool {
	if o != nil && !IsNil(o.BusinessType) {
		return true
	}

	return false
}

// SetBusinessType gets a reference to the given string and assigns it to the BusinessType field.
func (o *TaxReportingClassification) SetBusinessType(v string) {
	o.BusinessType = &v
}

// GetFinancialInstitutionNumber returns the FinancialInstitutionNumber field value if set, zero value otherwise.
func (o *TaxReportingClassification) GetFinancialInstitutionNumber() string {
	if o == nil || IsNil(o.FinancialInstitutionNumber) {
		var ret string
		return ret
	}
	return *o.FinancialInstitutionNumber
}

// GetFinancialInstitutionNumberOk returns a tuple with the FinancialInstitutionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxReportingClassification) GetFinancialInstitutionNumberOk() (*string, bool) {
	if o == nil || IsNil(o.FinancialInstitutionNumber) {
		return nil, false
	}
	return o.FinancialInstitutionNumber, true
}

// HasFinancialInstitutionNumber returns a boolean if a field has been set.
func (o *TaxReportingClassification) HasFinancialInstitutionNumber() bool {
	if o != nil && !IsNil(o.FinancialInstitutionNumber) {
		return true
	}

	return false
}

// SetFinancialInstitutionNumber gets a reference to the given string and assigns it to the FinancialInstitutionNumber field.
func (o *TaxReportingClassification) SetFinancialInstitutionNumber(v string) {
	o.FinancialInstitutionNumber = &v
}

// GetMainSourceOfIncome returns the MainSourceOfIncome field value if set, zero value otherwise.
func (o *TaxReportingClassification) GetMainSourceOfIncome() string {
	if o == nil || IsNil(o.MainSourceOfIncome) {
		var ret string
		return ret
	}
	return *o.MainSourceOfIncome
}

// GetMainSourceOfIncomeOk returns a tuple with the MainSourceOfIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxReportingClassification) GetMainSourceOfIncomeOk() (*string, bool) {
	if o == nil || IsNil(o.MainSourceOfIncome) {
		return nil, false
	}
	return o.MainSourceOfIncome, true
}

// HasMainSourceOfIncome returns a boolean if a field has been set.
func (o *TaxReportingClassification) HasMainSourceOfIncome() bool {
	if o != nil && !IsNil(o.MainSourceOfIncome) {
		return true
	}

	return false
}

// SetMainSourceOfIncome gets a reference to the given string and assigns it to the MainSourceOfIncome field.
func (o *TaxReportingClassification) SetMainSourceOfIncome(v string) {
	o.MainSourceOfIncome = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TaxReportingClassification) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxReportingClassification) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TaxReportingClassification) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TaxReportingClassification) SetType(v string) {
	o.Type = &v
}

func (o TaxReportingClassification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxReportingClassification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BusinessType) {
		toSerialize["businessType"] = o.BusinessType
	}
	if !IsNil(o.FinancialInstitutionNumber) {
		toSerialize["financialInstitutionNumber"] = o.FinancialInstitutionNumber
	}
	if !IsNil(o.MainSourceOfIncome) {
		toSerialize["mainSourceOfIncome"] = o.MainSourceOfIncome
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableTaxReportingClassification struct {
	value *TaxReportingClassification
	isSet bool
}

func (v NullableTaxReportingClassification) Get() *TaxReportingClassification {
	return v.value
}

func (v *NullableTaxReportingClassification) Set(val *TaxReportingClassification) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxReportingClassification) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxReportingClassification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxReportingClassification(val *TaxReportingClassification) *NullableTaxReportingClassification {
	return &NullableTaxReportingClassification{value: val, isSet: true}
}

func (v NullableTaxReportingClassification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxReportingClassification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


