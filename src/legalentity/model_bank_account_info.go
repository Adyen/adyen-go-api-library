/*
Legal Entity Management API

The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication To connect to the Legal Entity Management API, you must use the basic authentication credentials of your web service user. If you don't have one, contact the [Adyen Support Team](https://www.adyen.help/hc/en-us/requests/new). Use the web service user credentials to authenticate your request, for example:  ``` curl -U \"ws12345@Scope.BalancePlatform_YourBalancePlatform\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Legal Entity Management API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v2/legalEntities ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://kyc-live.adyen.com/lem/v2`.  

API version: 2
Contact: developer-experience@adyen.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package legalentity

import (
	"encoding/json"
)

// checks if the BankAccountInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BankAccountInfo{}

// BankAccountInfo struct for BankAccountInfo
type BankAccountInfo struct {
	// The bank account number (without separators).   When this is provided, the `branchCode` is also required.
	AccountNumber *string `json:"accountNumber,omitempty"`
	// The type of bank account.
	// Deprecated
	AccountType *string `json:"accountType,omitempty"`
	// The bank's BIC or SWIFT code.
	BankBicSwift *string `json:"bankBicSwift,omitempty"`
	// The city where the bank is located.
	BankCity *string `json:"bankCity,omitempty"`
	// The bank code of the banking institution with which the bank account is registered.
	BankCode *string `json:"bankCode,omitempty"`
	// The name of the banking institution where the bank account is held.
	BankName *string `json:"bankName,omitempty"`
	// The branch code of the branch under which the bank account is registered.  Required when you provide an `accountNumber`.   In the following countries, this value corresponds to:   * United States: routing number * United Kingdom: sort code * Germany: Bankleitzahl
	BranchCode *string `json:"branchCode,omitempty"`
	// The check code of the bank account.
	CheckCode *string `json:"checkCode,omitempty"`
	// The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the bank account is registered. For example, **NL**.
	CountryCode string `json:"countryCode"`
	// The account's three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). For example, **EUR**.
	CurrencyCode string `json:"currencyCode"`
	// The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.
	Iban *string `json:"iban,omitempty"`
}

// NewBankAccountInfo instantiates a new BankAccountInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBankAccountInfo(countryCode string, currencyCode string) *BankAccountInfo {
	this := BankAccountInfo{}
	this.CountryCode = countryCode
	this.CurrencyCode = currencyCode
	return &this
}

// NewBankAccountInfoWithDefaults instantiates a new BankAccountInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBankAccountInfoWithDefaults() *BankAccountInfo {
	this := BankAccountInfo{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *BankAccountInfo) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccountInfo) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *BankAccountInfo) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *BankAccountInfo) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
// Deprecated
func (o *BankAccountInfo) GetAccountType() string {
	if o == nil || IsNil(o.AccountType) {
		var ret string
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *BankAccountInfo) GetAccountTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AccountType) {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *BankAccountInfo) HasAccountType() bool {
	if o != nil && !IsNil(o.AccountType) {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given string and assigns it to the AccountType field.
// Deprecated
func (o *BankAccountInfo) SetAccountType(v string) {
	o.AccountType = &v
}

// GetBankBicSwift returns the BankBicSwift field value if set, zero value otherwise.
func (o *BankAccountInfo) GetBankBicSwift() string {
	if o == nil || IsNil(o.BankBicSwift) {
		var ret string
		return ret
	}
	return *o.BankBicSwift
}

// GetBankBicSwiftOk returns a tuple with the BankBicSwift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccountInfo) GetBankBicSwiftOk() (*string, bool) {
	if o == nil || IsNil(o.BankBicSwift) {
		return nil, false
	}
	return o.BankBicSwift, true
}

// HasBankBicSwift returns a boolean if a field has been set.
func (o *BankAccountInfo) HasBankBicSwift() bool {
	if o != nil && !IsNil(o.BankBicSwift) {
		return true
	}

	return false
}

// SetBankBicSwift gets a reference to the given string and assigns it to the BankBicSwift field.
func (o *BankAccountInfo) SetBankBicSwift(v string) {
	o.BankBicSwift = &v
}

// GetBankCity returns the BankCity field value if set, zero value otherwise.
func (o *BankAccountInfo) GetBankCity() string {
	if o == nil || IsNil(o.BankCity) {
		var ret string
		return ret
	}
	return *o.BankCity
}

// GetBankCityOk returns a tuple with the BankCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccountInfo) GetBankCityOk() (*string, bool) {
	if o == nil || IsNil(o.BankCity) {
		return nil, false
	}
	return o.BankCity, true
}

// HasBankCity returns a boolean if a field has been set.
func (o *BankAccountInfo) HasBankCity() bool {
	if o != nil && !IsNil(o.BankCity) {
		return true
	}

	return false
}

// SetBankCity gets a reference to the given string and assigns it to the BankCity field.
func (o *BankAccountInfo) SetBankCity(v string) {
	o.BankCity = &v
}

// GetBankCode returns the BankCode field value if set, zero value otherwise.
func (o *BankAccountInfo) GetBankCode() string {
	if o == nil || IsNil(o.BankCode) {
		var ret string
		return ret
	}
	return *o.BankCode
}

// GetBankCodeOk returns a tuple with the BankCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccountInfo) GetBankCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BankCode) {
		return nil, false
	}
	return o.BankCode, true
}

// HasBankCode returns a boolean if a field has been set.
func (o *BankAccountInfo) HasBankCode() bool {
	if o != nil && !IsNil(o.BankCode) {
		return true
	}

	return false
}

// SetBankCode gets a reference to the given string and assigns it to the BankCode field.
func (o *BankAccountInfo) SetBankCode(v string) {
	o.BankCode = &v
}

// GetBankName returns the BankName field value if set, zero value otherwise.
func (o *BankAccountInfo) GetBankName() string {
	if o == nil || IsNil(o.BankName) {
		var ret string
		return ret
	}
	return *o.BankName
}

// GetBankNameOk returns a tuple with the BankName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccountInfo) GetBankNameOk() (*string, bool) {
	if o == nil || IsNil(o.BankName) {
		return nil, false
	}
	return o.BankName, true
}

// HasBankName returns a boolean if a field has been set.
func (o *BankAccountInfo) HasBankName() bool {
	if o != nil && !IsNil(o.BankName) {
		return true
	}

	return false
}

// SetBankName gets a reference to the given string and assigns it to the BankName field.
func (o *BankAccountInfo) SetBankName(v string) {
	o.BankName = &v
}

// GetBranchCode returns the BranchCode field value if set, zero value otherwise.
func (o *BankAccountInfo) GetBranchCode() string {
	if o == nil || IsNil(o.BranchCode) {
		var ret string
		return ret
	}
	return *o.BranchCode
}

// GetBranchCodeOk returns a tuple with the BranchCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccountInfo) GetBranchCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BranchCode) {
		return nil, false
	}
	return o.BranchCode, true
}

// HasBranchCode returns a boolean if a field has been set.
func (o *BankAccountInfo) HasBranchCode() bool {
	if o != nil && !IsNil(o.BranchCode) {
		return true
	}

	return false
}

// SetBranchCode gets a reference to the given string and assigns it to the BranchCode field.
func (o *BankAccountInfo) SetBranchCode(v string) {
	o.BranchCode = &v
}

// GetCheckCode returns the CheckCode field value if set, zero value otherwise.
func (o *BankAccountInfo) GetCheckCode() string {
	if o == nil || IsNil(o.CheckCode) {
		var ret string
		return ret
	}
	return *o.CheckCode
}

// GetCheckCodeOk returns a tuple with the CheckCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccountInfo) GetCheckCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CheckCode) {
		return nil, false
	}
	return o.CheckCode, true
}

// HasCheckCode returns a boolean if a field has been set.
func (o *BankAccountInfo) HasCheckCode() bool {
	if o != nil && !IsNil(o.CheckCode) {
		return true
	}

	return false
}

// SetCheckCode gets a reference to the given string and assigns it to the CheckCode field.
func (o *BankAccountInfo) SetCheckCode(v string) {
	o.CheckCode = &v
}

// GetCountryCode returns the CountryCode field value
func (o *BankAccountInfo) GetCountryCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
func (o *BankAccountInfo) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryCode, true
}

// SetCountryCode sets field value
func (o *BankAccountInfo) SetCountryCode(v string) {
	o.CountryCode = v
}

// GetCurrencyCode returns the CurrencyCode field value
func (o *BankAccountInfo) GetCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value
// and a boolean to check if the value has been set.
func (o *BankAccountInfo) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyCode, true
}

// SetCurrencyCode sets field value
func (o *BankAccountInfo) SetCurrencyCode(v string) {
	o.CurrencyCode = v
}

// GetIban returns the Iban field value if set, zero value otherwise.
func (o *BankAccountInfo) GetIban() string {
	if o == nil || IsNil(o.Iban) {
		var ret string
		return ret
	}
	return *o.Iban
}

// GetIbanOk returns a tuple with the Iban field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccountInfo) GetIbanOk() (*string, bool) {
	if o == nil || IsNil(o.Iban) {
		return nil, false
	}
	return o.Iban, true
}

// HasIban returns a boolean if a field has been set.
func (o *BankAccountInfo) HasIban() bool {
	if o != nil && !IsNil(o.Iban) {
		return true
	}

	return false
}

// SetIban gets a reference to the given string and assigns it to the Iban field.
func (o *BankAccountInfo) SetIban(v string) {
	o.Iban = &v
}

func (o BankAccountInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BankAccountInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.AccountType) {
		toSerialize["accountType"] = o.AccountType
	}
	if !IsNil(o.BankBicSwift) {
		toSerialize["bankBicSwift"] = o.BankBicSwift
	}
	if !IsNil(o.BankCity) {
		toSerialize["bankCity"] = o.BankCity
	}
	if !IsNil(o.BankCode) {
		toSerialize["bankCode"] = o.BankCode
	}
	if !IsNil(o.BankName) {
		toSerialize["bankName"] = o.BankName
	}
	if !IsNil(o.BranchCode) {
		toSerialize["branchCode"] = o.BranchCode
	}
	if !IsNil(o.CheckCode) {
		toSerialize["checkCode"] = o.CheckCode
	}
	toSerialize["countryCode"] = o.CountryCode
	toSerialize["currencyCode"] = o.CurrencyCode
	if !IsNil(o.Iban) {
		toSerialize["iban"] = o.Iban
	}
	return toSerialize, nil
}

type NullableBankAccountInfo struct {
	value *BankAccountInfo
	isSet bool
}

func (v NullableBankAccountInfo) Get() *BankAccountInfo {
	return v.value
}

func (v *NullableBankAccountInfo) Set(val *BankAccountInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBankAccountInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBankAccountInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBankAccountInfo(val *BankAccountInfo) *NullableBankAccountInfo {
	return &NullableBankAccountInfo{value: val, isSet: true}
}

func (v NullableBankAccountInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBankAccountInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


