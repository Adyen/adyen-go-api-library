/*
Adyen Stored Value API

API version: 46
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storedvalue

import (
	_context "context"
	_nethttp "net/http"
)

/*
Changes the status of the payment method.
Changes the status of the provided payment method to the specified status.
 * @param req StoredValueStatusChangeRequest - reference of StoredValueStatusChangeRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return StoredValueStatusChangeResponse
*/
func (a StoredValue) ChangeStatus(req *StoredValueStatusChangeRequest, ctxs ..._context.Context) (StoredValueStatusChangeResponse, *_nethttp.Response, error) {
	res := &StoredValueStatusChangeResponse{}
	path := "/changeStatus"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Checks the balance.
Checks the balance of the provided payment method.
 * @param req StoredValueBalanceCheckRequest - reference of StoredValueBalanceCheckRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return StoredValueBalanceCheckResponse
*/
func (a StoredValue) CheckBalance(req *StoredValueBalanceCheckRequest, ctxs ..._context.Context) (StoredValueBalanceCheckResponse, *_nethttp.Response, error) {
	res := &StoredValueBalanceCheckResponse{}
	path := "/checkBalance"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Issues a new card.
Issues a new card of the given payment method.
 * @param req StoredValueIssueRequest - reference of StoredValueIssueRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return StoredValueIssueResponse
*/
func (a StoredValue) Issue(req *StoredValueIssueRequest, ctxs ..._context.Context) (StoredValueIssueResponse, *_nethttp.Response, error) {
	res := &StoredValueIssueResponse{}
	path := "/issue"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Loads the payment method.
Loads the payment method with the specified funds.
 * @param req StoredValueLoadRequest - reference of StoredValueLoadRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return StoredValueLoadResponse
*/
func (a StoredValue) Load(req *StoredValueLoadRequest, ctxs ..._context.Context) (StoredValueLoadResponse, *_nethttp.Response, error) {
	res := &StoredValueLoadResponse{}
	path := "/load"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Merge the balance of two cards.
Increases the balance of the paymentmethod by the full amount left on the source paymentmethod
 * @param req StoredValueBalanceMergeRequest - reference of StoredValueBalanceMergeRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return StoredValueBalanceMergeResponse
*/
func (a StoredValue) MergeBalance(req *StoredValueBalanceMergeRequest, ctxs ..._context.Context) (StoredValueBalanceMergeResponse, *_nethttp.Response, error) {
	res := &StoredValueBalanceMergeResponse{}
	path := "/mergeBalance"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}

/*
Voids a transaction.
Voids the referenced stored value transaction.
 * @param req StoredValueVoidRequest - reference of StoredValueVoidRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return StoredValueVoidResponse
*/
func (a StoredValue) VoidTransaction(req *StoredValueVoidRequest, ctxs ..._context.Context) (StoredValueVoidResponse, *_nethttp.Response, error) {
	res := &StoredValueVoidResponse{}
	path := "/voidTransaction"
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+path, ctxs...)
	return *res, httpRes, err
}
