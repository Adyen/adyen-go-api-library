/*
 * Dispute service API
 *
 * This API provides endpoints for dispute management. You can use the API to retrieve defense reasons, supply defense ducoments, delete defense documents, upload chargebacks or accept disputes.  For more information on using the APIs, refer to [Dispute service](https://docs.adyen.com/risk-management/disputes-api).  ## Authentication Each request to the Dispute API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/user-management/how-to-get-the-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ```
 *
 * API version: 1
 * Contact: support@adyen.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package disputes

import (
	_context "context"
	_nethttp "net/http"

	"github.com/adyen/adyen-go-api-library/v6/src/common"
)

// Disputes Disputes service
type Disputes common.Service

/*
GetDownloadDisputeDefenseDocument Download Dispute defense document
Download a dispute defense document.
 * @param request DownloadDefenseDocumentRequest - reference of DownloadDefenseDocumentRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return DownloadDefenseDocumentResponse
*/
func (a Disputes) DownloadDisputeDefenseDocument(req *DownloadDefenseDocumentRequest, ctxs ..._context.Context) (DownloadDefenseDocumentResponse, *_nethttp.Response, error) {
	res := &DownloadDefenseDocumentResponse{}
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+"/downloadDisputeDefenseDocument", ctxs...)
	return *res, httpRes, err
}

/*
GetRetrieveApplicableDefenseReasons Retrieve applicable defense reasons
Retrieve a list of possible defense reasons with required documents for the given dispute.
 * @param request DefenseReasonsRequest - reference of DefenseReasonsRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return DefenseReasonsResponse
*/
func (a Disputes) RetrieveApplicableDefenseReasons(req *DefenseReasonsRequest, ctxs ..._context.Context) (DefenseReasonsResponse, *_nethttp.Response, error) {
	res := &DefenseReasonsResponse{}
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+"/retrieveApplicableDefenseReasons", ctxs...)
	return *res, httpRes, err
}

/*
PostDefendDispute Defend dispute
Defend the dispute with the given reason code.
 * @param request DefendDisputeRequest - reference of DefendDisputeRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return DefendDisputeResponse
*/
func (a Disputes) DefendDispute(req *DefendDisputeRequest, ctxs ..._context.Context) (DefendDisputeResponse, *_nethttp.Response, error) {
	res := &DefendDisputeResponse{}
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+"/defendDispute", ctxs...)
	return *res, httpRes, err
}

/*
PostDeleteDisputeDefenseDocument Delete dispute defense document
Delete a dispute defense document.
 * @param request DeleteDefenseDocumentRequest - reference of DeleteDefenseDocumentRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return DeleteDefenseDocumentResponse
*/
func (a Disputes) DeleteDisputeDefenseDocument(req *DeleteDefenseDocumentRequest, ctxs ..._context.Context) (DeleteDefenseDocumentResponse, *_nethttp.Response, error) {
	res := &DeleteDefenseDocumentResponse{}
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+"/deleteDisputeDefenseDocument", ctxs...)
	return *res, httpRes, err
}

/*
PostSupplyDefenseDocument Supply defense document
Supply a dispute defense document.
 * @param request SupplyDefenseDocumentRequest - reference of SupplyDefenseDocumentRequest).
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return SupplyDefenseDocumentResponse
*/
func (a Disputes) SupplyDefenseDocument(req *SupplyDefenseDocumentRequest, ctxs ..._context.Context) (SupplyDefenseDocumentResponse, *_nethttp.Response, error) {
	res := &SupplyDefenseDocumentResponse{}
	httpRes, err := a.Client.MakeHTTPPostRequest(req, res, a.BasePath()+"/supplyDefenseDocument", ctxs...)
	return *res, httpRes, err
}
