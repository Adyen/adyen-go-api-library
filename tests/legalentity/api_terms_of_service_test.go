/*
Legal Entity Management API

Testing TermsOfServiceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package legalentity

import (
	"context"
	openapiclient "github.com/adyen/adyen-go-api-library/v6/src/legalentity"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"net/http"
	"net/http/httptest"
	"testing"
)

func Test_LegalEntity_TermsOfServiceApiService(t *testing.T) {

	var (
		username    = "n/a"
		password    = "n/a"
		env         = openapiclient.TestEnv
		mockServer  *httptest.Server
		mockRequest *http.Request
	)

	mockServer = httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		mockRequest = r
	}))
	defer mockServer.Close()

	configuration, err := openapiclient.NewConfiguration(username, password, env)
	configuration.Servers = openapiclient.ServerConfigurations{
		{
			URL:         mockServer.URL,
			Description: "Mock Server",
		},
	}

	require.Nil(t, err, "Error creating Config object")
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TermsOfServiceApiService GetTermsOfServiceInformationForLegalEntity", func(t *testing.T) {

		apiClient.TermsOfServiceApi.GetTermsOfServiceInformationForLegalEntity(context.Background(), "123").Execute()

		assert.Equal(t, "GET", mockRequest.Method)
		assert.Equal(t, "/legalEntities/123/termsOfServiceAcceptanceInfos", mockRequest.URL.Path)
		assert.NotEmpty(t, mockRequest.Header.Get("Authorization"))

	})

	t.Run("Test TermsOfServiceApiService GetTermsOfServiceStatus", func(t *testing.T) {

		apiClient.TermsOfServiceApi.GetTermsOfServiceStatus(context.Background(), "123").Execute()

		assert.Equal(t, "GET", mockRequest.Method)
		assert.Equal(t, "/legalEntities/123/termsOfServiceStatus", mockRequest.URL.Path)
		assert.NotEmpty(t, mockRequest.Header.Get("Authorization"))

	})

	t.Run("Test TermsOfServiceApiService AcceptTermsOfService", func(t *testing.T) {

		legalEntityId := "123"
		termsOfServiceDocumentId := "456"

		apiClient.TermsOfServiceApi.AcceptTermsOfService(context.Background(), legalEntityId, termsOfServiceDocumentId).Execute()

		assert.Equal(t, "PATCH", mockRequest.Method)
		assert.Equal(t, "/legalEntities/123/termsOfService/456", mockRequest.URL.Path)
		assert.NotEmpty(t, mockRequest.Header.Get("Authorization"))

	})

	t.Run("Test TermsOfServiceApiService GetTermsOfServiceDocument", func(t *testing.T) {

		apiClient.TermsOfServiceApi.GetTermsOfServiceDocument(context.Background(), "123").Execute()

		assert.Equal(t, "POST", mockRequest.Method)
		assert.Equal(t, "/legalEntities/123/termsOfService", mockRequest.URL.Path)
		assert.NotEmpty(t, mockRequest.Header.Get("Authorization"))

	})

}
