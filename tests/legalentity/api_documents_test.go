/*
Legal Entity Management API

Testing DocumentsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package legalentity

import (
    "context"
    openapiclient "github.com/adyen/adyen-go-api-library/v6/src/legalentity"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "net/http"
    "net/http/httptest"
    "testing"
)

func Test_LegalEntity_DocumentsApiService(t *testing.T) {

    var (
        username    = "n/a"
        password    = "n/a"
        env         = openapiclient.TestEnv
        mockServer  *httptest.Server
        mockRequest *http.Request
    )

    mockServer = httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        mockRequest = r
    }))
    defer mockServer.Close()

    configuration, err := openapiclient.NewConfiguration(username, password, env)
    configuration.Servers = openapiclient.ServerConfigurations{
        {
            URL:         mockServer.URL,
            Description: "Mock Server",
        },
    }

    require.Nil(t, err, "Error creating Config object")
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test DocumentsApiService DeleteDocument", func(t *testing.T) {

        apiClient.DocumentsApi.DeleteDocument(context.Background(), "123").Execute()

        assert.Equal(t, "DELETE", mockRequest.Method)
        assert.Equal(t, "/documents/123", mockRequest.URL.Path)
        assert.NotEmpty(t, mockRequest.Header.Get("Authorization"))

    })

    t.Run("Test DocumentsApiService GetDocument", func(t *testing.T) {

        apiClient.DocumentsApi.GetDocument(context.Background(), "123").Execute()

        assert.Equal(t, "GET", mockRequest.Method)
        assert.Equal(t, "/documents/123", mockRequest.URL.Path)
        assert.NotEmpty(t, mockRequest.Header.Get("Authorization"))

    })

    t.Run("Test DocumentsApiService UpdateDocument", func(t *testing.T) {

        apiClient.DocumentsApi.UpdateDocument(context.Background(), "123").Execute()

        assert.Equal(t, "PATCH", mockRequest.Method)
        assert.Equal(t, "/documents/123", mockRequest.URL.Path)
        assert.NotEmpty(t, mockRequest.Header.Get("Authorization"))

    })

    t.Run("Test DocumentsApiService UploadDocumentForVerificationChecks", func(t *testing.T) {

        apiClient.DocumentsApi.UploadDocumentForVerificationChecks(context.Background()).Execute()

        assert.Equal(t, "POST", mockRequest.Method)
        assert.Equal(t, "/documents", mockRequest.URL.Path)
        assert.NotEmpty(t, mockRequest.Header.Get("Authorization"))

    })

}
