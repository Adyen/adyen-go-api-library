{{>partial_header}}
{{#lambda.lowercase}}
package {{packageName}}
{{/lambda.lowercase}}

{{#operations}}
import (
	_context "context"
    _nethttp "net/http"
    "strings"
    "github.com/adyen/adyen-go-api-library/v6/src/common"
)

// {{classname}} {{classname}} service
type {{classname}} common.Service
{{#operation}}

type {{#structPrefix}}{{&classname}}{{/structPrefix}}{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}Config struct {
	ctx context.Context
{{#allParams}}
	{{paramName}} {{^isPathParam}}{{^isFile}}*{{/isFile}}{{/isPathParam}}{{{dataType}}}
{{/allParams}}
}

{{#allParams}}
{{^isPathParam}}
{{#description}}
// {{.}}
{{/description}}
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func (r {{#structPrefix}}{{&classname}}{{/structPrefix}}{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}Config) {{vendorExtensions.x-export-param-name}}({{paramName}} {{{dataType}}}) {{#structPrefix}}{{&classname}}{{/structPrefix}}{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}Config {
	r.{{paramName}} = {{^isFile}}&{{/isFile}}{{paramName}}
	return r
}

{{/isPathParam}}
{{/allParams}}

/*
{{operationId}} {{{summary}}}{{^summary}}Method for {{operationId}}{{/summary}}
{{#notes}}

{{{unescapedNotes}}}
{{/notes}}

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().{{#pathParams}}
 @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
 @return {{#structPrefix}}{{&classname}}{{/structPrefix}}{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}Config
{{#isDeprecated}}

Deprecated
{{/isDeprecated}}
*/
func (a *{{{classname}}}) {{{nickname}}}Config(ctx context.Context{{#pathParams}}, {{paramName}} {{{dataType}}}{{/pathParams}}) {{#structPrefix}}{{&classname}}{{/structPrefix}}{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}Config {
	return {{#structPrefix}}{{&classname}}{{/structPrefix}}{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}Config{
		ctx: ctx,
		{{#pathParams}}
		{{paramName}}: {{paramName}},
		{{/pathParams}}
	}
}

/*
{{#summary}}{{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}
{{#notes}}
{{notes}}
{{/notes}}
{{#pathParams}}
{{#required}}
 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}
{{/required}}
{{/pathParams}}
{{#bodyParams}}
{{#required}}
 * @param req{{#description}} {{{.}}}{{/description}}
{{/required}}
{{/bodyParams}}
{{#hasOptionalParams}}
{{#pathParams}}
{{^required}}
 * @param request {{vendorExtensions.x-export-param-name}} - reference of {{dataType}}). {{#description}} {{{.}}}{{/description}}
{{/required}}
{{/pathParams}}
{{#bodyParams}}
{{^required}}
 * @param req {{vendorExtensions.x-export-param-name}} - reference of {{dataType}}). {{#description}} {{{.}}}{{/description}}
{{/required}}
{{/bodyParams}}
{{/hasOptionalParams}}
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
{{#returnType}}
@return {{{returnType}}}
{{/returnType}}
*/

func (a *{{{classname}}}) {{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}(r {{#structPrefix}}{{&classname}}{{/structPrefix}}{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}Config) ({{#returnType}}{{{returnType}}}, {{/returnType}}*_nethttp.Response, error) {
    {{#returnType}}
    res := &{{{returnType}}}{}
    {{/returnType}}
    {{^returnType}}
    var res interface{}
    {{/returnType}}
	path := "{{{path}}}"{{#pathParams}}
    path = strings.Replace(path, "{"+"{{baseName}}"+"}", url.PathEscape(common.ParameterValueToString(r.{{paramName}}, "{{paramName}}")), -1){{/pathParams}}
{{#hasQueryParams}}
    queryString := url.Values{}
{{#queryParams}}
    if r.{{paramName}} != nil {
        common.ParameterAddToQuery(queryString, "{{baseName}}", r.{{paramName}}, "")
    }
{{/queryParams}}
{{/hasQueryParams}}
    httpRes, err := common.CreateHTTPRequest(a.Client, _nethttp.Method{{httpMethod}}, {{#bodyParams}}r.{{paramName}}{{/bodyParams}}{{^bodyParams}}nil{{/bodyParams}}, res, a.BasePath() + path{{#hasQueryParams}} + "?" + queryString.Encode(){{/hasQueryParams}}, []_context.Context{r.ctx})
    return {{#returnType}}*res, {{/returnType}}httpRes, err
}

{{/operation}}
{{/operations}}
