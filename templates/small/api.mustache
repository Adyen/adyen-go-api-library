{{>partial_header}}
{{#lambda.lowercase}}
package {{packageName}}
{{/lambda.lowercase}}

{{#operations}}
import (
	_context "context"
    _nethttp "net/http"
    "strings"
    "github.com/adyen/adyen-go-api-library/v6/src/common"
)

// {{classname}} {{classname}} service
type {{classname}} common.Service

{{#operation}}

/*
{{#summary}}{{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}
{{#notes}}
{{notes}}
{{/notes}}
{{#pathParams}}
{{#required}}
 * @param {{paramName}}{{#description}} {{{.}}}{{/description}}
{{/required}}
{{/pathParams}}
{{#bodyParams}}
{{#required}}
 * @param req{{#description}} {{{.}}}{{/description}}
{{/required}}
{{/bodyParams}}
{{#hasOptionalParams}}
{{#pathParams}}
{{^required}}
 * @param request {{vendorExtensions.x-export-param-name}} - reference of {{dataType}}). {{#description}} {{{.}}}{{/description}}
{{/required}}
{{/pathParams}}
{{#bodyParams}}
{{^required}}
 * @param req {{vendorExtensions.x-export-param-name}} - reference of {{dataType}}). {{#description}} {{{.}}}{{/description}}
{{/required}}
{{/bodyParams}}
{{/hasOptionalParams}}
 * @param ctxs ..._context.Context - optional, for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
{{#returnType}}
@return {{{returnType}}}
{{/returnType}}
*/
func (a {{classname}}) {{#lambda.titlecase}}{{vendorExtensions.x-methodName}}{{/lambda.titlecase}}({{#pathParams}}{{paramName}} *{{{dataType}}}{{^last}}, {{/last}}{{/pathParams}}{{#hasQueryParams}}queryParams map[string]string, {{/hasQueryParams}}{{#bodyParams}}req *{{{dataType}}}{{^last}}, {{/last}}{{/bodyParams}}ctxs ..._context.Context) ({{#returnType}}{{{returnType}}}, {{/returnType}}*_nethttp.Response, error) {
    {{#returnType}}
    res := &{{{returnType}}}{}
    {{/returnType}}
    {{^returnType}}
    var res interface{}
    {{/returnType}}
	path := "{{{path}}}"
	{{#pathParams}}
	path = strings.ReplaceAll(path, "{" + "{{baseName}}" + "}", *{{paramName}})
	{{/pathParams}}
{{#hasQueryParams}}
    queryString := url.Values{}
{{#queryParams}}
    if _, ok := queryParams["{{paramName}}"]; ok {
        queryString.Add("{{baseName}}",  queryParams["{{paramName}}"])
    }
{{/queryParams}}
{{/hasQueryParams}}
    httpRes, err := a.Client.MakeHTTP{{httpMethod}}Request({{#hasBodyParam}}req, {{/hasBodyParam}}res, a.BasePath() + path{{#hasQueryParams}} + "?" + queryString.Encode(){{/hasQueryParams}}, ctxs...)
    return {{#returnType}}*res, {{/returnType}}httpRes, err
}

{{/operation}}
{{/operations}}
