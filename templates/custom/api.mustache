{{>partial_header}}
{{#lambda.lowercase}}
package {{packageName}}
{{/lambda.lowercase}}

{{#operations}}
import (
	"context"
    "net/http"
    "net/url"
    "strings"
    "github.com/adyen/adyen-go-api-library/v7/src/common"
)

// {{classname}} service
type {{classname}} common.Service
{{#operation}}

// All parameters accepted by {{{classname}}}.{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}
type {{#structPrefix}}{{&classname}}{{/structPrefix}}{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}Input struct {
{{#allParams}}
	{{paramName}} {{^isPathParam}}{{^isFile}}*{{/isFile}}{{/isPathParam}}{{{dataType}}}
{{/allParams}}
}

{{#allParams}}
{{^isPathParam}}
{{#description}}
// {{.}}
{{/description}}
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func (r {{#structPrefix}}{{&classname}}{{/structPrefix}}{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}Input) {{vendorExtensions.x-export-param-name}}({{paramName}} {{{dataType}}}) {{#structPrefix}}{{&classname}}{{/structPrefix}}{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}Input {
	r.{{paramName}} = {{^isFile}}&{{/isFile}}{{paramName}}
	return r
}

{{/isPathParam}}
{{/allParams}}

/*
Prepare a request for {{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}
{{#pathParams}}
@param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}
@return {{#structPrefix}}{{&classname}}{{/structPrefix}}{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}Input
{{#isDeprecated}}

Deprecated
{{/isDeprecated}}
*/
func (a *{{{classname}}}) {{{nickname}}}Input({{#pathParams}}, {{paramName}} {{{dataType}}}{{/pathParams}}) {{#structPrefix}}{{&classname}}{{/structPrefix}}{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}Input {
	return {{#structPrefix}}{{&classname}}{{/structPrefix}}{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}Input{
		{{#pathParams}}
		{{paramName}}: {{paramName}},
		{{/pathParams}}
	}
}

/*
{{operationId}} {{{summary}}}{{^summary}}Method for {{operationId}}{{/summary}}
{{#notes}}

{{{unescapedNotes}}}
{{/notes}}

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param r {{#structPrefix}}{{&classname}}{{/structPrefix}}{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}Input - Request parameters, see {{{nickname}}}Input
@return {{{returnType}}}, *http.Response, error
{{#isDeprecated}}

    Deprecated
{{/isDeprecated}}
*/
func (a *{{{classname}}}) {{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}(ctx context.Context, r {{#structPrefix}}{{&classname}}{{/structPrefix}}{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}Input) ({{#returnType}}{{{returnType}}}, {{/returnType}}*http.Response, error) {
    {{#returnType}}
    res := &{{{returnType}}}{}
    {{/returnType}}
    {{^returnType}}
    var res interface{}
    {{/returnType}}
	path := "{{{path}}}"{{#pathParams}}
    path = strings.Replace(path, "{"+"{{baseName}}"+"}", url.PathEscape(common.ParameterValueToString(r.{{paramName}}, "{{paramName}}")), -1){{/pathParams}}
    queryParams := url.Values{}
    headerParams := make(map[string]string)
{{#queryParams}}
    if r.{{paramName}} != nil {
        common.ParameterAddToQuery(queryParams, "{{baseName}}", r.{{paramName}}, "")
    }
{{/queryParams}}
{{#headerParams}}
    {{#required}}
    common.ParameterAddToHeaderOrQuery(headerParams, "{{baseName}}", r.{{paramName}}, "{{collectionFormat}}")
    {{/required}}
    {{^required}}
    if r.{{paramName}} != nil {
        common.ParameterAddToHeaderOrQuery(headerParams, "{{baseName}}", r.{{paramName}}, "{{collectionFormat}}")
    }
    {{/required}}
{{/headerParams}}
    httpRes, err := common.SendAPIRequest(
        ctx,
        a.Client,
        {{#bodyParams}}r.{{paramName}}{{/bodyParams}}{{^bodyParams}}nil{{/bodyParams}},
        res,
        http.Method{{httpMethod}},
        a.BasePath()+path,
        queryParams,
        headerParams,
    )

    return {{#returnType}}*res, {{/returnType}}httpRes, err
}

{{/operation}}
{{/operations}}
